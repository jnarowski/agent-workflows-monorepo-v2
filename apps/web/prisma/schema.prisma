datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

// Placeholder models for future workflow state storage
model Workflow {
  id         String   @id
  name       String
  status     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("workflows")
}

model WorkflowStep {
  id          String   @id @default(uuid())
  workflow_id String
  name        String
  status      String
  result      String?  // JSON string
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("workflow_steps")
}

model Project {
  id         String   @id @default(cuid())
  name       String
  path       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  sessions   AgentSession[]

  @@map("projects")
}

model User {
  id            String        @id @default(uuid())
  username      String        @unique
  password_hash String
  created_at    DateTime      @default(now())
  last_login    DateTime?
  is_active     Boolean       @default(true)
  sessions      AgentSession[]

  @@map("users")
}

model AgentSession {
  id         String   @id @default(uuid())
  projectId  String
  userId     String
  name       String?  // AI-generated session name (nullable for legacy sessions)
  metadata   Json     // { totalTokens, messageCount, lastMessageAt, firstMessagePreview }
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId, updated_at])
  @@index([userId, updated_at])
  @@map("agent_sessions")
}
