/**
 * TypeScript interfaces for Claude CLI JSONL session format
 * These types represent the structure of .jsonl files generated by Claude Code CLI
 */

/**
 * Common base fields present in all Claude session rows
 */
interface ClaudeSessionRowBase {
  /** Unique identifier for this event/message */
  uuid: string;
  /** UUID of the parent event in the conversation tree */
  parentUuid: string | null;
  /** ISO timestamp of when this event occurred */
  timestamp: string;
  /** Session identifier */
  sessionId: string;
  /** Claude CLI version */
  version: string;
  /** Current git branch at time of event */
  gitBranch: string;
  /** Current working directory */
  cwd: string;
  /** Whether this is a sidechain conversation */
  isSidechain: boolean;
  /** Type of user (e.g., 'external') */
  userType: string;
}

/**
 * File backup information for Claude's file history tracking
 */
export interface ClaudeFileBackup {
  backupFileName: string;
  version: number;
  backupTime: string;
}

/**
 * Snapshot of tracked files at a point in time
 */
export interface ClaudeFileHistorySnapshot {
  messageId: string;
  trackedFileBackups: Record<string, ClaudeFileBackup>;
  timestamp: string;
}

/**
 * File history snapshot event
 */
export interface ClaudeFileHistorySnapshotRow {
  type: 'file-history-snapshot';
  messageId: string;
  snapshot: ClaudeFileHistorySnapshot;
  isSnapshotUpdate: boolean;
}

/**
 * Claude thinking configuration metadata
 */
export interface ClaudeThinkingMetadata {
  level: 'low' | 'medium' | 'high';
  disabled: boolean;
  triggers: string[];
}

/**
 * Content block types for Claude messages
 */
export type ClaudeContentBlock =
  | { type: 'text'; text: string }
  | { type: 'thinking'; thinking: string; signature?: string }
  | { type: 'tool_use'; id: string; name: string; input: Record<string, any> }
  | { type: 'tool_result'; tool_use_id: string; content: string; is_error?: boolean };

/**
 * Claude message structure
 */
export interface ClaudeMessage {
  role: 'user' | 'assistant';
  content: ClaudeContentBlock[] | string;
  model?: string;
  id?: string;
  type?: 'message';
  stop_reason?: string | null;
  stop_sequence?: string | null;
  usage?: {
    input_tokens: number;
    output_tokens: number;
    cache_creation_input_tokens?: number;
    cache_read_input_tokens?: number;
    cache_creation?: {
      ephemeral_5m_input_tokens?: number;
      ephemeral_1h_input_tokens?: number;
    };
    service_tier?: string;
  };
}

/**
 * User message row in Claude session
 */
export interface ClaudeUserMessageRow extends ClaudeSessionRowBase {
  type: 'user';
  message: ClaudeMessage;
  /** Whether this is a meta/system message */
  isMeta?: boolean;
  /** Thinking configuration for this message */
  thinkingMetadata?: ClaudeThinkingMetadata;
}

/**
 * Assistant message row in Claude session
 */
export interface ClaudeAssistantMessageRow extends ClaudeSessionRowBase {
  type: 'assistant';
  message: ClaudeMessage;
  /** API request ID */
  requestId?: string;
}

/**
 * Tool use result information
 */
export interface ClaudeToolUseResult {
  type?: 'text';
  file?: {
    filePath: string;
    content: string;
    numLines: number;
    startLine: number;
    totalLines: number;
  };
  filePath?: string;
  oldString?: string;
  newString?: string;
  originalFile?: string;
  structuredPatch?: Array<{
    oldStart: number;
    oldLines: number;
    newStart: number;
    newLines: number;
    lines: string[];
  }>;
  userModified?: boolean;
  replaceAll?: boolean;
  filenames?: string[];
  durationMs?: number;
  numFiles?: number;
  truncated?: boolean;
}

/**
 * Discriminated union of all Claude session row types
 */
export type ClaudeSessionRow =
  | ClaudeFileHistorySnapshotRow
  | ClaudeUserMessageRow
  | ClaudeAssistantMessageRow;

/**
 * Complete Claude session data (array of JSONL rows)
 */
export type ClaudeSessionData = ClaudeSessionRow[];

/**
 * Type guard to check if a row is a file history snapshot
 */
export function isFileHistorySnapshot(row: ClaudeSessionRow): row is ClaudeFileHistorySnapshotRow {
  return row.type === 'file-history-snapshot';
}

/**
 * Type guard to check if a row is a user message
 */
export function isUserMessage(row: ClaudeSessionRow): row is ClaudeUserMessageRow {
  return row.type === 'user';
}

/**
 * Type guard to check if a row is an assistant message
 */
export function isAssistantMessage(row: ClaudeSessionRow): row is ClaudeAssistantMessageRow {
  return row.type === 'assistant';
}
