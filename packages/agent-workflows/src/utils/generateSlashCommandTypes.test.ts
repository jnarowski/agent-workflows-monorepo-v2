import { describe, it, expect } from "vitest";
import { generateSlashCommandTypesCode } from "./generateSlashCommandTypes.js";
import type { CommandDefinition } from "../types/workflow.js";

describe("generateSlashCommandTypesCode", () => {
  it("should generate types for multiple commands with arguments", () => {
    const commands: CommandDefinition[] = [
      {
        name: "/generate-prd",
        description: "Generate PRD",
        arguments: [
          { name: "feature-name", required: true },
          { name: "context", required: false },
        ],
      },
      {
        name: "/implement-spec",
        description: "Implement spec",
        arguments: [{ name: "spec-name-or-path", required: true }],
      },
    ];

    const code = generateSlashCommandTypesCode(commands);

    // Should have header
    expect(code).toContain("// Auto-generated by agent-workflows generate-slash-types");

    // Should have union type
    expect(code).toContain('export type SlashCommandName = "/generate-prd" | "/implement-spec"');

    // Should have args interface with correct optional markers (properties are quoted)
    expect(code).toContain('"/generate-prd": { "feature-name": string; "context"?: string }');
    expect(code).toContain('"/implement-spec": { "spec-name-or-path": string }');

    // Should have buildSlashCommand function
    expect(code).toContain("export function buildSlashCommand");
  });

  it("should generate types for commands with no arguments", () => {
    const commands: CommandDefinition[] = [
      {
        name: "/check",
        description: "Run checks",
        arguments: [],
      },
    ];

    const code = generateSlashCommandTypesCode(commands);

    expect(code).toContain('"/check": Record<string, never>');
  });

  it("should handle empty commands array", () => {
    const code = generateSlashCommandTypesCode([]);

    expect(code).toContain("export type SlashCommandName = never");
    expect(code).toContain("No commands found");
  });

  it("should generate valid TypeScript", () => {
    const commands: CommandDefinition[] = [
      {
        name: "/test-cmd",
        description: "Test",
        arguments: [
          { name: "arg1", required: true },
          { name: "arg2", required: false },
        ],
      },
    ];

    const code = generateSlashCommandTypesCode(commands);

    // Check for TypeScript syntax elements
    expect(code).toMatch(/export type SlashCommandName = /);
    expect(code).toMatch(/export interface SlashCommandArgs/);
    expect(code).toMatch(/export function buildSlashCommand/);
  });

  it("should properly mark optional vs required arguments", () => {
    const commands: CommandDefinition[] = [
      {
        name: "/mixed",
        description: "Mixed args",
        arguments: [
          { name: "required1", required: true },
          { name: "optional1", required: false },
          { name: "required2", required: true },
          { name: "optional2", required: false },
        ],
      },
    ];

    const code = generateSlashCommandTypesCode(commands);

    // Required args should NOT have ? (properties are quoted)
    expect(code).toContain('"required1": string');
    expect(code).toContain('"required2": string');

    // Optional args should have ?
    expect(code).toContain('"optional1"?: string');
    expect(code).toContain('"optional2"?: string');
  });
});
