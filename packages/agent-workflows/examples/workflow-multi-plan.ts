import { Workflow, FileStorage, generateWorkflowId } from "../src";
import fs from "fs/promises";
import path from "path";
import { unwrap } from "../src/utils/result";
/**
 * Example: Multi-step workflow - Part 1 (Planning)
 *
 * This example demonstrates:
 * - Creating a new workflow and tracking the current git branch
 * - Generating a placeholder spec file
 * - Committing the spec to version control
 * - Saving workflow state with branch information for later retrieval
 *
 * Usage:
 *   ts-node examples/workflow-multi-plan.ts
 *
 * After running this script:
 * 1. Note the workflow ID output
 * 2. Use it with workflow-multi-review.ts to continue the workflow
 */

async function main() {
  // Generate unique workflow ID
  const workflowId = generateWorkflowId();
  console.log(`\n=� Starting multi-step workflow: ${workflowId}\n`);

  const timestamp = Date.now();
  const branchName = `workflow-${workflowId.split("-")[0]}-${timestamp}`;

  // Create workflow with FileStorage
  const workflow = new Workflow({
    storage: new FileStorage({ workflowId }),
  });

  unwrap(
    await workflow.ensureBranch(branchName, {
      commitMessage: `WIP: Auto-save before creating workflow ${workflowId}`,
    })
  );

  // Save branch name to workflow state
  await workflow.setState({
    branchName: branchName,
    status: "running",
  });

  // Step 2: Create a placeholder spec file
  unwrap(
    await workflow.executeStep("create-spec", {
    fn: async () => {
      console.log("  [Creating] Generating placeholder spec file...");

      const timestamp = Date.now();
      const specFileName = `spec-${timestamp}.md`;
      const specPath = path.join(process.cwd(), specFileName);

      const specContent = `# Feature Specification

**Workflow ID**: ${workflowId}
**Created**: ${new Date().toISOString()}
**Branch**: ${branchName}

## Overview
This is a placeholder specification file generated as part of a multi-step workflow demonstration.

## Requirements
- Requirement 1: Random placeholder content
- Requirement 2: Demonstrate workflow state persistence
- Requirement 3: Show branch tracking capabilities

## Implementation Notes
This spec will be committed to version control and reviewed in a subsequent workflow step.

---
*Generated by workflow-multi-plan.ts*
`;

      await fs.writeFile(specPath, specContent, "utf-8");
      console.log(`  [Created] Spec file: ${specFileName}`);

      return {
        specFileName,
        specPath,
        timestamp,
      };
    },
    })
  );

  // Mark workflow as ready for review
  await workflow.setState({ status: "completed" });

  // Output workflow summary
  console.log("\n( Planning phase completed!");
  console.log(`\n=� Workflow Summary:`);
  console.log(`  - Workflow ID: ${workflowId}`);
  console.log(`  - Branch: ${branchName}`);
  console.log(
    `  - State saved to: .agent/workflows/logs/${workflowId}/state.json`
  );

  console.log(`\n=� Next step: Run the review script with this workflow ID:`);
  console.log(`   ts-node examples/workflow-multi-review.ts ${workflowId}\n`);
}

// Run the example
main().catch((error) => {
  console.error("L Workflow failed:", error);
  process.exit(1);
});
