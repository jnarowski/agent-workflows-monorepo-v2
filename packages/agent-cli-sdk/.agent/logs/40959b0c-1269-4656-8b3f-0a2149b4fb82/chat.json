[
  {
    "type": "file-history-snapshot",
    "messageId": "a518a0dd-0a8e-4707-ae43-0ae4d4268acb",
    "snapshot": {
      "messageId": "a518a0dd-0a8e-4707-ae43-0ae4d4268acb",
      "trackedFileBackups": {},
      "timestamp": "2025-10-20T01:58:11.711Z"
    },
    "isSnapshotUpdate": false
  },
  {
    "parentUuid": null,
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": "Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to."
    },
    "isMeta": true,
    "uuid": "48a29ba4-b79a-4199-a1e5-c820ead9574e",
    "timestamp": "2025-10-20T01:58:11.710Z"
  },
  {
    "parentUuid": "48a29ba4-b79a-4199-a1e5-c820ead9574e",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": "<command-name>/clear</command-name>\n            <command-message>clear</command-message>\n            <command-args></command-args>"
    },
    "uuid": "a518a0dd-0a8e-4707-ae43-0ae4d4268acb",
    "timestamp": "2025-10-20T01:58:11.694Z"
  },
  {
    "parentUuid": "a518a0dd-0a8e-4707-ae43-0ae4d4268acb",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": "<local-command-stdout></local-command-stdout>"
    },
    "uuid": "074db0a9-ed5f-4b43-8ed3-d6b53a128edd",
    "timestamp": "2025-10-20T01:58:11.710Z"
  },
  {
    "type": "file-history-snapshot",
    "messageId": "eb735a19-d9cc-4509-b96c-3b30e4fe9977",
    "snapshot": {
      "messageId": "eb735a19-d9cc-4509-b96c-3b30e4fe9977",
      "trackedFileBackups": {},
      "timestamp": "2025-10-20T01:58:29.288Z"
    },
    "isSnapshotUpdate": false
  },
  {
    "parentUuid": "074db0a9-ed5f-4b43-8ed3-d6b53a128edd",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": "'/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/examples/advanced/dynamic-scoping-session.ts' it's duplicating text'/Users/jnarowski/Desktop/Screenshots/Screenshot 2025-10-19 at 7.57.48\u202fPM.png'\\\n\\\nwhen doing the q&a"
    },
    "uuid": "eb735a19-d9cc-4509-b96c-3b30e4fe9977",
    "timestamp": "2025-10-20T01:58:29.242Z",
    "thinkingMetadata": {
      "level": "high",
      "disabled": false,
      "triggers": []
    }
  },
  {
    "parentUuid": "eb735a19-d9cc-4509-b96c-3b30e4fe9977",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01SJkBdMxJzNMzdmVAQaJYZF",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "thinking",
          "thinking": "The user is reporting that the file `/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/examples/advanced/dynamic-scoping-session.ts` is duplicating text. They also mention a screenshot at `/Users/jnarowski/Desktop/Screenshots/Screenshot 2025-10-19 at 7.57.48 PM.png` and mention \"when doing the q&a\".\n\nI'm in plan mode, so I should:\n1. Read the file they mentioned to see what's there\n2. Read the screenshot to understand what the duplication looks like\n3. Understand what \"q&a\" refers to\n4. Present a plan to fix the issue\n\nLet me start by reading both the file and the screenshot to understand the problem.",
          "signature": "EqwGCkYICBgCKkB+DGQkabQPof1pXjLQlkCKZdNUT8hF+fWaczsnyskyW1HFqUETvcKtxjPhL5uDUQYiLhwOX5OEUL3MhmV3HHMgEgzSDMFmUBJ6n6pbhe4aDHlzB+1v19dKxI76GiIwh4VFGVU+8E0ckV733uXq87EQS7LtawZVf/gB1hBcyAHhxdsn1lsQcQo1lKkATAdxKpMFF3v8Rl1lzUi5hHRBxs/6kPuBLLUTl3QnNlHYu3LZq05uozds0m7oFbSdQiKx+WJjZvG/f93KvzvYEIhgmppbvYtcvCNHCPzYK8aTl+Fq7XFEwbXQhezOJVPebRnDqyDzrfLlcKY19LLgh4ljYSR1XTGS9sgEkonyf8woHdzrV3vMi4+xyJKL0mnIsiMAg1FzhVXejXLXGHd/XuKEGeV5Vj+vnRVRer9mS3gG1vyCymEzQ11Wq6mfkXsvtHX6uUXrqj7hzn3K87CiYkeEgY8F51+v3jKhPQ3PW3Iv+bNJ0LTxaTdhfRcC86bX7qqM5RE+81ukZqvVTKinLHkdwJMg7l41Tp0Z2y9lhMopxBWou9MOs4RwpauTqDxB32WULhS+8frz0ShUZyLpeNZ+541lXh4tAVWMNWwYoMbERfUOlMEJFWlHYxhcEXxI4KAkpo8ZjI6fFkTGilcS56SZ+3WZusxMw2kntQjEdpumnfQwGpNMF1APIA/57/Fdq1F7LySrPBigZcD+P7sD5S6iDaJrhN6ud0x09VckuznIQQ8L4jncDdHLpTWWLRu/GLgyuSCVNJni5+xaZpuDfSdkbolSzFhrI74ad7t1WjFEj5nV4Q6Imn90RRWjppsLSoFV/hbfm+uqI2OQ5uDD96UqxQo9JxVn/TJrXGh3ameBbpmrbydf3TDAZocdGhyk7eUwQ0SJ63458rwib1zxVfYVCTJ1nrNvgQpYDIdlFG+T4H1d/IGVi0mbNO+nSkRLxWNDQjx+loLF9W/7zNmUw1J8i6xMPNsjjtaOZkxkBvlVg0kh+J8+LpgA7H8OkNzThoHznuys+uT8ClyRiSxfLj+0ZP/k8ZofIH9UkiCIhrcL68au6e/QssIYAQ=="
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 10,
        "cache_creation_input_tokens": 3648,
        "cache_read_input_tokens": 16686,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 3648,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 5,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHd3NstiTsEem19ugq2C",
    "type": "assistant",
    "uuid": "df3a4977-605a-479e-b339-61b0394c6ce6",
    "timestamp": "2025-10-20T01:58:35.017Z"
  },
  {
    "parentUuid": "df3a4977-605a-479e-b339-61b0394c6ce6",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01SJkBdMxJzNMzdmVAQaJYZF",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "text",
          "text": "I'll investigate the text duplication issue in the dynamic-scoping-session.ts file and check the screenshot to understand the problem."
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 10,
        "cache_creation_input_tokens": 3648,
        "cache_read_input_tokens": 16686,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 3648,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 5,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHd3NstiTsEem19ugq2C",
    "type": "assistant",
    "uuid": "332feafd-b6e7-4328-8ddc-9ce197cbce28",
    "timestamp": "2025-10-20T01:58:35.713Z"
  },
  {
    "parentUuid": "332feafd-b6e7-4328-8ddc-9ce197cbce28",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01SJkBdMxJzNMzdmVAQaJYZF",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_01WQM2Xc2kbAATdVpB1PKiEZ",
          "name": "Read",
          "input": {
            "file_path": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/examples/advanced/dynamic-scoping-session.ts"
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 10,
        "cache_creation_input_tokens": 3648,
        "cache_read_input_tokens": 16686,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 3648,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 5,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHd3NstiTsEem19ugq2C",
    "type": "assistant",
    "uuid": "af6f6444-b252-4a39-8cf3-b42ba2600ce3",
    "timestamp": "2025-10-20T01:58:36.258Z"
  },
  {
    "parentUuid": "af6f6444-b252-4a39-8cf3-b42ba2600ce3",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01SJkBdMxJzNMzdmVAQaJYZF",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_01ML5sk4XGNvfG7vnd9Ts59j",
          "name": "Read",
          "input": {
            "file_path": "/Users/jnarowski/Desktop/Screenshots/Screenshot 2025-10-19 at 7.57.48 PM.png"
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 10,
        "cache_creation_input_tokens": 3648,
        "cache_read_input_tokens": 16686,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 3648,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 5,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHd3NstiTsEem19ugq2C",
    "type": "assistant",
    "uuid": "a27d9a4f-ef93-4139-8652-b02e47d260b4",
    "timestamp": "2025-10-20T01:58:36.605Z"
  },
  {
    "parentUuid": "a27d9a4f-ef93-4139-8652-b02e47d260b4",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_01WQM2Xc2kbAATdVpB1PKiEZ",
          "type": "tool_result",
          "content": "     1\u2192/**\n     2\u2192 * Simple chat session example\n     3\u2192 *\n     4\u2192 * Demonstrates:\n     5\u2192 * - Session-based conversation with context\n     6\u2192 * - Simple chat loop\n     7\u2192 * - User can continue chatting until typing \"done\"\n     8\u2192 */\n     9\u2192\n    10\u2192import { createInterface } from 'node:readline';\n    11\u2192import { AgentClient, createClaudeAdapter } from '../../src/index.js';\n    12\u2192\n    13\u2192/**\n    14\u2192 * Create a readline interface for user input\n    15\u2192 */\n    16\u2192function createReadline() {\n    17\u2192  return createInterface({\n    18\u2192    input: process.stdin,\n    19\u2192    output: process.stdout,\n    20\u2192  });\n    21\u2192}\n    22\u2192\n    23\u2192/**\n    24\u2192 * Prompt user for input\n    25\u2192 */\n    26\u2192function promptUser(rl: ReturnType<typeof createReadline>, question: string): Promise<string> {\n    27\u2192  return new Promise((resolve) => {\n    28\u2192    rl.question(question, (answer) => {\n    29\u2192      resolve(answer);\n    30\u2192    });\n    31\u2192  });\n    32\u2192}\n    33\u2192\n    34\u2192/**\n    35\u2192 * Parse and display only the text content from Claude's output\n    36\u2192 * Now using the enhanced OutputData which provides pre-extracted text\n    37\u2192 */\n    38\u2192function createTextOnlyOutput() {\n    39\u2192  return (data: import('../../src/types/index.js').OutputData) => {\n    40\u2192    // Use the pre-extracted text if available\n    41\u2192    if (data.text) {\n    42\u2192      process.stdout.write(data.text);\n    43\u2192      return;\n    44\u2192    }\n    45\u2192\n    46\u2192    // Fallback: parse events manually\n    47\u2192    if (data.events) {\n    48\u2192      for (const event of data.events) {\n    49\u2192        const parsed = event as any;\n    50\u2192        if (parsed.type === 'assistant' && parsed.message?.content) {\n    51\u2192          for (const content of parsed.message.content) {\n    52\u2192            if (content.type === 'text' && content.text) {\n    53\u2192              process.stdout.write(content.text);\n    54\u2192            }\n    55\u2192          }\n    56\u2192        } else if (parsed.type === 'error') {\n    57\u2192          process.stdout.write(`\\n\u274c Error: ${parsed.error}\\n`);\n    58\u2192        }\n    59\u2192      }\n    60\u2192    }\n    61\u2192  };\n    62\u2192}\n    63\u2192\n    64\u2192/**\n    65\u2192 * Main chat session\n    66\u2192 */\n    67\u2192async function main() {\n    68\u2192  // Check if running in interactive mode (has TTY)\n    69\u2192  const isInteractive = process.stdin.isTTY;\n    70\u2192\n    71\u2192  if (!isInteractive) {\n    72\u2192    console.log('\u26a0\ufe0f  This example requires an interactive terminal (TTY).');\n    73\u2192    console.log('Run it directly in your terminal, not via npm/pnpm scripts.\\n');\n    74\u2192    console.log('Examples:');\n    75\u2192    console.log('  tsx examples/advanced/dynamic-scoping-session.ts');\n    76\u2192    console.log('  bun examples/advanced/dynamic-scoping-session.ts\\n');\n    77\u2192    process.exit(1);\n    78\u2192  }\n    79\u2192\n    80\u2192  const client = new AgentClient({\n    81\u2192    adapter: createClaudeAdapter(),\n    82\u2192  });\n    83\u2192\n    84\u2192  const rl = createReadline();\n    85\u2192\n    86\u2192  console.log('\ud83d\udcac Simple Chat Session');\n    87\u2192  console.log('======================\\n');\n    88\u2192  console.log('Chat with Claude about your project.');\n    89\u2192  console.log('Type \"done\" when you want to end the conversation.\\n');\n    90\u2192\n    91\u2192  try {\n    92\u2192    // Get initial project description from user\n    93\u2192    const projectDescription = await promptUser(rl, '\ud83d\udca1 Describe your project idea (or press Enter for example): ');\n    94\u2192\n    95\u2192    // Use default if user doesn't provide input\n    96\u2192    const initialPrompt = projectDescription.trim() || 'I want to build a Next.js ecommerce app';\n    97\u2192\n    98\u2192    console.log(`\\n\ud83d\udccb Starting chat about: \"${initialPrompt}\"\\n`);\n    99\u2192    console.log('\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n');\n   100\u2192\n   101\u2192    // Create session with text-only output\n   102\u2192    const session = client.createSession({\n   103\u2192      onOutput: createTextOnlyOutput(),\n   104\u2192    });\n   105\u2192\n   106\u2192    // Send initial prompt\n   107\u2192    console.log('\ud83e\udd16 ');\n   108\u2192    await session.send(initialPrompt);\n   109\u2192    console.log('\\n');\n   110\u2192\n   111\u2192    // Simple chat loop\n   112\u2192    while (true) {\n   113\u2192      // Prompt user for next message\n   114\u2192      const userMessage = await promptUser(rl, '\ud83d\udcad You (or \"done\" to finish): ');\n   115\u2192\n   116\u2192      // Check if user wants to end the session\n   117\u2192      const trimmed = userMessage.trim().toLowerCase();\n   118\u2192      if (trimmed === 'done' || trimmed === 'finished' || trimmed === 'exit') {\n   119\u2192        console.log('\\n\u2705 Chat session complete!\\n');\n   120\u2192        break;\n   121\u2192      }\n   122\u2192\n   123\u2192      if (!userMessage.trim()) {\n   124\u2192        console.log('\u26a0\ufe0f  Please type a message or \"done\" to finish.\\n');\n   125\u2192        continue;\n   126\u2192      }\n   127\u2192\n   128\u2192      // Send user's message to the session\n   129\u2192      console.log('\\n\ud83e\udd16 ');\n   130\u2192      await session.send(userMessage);\n   131\u2192      console.log('\\n');\n   132\u2192    }\n   133\u2192\n   134\u2192    // Display session stats\n   135\u2192    console.log('\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501');\n   136\u2192    console.log('SESSION SUMMARY');\n   137\u2192    console.log('\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n');\n   138\u2192    console.log(`Session ID: ${session.sessionId}`);\n   139\u2192    console.log(`Total messages: ${session.messageCount}`);\n   140\u2192    console.log('\\n\u2728 Thanks for chatting!\\n');\n   141\u2192  } catch (error) {\n   142\u2192    console.error('\\n\u274c Error:', error instanceof Error ? error.message : error);\n   143\u2192  } finally {\n   144\u2192    rl.close();\n   145\u2192  }\n   146\u2192}\n   147\u2192\n   148\u2192// Handle cleanup on exit\n   149\u2192process.on('SIGINT', () => {\n   150\u2192  console.log('\\n\\n\ud83d\udc4b Interrupted. Cleaning up...');\n   151\u2192  process.exit(0);\n   152\u2192});\n   153\u2192\n   154\u2192main().catch(console.error);\n   155\u2192\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"
        }
      ]
    },
    "uuid": "656444df-87b2-4fe6-b241-74959864540d",
    "timestamp": "2025-10-20T01:58:36.753Z",
    "toolUseResult": {
      "type": "text",
      "file": {
        "filePath": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/examples/advanced/dynamic-scoping-session.ts",
        "content": "/**\n * Simple chat session example\n *\n * Demonstrates:\n * - Session-based conversation with context\n * - Simple chat loop\n * - User can continue chatting until typing \"done\"\n */\n\nimport { createInterface } from 'node:readline';\nimport { AgentClient, createClaudeAdapter } from '../../src/index.js';\n\n/**\n * Create a readline interface for user input\n */\nfunction createReadline() {\n  return createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n}\n\n/**\n * Prompt user for input\n */\nfunction promptUser(rl: ReturnType<typeof createReadline>, question: string): Promise<string> {\n  return new Promise((resolve) => {\n    rl.question(question, (answer) => {\n      resolve(answer);\n    });\n  });\n}\n\n/**\n * Parse and display only the text content from Claude's output\n * Now using the enhanced OutputData which provides pre-extracted text\n */\nfunction createTextOnlyOutput() {\n  return (data: import('../../src/types/index.js').OutputData) => {\n    // Use the pre-extracted text if available\n    if (data.text) {\n      process.stdout.write(data.text);\n      return;\n    }\n\n    // Fallback: parse events manually\n    if (data.events) {\n      for (const event of data.events) {\n        const parsed = event as any;\n        if (parsed.type === 'assistant' && parsed.message?.content) {\n          for (const content of parsed.message.content) {\n            if (content.type === 'text' && content.text) {\n              process.stdout.write(content.text);\n            }\n          }\n        } else if (parsed.type === 'error') {\n          process.stdout.write(`\\n\u274c Error: ${parsed.error}\\n`);\n        }\n      }\n    }\n  };\n}\n\n/**\n * Main chat session\n */\nasync function main() {\n  // Check if running in interactive mode (has TTY)\n  const isInteractive = process.stdin.isTTY;\n\n  if (!isInteractive) {\n    console.log('\u26a0\ufe0f  This example requires an interactive terminal (TTY).');\n    console.log('Run it directly in your terminal, not via npm/pnpm scripts.\\n');\n    console.log('Examples:');\n    console.log('  tsx examples/advanced/dynamic-scoping-session.ts');\n    console.log('  bun examples/advanced/dynamic-scoping-session.ts\\n');\n    process.exit(1);\n  }\n\n  const client = new AgentClient({\n    adapter: createClaudeAdapter(),\n  });\n\n  const rl = createReadline();\n\n  console.log('\ud83d\udcac Simple Chat Session');\n  console.log('======================\\n');\n  console.log('Chat with Claude about your project.');\n  console.log('Type \"done\" when you want to end the conversation.\\n');\n\n  try {\n    // Get initial project description from user\n    const projectDescription = await promptUser(rl, '\ud83d\udca1 Describe your project idea (or press Enter for example): ');\n\n    // Use default if user doesn't provide input\n    const initialPrompt = projectDescription.trim() || 'I want to build a Next.js ecommerce app';\n\n    console.log(`\\n\ud83d\udccb Starting chat about: \"${initialPrompt}\"\\n`);\n    console.log('\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n');\n\n    // Create session with text-only output\n    const session = client.createSession({\n      onOutput: createTextOnlyOutput(),\n    });\n\n    // Send initial prompt\n    console.log('\ud83e\udd16 ');\n    await session.send(initialPrompt);\n    console.log('\\n');\n\n    // Simple chat loop\n    while (true) {\n      // Prompt user for next message\n      const userMessage = await promptUser(rl, '\ud83d\udcad You (or \"done\" to finish): ');\n\n      // Check if user wants to end the session\n      const trimmed = userMessage.trim().toLowerCase();\n      if (trimmed === 'done' || trimmed === 'finished' || trimmed === 'exit') {\n        console.log('\\n\u2705 Chat session complete!\\n');\n        break;\n      }\n\n      if (!userMessage.trim()) {\n        console.log('\u26a0\ufe0f  Please type a message or \"done\" to finish.\\n');\n        continue;\n      }\n\n      // Send user's message to the session\n      console.log('\\n\ud83e\udd16 ');\n      await session.send(userMessage);\n      console.log('\\n');\n    }\n\n    // Display session stats\n    console.log('\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501');\n    console.log('SESSION SUMMARY');\n    console.log('\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n');\n    console.log(`Session ID: ${session.sessionId}`);\n    console.log(`Total messages: ${session.messageCount}`);\n    console.log('\\n\u2728 Thanks for chatting!\\n');\n  } catch (error) {\n    console.error('\\n\u274c Error:', error instanceof Error ? error.message : error);\n  } finally {\n    rl.close();\n  }\n}\n\n// Handle cleanup on exit\nprocess.on('SIGINT', () => {\n  console.log('\\n\\n\ud83d\udc4b Interrupted. Cleaning up...');\n  process.exit(0);\n});\n\nmain().catch(console.error);\n",
        "numLines": 155,
        "startLine": 1,
        "totalLines": 155
      }
    }
  },
  {
    "parentUuid": "656444df-87b2-4fe6-b241-74959864540d",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_01ML5sk4XGNvfG7vnd9Ts59j",
          "type": "tool_result",
          "content": [
            {
              "type": "image",
              "source": {
                "type": "base64",
                "data": "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AAIgAAIgAAIgAAIgAAIgAAKZiwAEB5mrPVEbEAABEAABEAABEAABEAABEAABEEgoAQgOEooTiYEACIAACIAACIAACIAACIAACIBA5iIAwUHmak/UBgRAAARAAARAAARAAARAAARAAAQSSgCCg4TiRGIgAAIgAAIgAAIgAAIgAAIgAAIgkLkIQHCQudoTtQEBEAABEAABEAABEAABEAABEACBhBKA4CChOJEYCIAACIAACIAACIAACIAACIAACGQuAhAcZK72RG1AAARAAARAAARAAARAAARAAARAIKEEIDhIKE4kBgIgAAIgAAIgAAIgAAIgAAIgAAKZiwAEB5mrPVEbEAABEAABEAABEAABEAABEAABEEgoAQgOEooTiYEACIAACIAACIAACIAACIAACIBA5iIAwUHmak/UBgRAAARAAARAAARAAARAAARAAAQSSgCCg4TiRGIgAAIgAAIgAAIgAAIgAAIgAAIgkLkIQHCQudoTtQEBEAABEAABEAABEAABEAABEACBhBKA4CChOJEYCIAACIAACIAACIAACIAACIAACGQuAhAcZK72RG1AAARAAARAAARAAARAAARAAARAIKEEIDhIKE4kBgIgAAIgAAIgAAIgAAIgAAIgAAKZiwAEB5mrPVEbEAABEAABEAABEAABEAABEAABEEgoAQgOEooTiYEACIAACIAACIAACIAACIAACIBA5iIAwUHmak/UBgRAAARAAARAAARAAARAAARAAAQSSgCCg4TiRGIgAAIgAAIgAAIgAAIgAAIgAAIgkLkIQHCQudoTtQEBEAABEAABEAABEAABEAABEACBhBKA4CChOJEYCIAACIAACIAACIAACIAACIAACGQuAhAcZK72RG1AAARAAARAAARAAARAAATlYBzpAABAAElEQVRAAARAIKEEIDhIKE4kBgIgAAIgAAIgAAIgAAIgAAIgAAKZiwAEB5mrPVEbEAABEAABEAABEAABEAABEAABEEgoAQgOEooTiYEACIAACIAACIAACIAACIAACIBA5iIAwUHmak/UBgRAAARAAARAAARAAARAAARAAAQSSgCCg4TiRGIgAAIgAAIgAAIgAAIgAAIgAAIgkLkIQHCQudoTtQEBEAABEAABEAABEAABEAABEACBhBKA4CChOL0l9sTjTVTA02jZ8pW0+cuvvEVCKBAAARAAARAAARAAARAAARAAARA4CQRSVnAwoF8PKlSwYFxkY8dPyVCD8wL589OYUUN0uRcuWkIvvPRK3DpcUKqUDvPN9u1xwyIACIAACIAACIAACIAACIAACIAACCSSQMoKDqZOGkNnnpkzLovxE6fRJ6vXxA2XrAB+BQfFihaloYP76OK9Pv8teuW1N5JVVOQDAiAAAiAAAiAAAiAAAiAAAiAAApSygoMHG95PhQunrTjIlSsXlS1zgW7O33//g77estVp2udfnEd79+5z7jOCpXvXDroYvOJg7br1MYsEwUFMPPAEARAAARAAARAAARAAARAAARBIZwIpKzgwuZxfogQN7N9DO23+8msaPHSk6Z3SdggOUrr5UHgQAAEQAAEQAAEQAAEQAAEQSHkCp6zgoFTJ86le3Tu0noTcuXPRH0eO0I8//kSrV39GS5evSGjDlitbhipVvDwszY9WfUo7du4Mc69S+VoqV7a0dj/77LPo/66sqO27du2mLVu3hYRfsHAJHThwIMRNbh5u9IBY6dChn+iNBQude1hAAARAAARAAARAAARAAARAAARAwAuBU1Jw0LxpY7q+yrVR+Wza/BUNGTYqqr9fj2j5RVOOOLB/Tzq/RHFP2UyZNos++HBVWNjixc+jwQN6Oe5Hjx6jJs1bOfewgAAIgAAIgAAIgAAIgAAIgAAIgIAXAqec4ODKSldQ29aPazZ///037du3X83676Jcuc6k84oVpfz586lTGBK73aFG9apUo0Y1nWf27Nmo6LlFtD2a4OCuurXpkkvK6zA5cmR3hAg//XSYvt8furrgmWdfirhqAYIDjQ8/IAACIAACIAACIAACIAACIAACAQmccoKDli2a0TVXX6mxzZz1LC1f8V4IQt7CULBAAVq95rMQ90TdJOtUBQgOEtViSAcEQAAEQAAEQAAEQAAEQAAETm0Cp5zgoE+vrlSmdCnd6h0791Iz+PuT2gMgOEgqbmQGAiAAAiAAAiAAAiAAAiAAAiAQkMApJzho1uRhqnr9dRobK0N86eXXIuoICMg1avRkCQ64AHzahJgjSvljsoUkkjeuIAACIAACIAACIAACIAACIAACqUvglBMc5M2Th0aPHEJZspwR0mq//PqrPlFh1tPPhbgn+iaZgoNElx3pgQAIgAAIgAAIgAAIgAAIgAAInHoETjnBATfxOYULU8snmlIJ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",
                "media_type": "image/png"
              }
            }
          ]
        }
      ]
    },
    "uuid": "b29d7cab-1149-40ea-9d99-9dee308b95a1",
    "timestamp": "2025-10-20T01:58:38.870Z",
    "toolUseResult": {
      "type": "image",
      "file": {
        "base64": "",
        "type": "image/png",
        "originalSize": 115835
      }
    }
  },
  {
    "parentUuid": "b29d7cab-1149-40ea-9d99-9dee308b95a1",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01VragaYuZYc9wymxLzWMJQ7",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "thinking",
          "thinking": "Looking at the screenshot, I can see the issue clearly. The text is being duplicated:\n\n1. First output:\n```\nPerfect! Let me start with the first question:\n\n**What's the purpose of this ecommerce app?**\n\nIs it:\n- A learning/portfolio project?\n- A real business you're launching?\n- Something that might use AI features later?\n- Related to the AI agent tooling in this repo?\n- Something else?\n```\n\n2. Then it repeats again:\n```\nPerfect! Let me start with the first question:\n\n**What's the purpose of this ecommerce app?**\n\nIs it:\n- A learning/portfolio project?\n- A real business you're launching?\n- Something that might use AI features later?\n- Related to the AI agent tooling in this repo?\n- Something else?\n```\n\nThe same content appears twice in the output.\n\nLooking at the code in `dynamic-scoping-session.ts`, I can see the `createTextOnlyOutput()` function at lines 38-62. This function handles the output data.\n\nThe issue is likely in how the function processes the output. Let me analyze it:\n\n```typescript\nfunction createTextOnlyOutput() {\n  return (data: import('../../src/types/index.js').OutputData) => {\n    // Use the pre-extracted text if available\n    if (data.text) {\n      process.stdout.write(data.text);\n      return;\n    }\n\n    // Fallback: parse events manually\n    if (data.events) {\n      for (const event of data.events) {\n        const parsed = event as any;\n        if (parsed.type === 'assistant' && parsed.message?.content) {\n          for (const content of parsed.message.content) {\n            if (content.type === 'text' && content.text) {\n              process.stdout.write(content.text);\n            }\n          }\n        } else if (parsed.type === 'error') {\n          process.stdout.write(`\\n\u274c Error: ${parsed.error}\\n`);\n        }\n      }\n    }\n  };\n}\n```\n\nI notice the function writes error messages when an error event is detected. The core problem appears to be redundant data sources - both `data.text` and `data.events` contain identical content, causing the duplication.\n\nThe function's logic suggests it's attempting to handle different output scenarios, but inadvertently creates a scenario where the same text gets written multiple times. This happens because it doesn't prevent re-writing content that's already been processed.\n\nI'll investigate potential causes systematically:\n1. SDK might trigger multiple callback invocations\n2. Internal event handling could generate duplicate entries\n3. Potential buffering mechanism creating repeated outputs\n4. Underlying streaming mechanism duplicating data transmission\n\nThe key is understanding how `onOutput` interacts with the data stream and identifying where the redundancy originates. Examining the SDK's implementation will provide clearer insights into these potential duplication mechanisms.\n\nI'll develop a strategic approach to diagnose and resolve the repetition, focusing on precise tracking and filtering of output events.",
          "signature": "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"
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 10,
        "cache_creation_input_tokens": 3407,
        "cache_read_input_tokens": 20334,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 3407,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHd45nXFzuq29HAQGj3i",
    "type": "assistant",
    "uuid": "f5282cbe-5d0f-4f92-abb1-560572ddf3e8",
    "timestamp": "2025-10-20T01:59:03.168Z"
  },
  {
    "parentUuid": "f5282cbe-5d0f-4f92-abb1-560572ddf3e8",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01VragaYuZYc9wymxLzWMJQ7",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "text",
          "text": "I can see the issue! Looking at the screenshot, the output is being duplicated - the same text appears twice:\n\n```\nPerfect! Let me start with the first question:\n\n**What's the purpose of this ecommerce app?**\n...\n```\n\nappears twice in a row.\n\nLet me investigate the SDK implementation to understand how the OutputData is being sent and why it might be duplicating."
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 10,
        "cache_creation_input_tokens": 3407,
        "cache_read_input_tokens": 20334,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 3407,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHd45nXFzuq29HAQGj3i",
    "type": "assistant",
    "uuid": "f08be43c-9f8a-4d9c-aab8-bb189a78be13",
    "timestamp": "2025-10-20T01:59:03.186Z"
  },
  {
    "parentUuid": "f08be43c-9f8a-4d9c-aab8-bb189a78be13",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01VragaYuZYc9wymxLzWMJQ7",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_01XtUzRp3eMW4yGbkYNq9sKj",
          "name": "Read",
          "input": {
            "file_path": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/types/index.ts"
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 10,
        "cache_creation_input_tokens": 3407,
        "cache_read_input_tokens": 20334,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 3407,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHd45nXFzuq29HAQGj3i",
    "type": "assistant",
    "uuid": "65b0211e-eeb1-44f2-9eb2-c8044c53cad4",
    "timestamp": "2025-10-20T01:59:04.785Z"
  },
  {
    "parentUuid": "65b0211e-eeb1-44f2-9eb2-c8044c53cad4",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01VragaYuZYc9wymxLzWMJQ7",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_01R4QHPafceXtvb3BSaYERtu",
          "name": "Grep",
          "input": {
            "pattern": "onOutput",
            "path": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src",
            "output_mode": "files_with_matches"
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 10,
        "cache_creation_input_tokens": 3407,
        "cache_read_input_tokens": 20334,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 3407,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHd45nXFzuq29HAQGj3i",
    "type": "assistant",
    "uuid": "6612292d-75f0-4e89-96bc-68f57dd81388",
    "timestamp": "2025-10-20T01:59:05.890Z"
  },
  {
    "parentUuid": "6612292d-75f0-4e89-96bc-68f57dd81388",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_01XtUzRp3eMW4yGbkYNq9sKj",
          "type": "tool_result",
          "content": "     1\u2192/**\n     2\u2192 * Type exports for agent-cli-sdk\n     3\u2192 */\n     4\u2192\n     5\u2192// Core interfaces\n     6\u2192export type {\n     7\u2192  StreamEvent,\n     8\u2192  OutputData,\n     9\u2192  TokenUsage,\n    10\u2192  ModelUsage,\n    11\u2192  ActionLog,\n    12\u2192  ValidationResult,\n    13\u2192  AdapterCapabilities,\n    14\u2192  ExecutionResponse,\n    15\u2192  ExecutionOptions,\n    16\u2192  AIAdapter,\n    17\u2192} from './interfaces';\n    18\u2192\n    19\u2192// Configuration types\n    20\u2192export type {\n    21\u2192  AgentClientOptions,\n    22\u2192  AgentClientConfig,\n    23\u2192  ExecuteOptions,\n    24\u2192  SessionInfo,\n    25\u2192  SessionOptions,\n    26\u2192  SendOptions,\n    27\u2192} from './config';\n    28\u2192\n    29\u2192// Claude-specific types\n    30\u2192export type {\n    31\u2192  ImageInput,\n    32\u2192  ClaudeConfig,\n    33\u2192  ClaudeExecutionOptions,\n    34\u2192  MCPServer,\n    35\u2192  CLIDetectionResult,\n    36\u2192} from './claude';\n    37\u2192\n    38\u2192// Codex-specific types\n    39\u2192export type { CodexConfig, CodexExecutionOptions } from './codex';\n    40\u2192\n    41\u2192// Session types\n    42\u2192export type { SessionEventType, SessionEventData, AdapterSession } from './session';\n    43\u2192\n    44\u2192// Logging types\n    45\u2192export type { ExecutionLog, LogPaths } from './logging';\n    46\u2192\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"
        }
      ]
    },
    "uuid": "5f742e7c-b72d-483c-b5c8-4adc29f60e2a",
    "timestamp": "2025-10-20T01:59:05.996Z",
    "toolUseResult": {
      "type": "text",
      "file": {
        "filePath": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/types/index.ts",
        "content": "/**\n * Type exports for agent-cli-sdk\n */\n\n// Core interfaces\nexport type {\n  StreamEvent,\n  OutputData,\n  TokenUsage,\n  ModelUsage,\n  ActionLog,\n  ValidationResult,\n  AdapterCapabilities,\n  ExecutionResponse,\n  ExecutionOptions,\n  AIAdapter,\n} from './interfaces';\n\n// Configuration types\nexport type {\n  AgentClientOptions,\n  AgentClientConfig,\n  ExecuteOptions,\n  SessionInfo,\n  SessionOptions,\n  SendOptions,\n} from './config';\n\n// Claude-specific types\nexport type {\n  ImageInput,\n  ClaudeConfig,\n  ClaudeExecutionOptions,\n  MCPServer,\n  CLIDetectionResult,\n} from './claude';\n\n// Codex-specific types\nexport type { CodexConfig, CodexExecutionOptions } from './codex';\n\n// Session types\nexport type { SessionEventType, SessionEventData, AdapterSession } from './session';\n\n// Logging types\nexport type { ExecutionLog, LogPaths } from './logging';\n",
        "numLines": 46,
        "startLine": 1,
        "totalLines": 46
      }
    }
  },
  {
    "parentUuid": "5f742e7c-b72d-483c-b5c8-4adc29f60e2a",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_01R4QHPafceXtvb3BSaYERtu",
          "type": "tool_result",
          "content": "Found 6 files\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/session.ts\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/codex/cli-wrapper.ts\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/types/config.ts\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/types/interfaces.ts\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/client/agent-client.ts"
        }
      ]
    },
    "uuid": "d7bda370-5740-4c45-a380-19c505617c4f",
    "timestamp": "2025-10-20T01:59:06.044Z",
    "toolUseResult": {
      "mode": "files_with_matches",
      "filenames": [
        "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/session.ts",
        "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/codex/cli-wrapper.ts",
        "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts",
        "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/types/config.ts",
        "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/types/interfaces.ts",
        "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/client/agent-client.ts"
      ],
      "numFiles": 6
    }
  },
  {
    "parentUuid": "d7bda370-5740-4c45-a380-19c505617c4f",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01RVN9pG4zN4AdLitW5yZ4QJ",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "thinking",
          "thinking": "Let me check the interfaces to understand OutputData structure, and then check the session implementation to see how onOutput is being called.",
          "signature": "ErgCCkYICBgCKkAoY41QNxZx8Vx85Xdp3RGwN/g8k1Jidtgoj+fjrM7HHrK90M9H7NzyBKPvdtvUV9il/IhnaDnUuPffeSz9wGFnEgwZz5CPEWLvaiEMarEaDLrOkjJ8QzAdlTw7PiIwyKlmGBEtArOg1LUiAB4wrxf7hd7wk8MKNgAKsXX1fWKnlIylY6R5Cwumf7+SzP36Kp8Biy/GT1kmptG4qP/HO1gsJNMerad5rdk6IMzd2VKGqnDsx20EizfRSsstLT9glqdkBgx36J+Why4WN4iIiEXT3KXoxqacXt1PgT2gsfGjwsV15BaM17EeNa2jtLItv2pz7KZSZDrXRDZBtp0jGaJTDRT//sQtQXimuUlhWLxfRBgPAlow2u3RGT8e059yy4JBFS/DTSk/tZf9+TJzqhg2GAE="
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 14,
        "cache_creation_input_tokens": 2189,
        "cache_read_input_tokens": 23741,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 2189,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHd65fPLnjuy9DTF9uD3",
    "type": "assistant",
    "uuid": "a7e9c952-1705-4858-b937-8e3fd3dcf6aa",
    "timestamp": "2025-10-20T01:59:09.678Z"
  },
  {
    "parentUuid": "a7e9c952-1705-4858-b937-8e3fd3dcf6aa",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01RVN9pG4zN4AdLitW5yZ4QJ",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_01Jx3MnhyoguWbUPgniH436J",
          "name": "Read",
          "input": {
            "file_path": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/types/interfaces.ts"
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 14,
        "cache_creation_input_tokens": 2189,
        "cache_read_input_tokens": 23741,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 2189,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHd65fPLnjuy9DTF9uD3",
    "type": "assistant",
    "uuid": "a99f548e-a960-4f2c-ae03-ed7028054ca3",
    "timestamp": "2025-10-20T01:59:10.038Z"
  },
  {
    "parentUuid": "a99f548e-a960-4f2c-ae03-ed7028054ca3",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01RVN9pG4zN4AdLitW5yZ4QJ",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_01SXLt2bSphweh81whif2Lr6",
          "name": "Read",
          "input": {
            "file_path": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/session.ts"
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 14,
        "cache_creation_input_tokens": 2189,
        "cache_read_input_tokens": 23741,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 2189,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHd65fPLnjuy9DTF9uD3",
    "type": "assistant",
    "uuid": "1ca12ba5-bb6e-4b42-a1ae-7e12359ae4cd",
    "timestamp": "2025-10-20T01:59:10.337Z"
  },
  {
    "parentUuid": "1ca12ba5-bb6e-4b42-a1ae-7e12359ae4cd",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_01Jx3MnhyoguWbUPgniH436J",
          "type": "tool_result",
          "content": "     1\u2192/**\n     2\u2192 * Core interfaces for the agent-cli-sdk\n     3\u2192 */\n     4\u2192\n     5\u2192/**\n     6\u2192 * Stream event emitted during CLI execution\n     7\u2192 */\n     8\u2192export interface StreamEvent {\n     9\u2192  type: string;\n    10\u2192  timestamp?: number;\n    11\u2192  data?: Record<string, unknown>;\n    12\u2192}\n    13\u2192\n    14\u2192/**\n    15\u2192 * Enhanced output data provided to onOutput callback\n    16\u2192 */\n    17\u2192export interface OutputData {\n    18\u2192  /** Raw stdout chunk */\n    19\u2192  raw: string;\n    20\u2192  /** Parsed JSONL events from this chunk */\n    21\u2192  events?: StreamEvent[];\n    22\u2192  /** Text content extracted from events */\n    23\u2192  text?: string;\n    24\u2192  /** All text accumulated so far in this execution */\n    25\u2192  accumulated: string;\n    26\u2192}\n    27\u2192\n    28\u2192/**\n    29\u2192 * Token usage information\n    30\u2192 */\n    31\u2192export interface TokenUsage {\n    32\u2192  inputTokens: number;\n    33\u2192  outputTokens: number;\n    34\u2192  totalTokens: number;\n    35\u2192}\n    36\u2192\n    37\u2192/**\n    38\u2192 * Model-specific usage information\n    39\u2192 */\n    40\u2192export interface ModelUsage extends TokenUsage {\n    41\u2192  model: string;\n    42\u2192  costUSD?: number;\n    43\u2192}\n    44\u2192\n    45\u2192/**\n    46\u2192 * Action log entry\n    47\u2192 */\n    48\u2192export interface ActionLog {\n    49\u2192  type: string;\n    50\u2192  timestamp: number;\n    51\u2192  description?: string;\n    52\u2192  metadata?: Record<string, unknown>;\n    53\u2192}\n    54\u2192\n    55\u2192/**\n    56\u2192 * Validation result\n    57\u2192 */\n    58\u2192export interface ValidationResult {\n    59\u2192  success: boolean;\n    60\u2192  errors?: string[];\n    61\u2192}\n    62\u2192\n    63\u2192/**\n    64\u2192 * Adapter capabilities\n    65\u2192 */\n    66\u2192export interface AdapterCapabilities {\n    67\u2192  streaming: boolean;\n    68\u2192  sessionManagement: boolean;\n    69\u2192  toolCalling: boolean;\n    70\u2192  multiModal: boolean;\n    71\u2192}\n    72\u2192\n    73\u2192/**\n    74\u2192 * Standard execution response\n    75\u2192 * @template T Output type (string or structured data)\n    76\u2192 */\n    77\u2192export interface ExecutionResponse<T = string> {\n    78\u2192  output: T;\n    79\u2192  sessionId: string;\n    80\u2192  status: 'success' | 'error' | 'timeout';\n    81\u2192  exitCode: number;\n    82\u2192  duration: number;\n    83\u2192\n    84\u2192  // Optional metadata\n    85\u2192  actions?: ActionLog[];\n    86\u2192  metadata: {\n    87\u2192    model?: string;\n    88\u2192    tokensUsed?: number;\n    89\u2192    toolsUsed?: string[];\n    90\u2192    filesModified?: string[];\n    91\u2192    validation?: ValidationResult;\n    92\u2192  };\n    93\u2192\n    94\u2192  // Token usage details\n    95\u2192  usage?: TokenUsage;\n    96\u2192  modelUsage?: Record<string, ModelUsage>;\n    97\u2192  totalCostUSD?: number;\n    98\u2192\n    99\u2192  // Raw CLI output\n   100\u2192  raw?: {\n   101\u2192    stdout: string;\n   102\u2192    stderr: string;\n   103\u2192    events?: StreamEvent[];\n   104\u2192  };\n   105\u2192\n   106\u2192  // Error details (if status is 'error')\n   107\u2192  error?: {\n   108\u2192    code: string;\n   109\u2192    message: string;\n   110\u2192    details?: Record<string, unknown>;\n   111\u2192  };\n   112\u2192}\n   113\u2192\n   114\u2192/**\n   115\u2192 * Common execution options\n   116\u2192 */\n   117\u2192export interface ExecutionOptions {\n   118\u2192  streaming?: boolean;\n   119\u2192  onStream?: (event: StreamEvent) => void;\n   120\u2192  onEvent?: (event: StreamEvent) => void;\n   121\u2192  onOutput?: (data: OutputData) => void;\n   122\u2192  sessionId?: string;\n   123\u2192  timeout?: number;\n   124\u2192  verbose?: boolean;\n   125\u2192  logPath?: string;\n   126\u2192  responseSchema?: true | { safeParse: (data: unknown) => { success: boolean; data?: unknown; error?: { message: string } } };\n   127\u2192  workingDir?: string;\n   128\u2192\n   129\u2192  // Allow adapter-specific options\n   130\u2192  [key: string]: unknown;\n   131\u2192}\n   132\u2192\n   133\u2192/**\n   134\u2192 * Core interface that all adapters must implement\n   135\u2192 */\n   136\u2192export interface AIAdapter {\n   137\u2192  /**\n   138\u2192   * Execute a prompt\n   139\u2192   * @template T The expected output type (inferred from responseSchema)\n   140\u2192   */\n   141\u2192  execute<T = string>(\n   142\u2192    prompt: string,\n   143\u2192    options?: ExecutionOptions\n   144\u2192  ): Promise<ExecutionResponse<T>>;\n   145\u2192\n   146\u2192  /**\n   147\u2192   * Get adapter capabilities\n   148\u2192   */\n   149\u2192  getCapabilities(): AdapterCapabilities;\n   150\u2192\n   151\u2192  /**\n   152\u2192   * Create a multi-turn session (optional - not all adapters support this)\n   153\u2192   */\n   154\u2192  createSession?(options?: unknown): unknown;\n   155\u2192}\n   156\u2192\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"
        }
      ]
    },
    "uuid": "a0796aaa-135c-42c3-aeda-1a51a477e153",
    "timestamp": "2025-10-20T01:59:10.474Z",
    "toolUseResult": {
      "type": "text",
      "file": {
        "filePath": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/types/interfaces.ts",
        "content": "/**\n * Core interfaces for the agent-cli-sdk\n */\n\n/**\n * Stream event emitted during CLI execution\n */\nexport interface StreamEvent {\n  type: string;\n  timestamp?: number;\n  data?: Record<string, unknown>;\n}\n\n/**\n * Enhanced output data provided to onOutput callback\n */\nexport interface OutputData {\n  /** Raw stdout chunk */\n  raw: string;\n  /** Parsed JSONL events from this chunk */\n  events?: StreamEvent[];\n  /** Text content extracted from events */\n  text?: string;\n  /** All text accumulated so far in this execution */\n  accumulated: string;\n}\n\n/**\n * Token usage information\n */\nexport interface TokenUsage {\n  inputTokens: number;\n  outputTokens: number;\n  totalTokens: number;\n}\n\n/**\n * Model-specific usage information\n */\nexport interface ModelUsage extends TokenUsage {\n  model: string;\n  costUSD?: number;\n}\n\n/**\n * Action log entry\n */\nexport interface ActionLog {\n  type: string;\n  timestamp: number;\n  description?: string;\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Validation result\n */\nexport interface ValidationResult {\n  success: boolean;\n  errors?: string[];\n}\n\n/**\n * Adapter capabilities\n */\nexport interface AdapterCapabilities {\n  streaming: boolean;\n  sessionManagement: boolean;\n  toolCalling: boolean;\n  multiModal: boolean;\n}\n\n/**\n * Standard execution response\n * @template T Output type (string or structured data)\n */\nexport interface ExecutionResponse<T = string> {\n  output: T;\n  sessionId: string;\n  status: 'success' | 'error' | 'timeout';\n  exitCode: number;\n  duration: number;\n\n  // Optional metadata\n  actions?: ActionLog[];\n  metadata: {\n    model?: string;\n    tokensUsed?: number;\n    toolsUsed?: string[];\n    filesModified?: string[];\n    validation?: ValidationResult;\n  };\n\n  // Token usage details\n  usage?: TokenUsage;\n  modelUsage?: Record<string, ModelUsage>;\n  totalCostUSD?: number;\n\n  // Raw CLI output\n  raw?: {\n    stdout: string;\n    stderr: string;\n    events?: StreamEvent[];\n  };\n\n  // Error details (if status is 'error')\n  error?: {\n    code: string;\n    message: string;\n    details?: Record<string, unknown>;\n  };\n}\n\n/**\n * Common execution options\n */\nexport interface ExecutionOptions {\n  streaming?: boolean;\n  onStream?: (event: StreamEvent) => void;\n  onEvent?: (event: StreamEvent) => void;\n  onOutput?: (data: OutputData) => void;\n  sessionId?: string;\n  timeout?: number;\n  verbose?: boolean;\n  logPath?: string;\n  responseSchema?: true | { safeParse: (data: unknown) => { success: boolean; data?: unknown; error?: { message: string } } };\n  workingDir?: string;\n\n  // Allow adapter-specific options\n  [key: string]: unknown;\n}\n\n/**\n * Core interface that all adapters must implement\n */\nexport interface AIAdapter {\n  /**\n   * Execute a prompt\n   * @template T The expected output type (inferred from responseSchema)\n   */\n  execute<T = string>(\n    prompt: string,\n    options?: ExecutionOptions\n  ): Promise<ExecutionResponse<T>>;\n\n  /**\n   * Get adapter capabilities\n   */\n  getCapabilities(): AdapterCapabilities;\n\n  /**\n   * Create a multi-turn session (optional - not all adapters support this)\n   */\n  createSession?(options?: unknown): unknown;\n}\n",
        "numLines": 156,
        "startLine": 1,
        "totalLines": 156
      }
    }
  },
  {
    "parentUuid": "a0796aaa-135c-42c3-aeda-1a51a477e153",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_01SXLt2bSphweh81whif2Lr6",
          "type": "tool_result",
          "content": "     1\u2192/**\n     2\u2192 * Claude multi-turn session implementation\n     3\u2192 */\n     4\u2192\n     5\u2192import { EventEmitter } from 'node:events';\n     6\u2192import type { ExecutionResponse, SessionOptions, SendOptions, ClaudeExecutionOptions } from '../../types/index.js';\n     7\u2192import type { ClaudeAdapter } from './index';\n     8\u2192import { createSessionMessageLogPath } from '../../utils/index.js';\n     9\u2192\n    10\u2192/**\n    11\u2192 * Claude session for multi-turn conversations\n    12\u2192 */\n    13\u2192export class ClaudeSession extends EventEmitter {\n    14\u2192  private adapter: ClaudeAdapter;\n    15\u2192  private options: SessionOptions;\n    16\u2192  private _sessionId?: string;\n    17\u2192  private _messageCount = 0;\n    18\u2192  private _aborted = false;\n    19\u2192  readonly startedAt: number;\n    20\u2192  lastMessageAt?: number;\n    21\u2192\n    22\u2192  constructor(adapter: ClaudeAdapter, options: SessionOptions = {}) {\n    23\u2192    super();\n    24\u2192    this.adapter = adapter;\n    25\u2192    this.options = options;\n    26\u2192    this.startedAt = Date.now();\n    27\u2192\n    28\u2192    // Pre-set session ID if provided\n    29\u2192    if (options.sessionId) {\n    30\u2192      this._sessionId = options.sessionId;\n    31\u2192    }\n    32\u2192  }\n    33\u2192\n    34\u2192  /**\n    35\u2192   * Send a message in this session\n    36\u2192   */\n    37\u2192  async send<T = string>(message: string, options: SendOptions = {}): Promise<ExecutionResponse<T>> {\n    38\u2192    if (this._aborted) {\n    39\u2192      throw new Error('Cannot send message: session has been aborted');\n    40\u2192    }\n    41\u2192\n    42\u2192    // Increment message count\n    43\u2192    this._messageCount++;\n    44\u2192\n    45\u2192    // Merge session options with message options\n    46\u2192    const mergedOptions: ClaudeExecutionOptions = {\n    47\u2192      ...this.options,\n    48\u2192      ...options,\n    49\u2192    };\n    50\u2192\n    51\u2192    // Session management:\n    52\u2192    // - First message: pass sessionId to create with that ID (if pre-set), otherwise let CLI generate\n    53\u2192    // - Subsequent messages: pass sessionId + resume to continue\n    54\u2192    if (this._messageCount > 1 && this._sessionId) {\n    55\u2192      mergedOptions.sessionId = this._sessionId;\n    56\u2192      mergedOptions.resume = true;\n    57\u2192    } else if (this._sessionId) {\n    58\u2192      // First message with pre-set sessionId\n    59\u2192      mergedOptions.sessionId = this._sessionId;\n    60\u2192    }\n    61\u2192\n    62\u2192    // Create message-specific log path if session logging is enabled\n    63\u2192    if (this.options.logPath && !options.logPath) {\n    64\u2192      mergedOptions.logPath = createSessionMessageLogPath(this.options.logPath, this._messageCount);\n    65\u2192    }\n    66\u2192\n    67\u2192    // Set up callbacks\n    68\u2192    if (this.options.onOutput || this.options.onEvent) {\n    69\u2192      mergedOptions.onOutput = (data: import('../../types/index.js').OutputData) => {\n    70\u2192        this.emit('output', data);\n    71\u2192        this.options.onOutput?.(data);\n    72\u2192      };\n    73\u2192\n    74\u2192      mergedOptions.onEvent = (event: import('../../types/index.js').StreamEvent) => {\n    75\u2192        this.emit('event', event);\n    76\u2192        this.options.onEvent?.(event);\n    77\u2192      };\n    78\u2192    }\n    79\u2192\n    80\u2192    try {\n    81\u2192      // Execute via adapter\n    82\u2192      const result = await this.adapter.execute<T>(message, mergedOptions);\n    83\u2192\n    84\u2192      // Capture session ID from first message\n    85\u2192      if (!this._sessionId && result.sessionId) {\n    86\u2192        this._sessionId = result.sessionId;\n    87\u2192      }\n    88\u2192\n    89\u2192      // Update last message time\n    90\u2192      this.lastMessageAt = Date.now();\n    91\u2192\n    92\u2192      // Emit complete event\n    93\u2192      this.emit('complete', result);\n    94\u2192\n    95\u2192      return result;\n    96\u2192    } catch (error) {\n    97\u2192      this.emit('error', error);\n    98\u2192      throw error;\n    99\u2192    }\n   100\u2192  }\n   101\u2192\n   102\u2192  /**\n   103\u2192   * Abort the session - prevents new messages from being sent\n   104\u2192   *\n   105\u2192   * IMPORTANT: Due to the spawn-per-message model, this does NOT terminate\n   106\u2192   * in-flight executions. It only prevents new calls to send() from succeeding.\n   107\u2192   * Any ongoing execution will complete normally.\n   108\u2192   *\n   109\u2192   * To check if a session is aborted, use isAborted()\n   110\u2192   */\n   111\u2192  abort(): void {\n   112\u2192    this._aborted = true;\n   113\u2192    this.emit('aborted');\n   114\u2192    // Note: We can't abort ongoing execution in spawn-per-message model\n   115\u2192    // This just prevents new messages from being sent\n   116\u2192  }\n   117\u2192\n   118\u2192  /**\n   119\u2192   * Get session ID (undefined until first message completes)\n   120\u2192   */\n   121\u2192  getSessionId(): string | undefined {\n   122\u2192    return this._sessionId;\n   123\u2192  }\n   124\u2192\n   125\u2192  /**\n   126\u2192   * Get message count\n   127\u2192   */\n   128\u2192  getMessageCount(): number {\n   129\u2192    return this._messageCount;\n   130\u2192  }\n   131\u2192\n   132\u2192  /**\n   133\u2192   * Check if session is aborted\n   134\u2192   */\n   135\u2192  isAborted(): boolean {\n   136\u2192    return this._aborted;\n   137\u2192  }\n   138\u2192\n   139\u2192  /**\n   140\u2192   * Getter for session ID\n   141\u2192   */\n   142\u2192  get sessionId(): string | undefined {\n   143\u2192    return this._sessionId;\n   144\u2192  }\n   145\u2192\n   146\u2192  /**\n   147\u2192   * Getter for message count\n   148\u2192   */\n   149\u2192  get messageCount(): number {\n   150\u2192    return this._messageCount;\n   151\u2192  }\n   152\u2192}\n   153\u2192\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"
        }
      ]
    },
    "uuid": "38820540-13fe-4d3f-81b2-2da2a7ded900",
    "timestamp": "2025-10-20T01:59:10.492Z",
    "toolUseResult": {
      "type": "text",
      "file": {
        "filePath": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/session.ts",
        "content": "/**\n * Claude multi-turn session implementation\n */\n\nimport { EventEmitter } from 'node:events';\nimport type { ExecutionResponse, SessionOptions, SendOptions, ClaudeExecutionOptions } from '../../types/index.js';\nimport type { ClaudeAdapter } from './index';\nimport { createSessionMessageLogPath } from '../../utils/index.js';\n\n/**\n * Claude session for multi-turn conversations\n */\nexport class ClaudeSession extends EventEmitter {\n  private adapter: ClaudeAdapter;\n  private options: SessionOptions;\n  private _sessionId?: string;\n  private _messageCount = 0;\n  private _aborted = false;\n  readonly startedAt: number;\n  lastMessageAt?: number;\n\n  constructor(adapter: ClaudeAdapter, options: SessionOptions = {}) {\n    super();\n    this.adapter = adapter;\n    this.options = options;\n    this.startedAt = Date.now();\n\n    // Pre-set session ID if provided\n    if (options.sessionId) {\n      this._sessionId = options.sessionId;\n    }\n  }\n\n  /**\n   * Send a message in this session\n   */\n  async send<T = string>(message: string, options: SendOptions = {}): Promise<ExecutionResponse<T>> {\n    if (this._aborted) {\n      throw new Error('Cannot send message: session has been aborted');\n    }\n\n    // Increment message count\n    this._messageCount++;\n\n    // Merge session options with message options\n    const mergedOptions: ClaudeExecutionOptions = {\n      ...this.options,\n      ...options,\n    };\n\n    // Session management:\n    // - First message: pass sessionId to create with that ID (if pre-set), otherwise let CLI generate\n    // - Subsequent messages: pass sessionId + resume to continue\n    if (this._messageCount > 1 && this._sessionId) {\n      mergedOptions.sessionId = this._sessionId;\n      mergedOptions.resume = true;\n    } else if (this._sessionId) {\n      // First message with pre-set sessionId\n      mergedOptions.sessionId = this._sessionId;\n    }\n\n    // Create message-specific log path if session logging is enabled\n    if (this.options.logPath && !options.logPath) {\n      mergedOptions.logPath = createSessionMessageLogPath(this.options.logPath, this._messageCount);\n    }\n\n    // Set up callbacks\n    if (this.options.onOutput || this.options.onEvent) {\n      mergedOptions.onOutput = (data: import('../../types/index.js').OutputData) => {\n        this.emit('output', data);\n        this.options.onOutput?.(data);\n      };\n\n      mergedOptions.onEvent = (event: import('../../types/index.js').StreamEvent) => {\n        this.emit('event', event);\n        this.options.onEvent?.(event);\n      };\n    }\n\n    try {\n      // Execute via adapter\n      const result = await this.adapter.execute<T>(message, mergedOptions);\n\n      // Capture session ID from first message\n      if (!this._sessionId && result.sessionId) {\n        this._sessionId = result.sessionId;\n      }\n\n      // Update last message time\n      this.lastMessageAt = Date.now();\n\n      // Emit complete event\n      this.emit('complete', result);\n\n      return result;\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Abort the session - prevents new messages from being sent\n   *\n   * IMPORTANT: Due to the spawn-per-message model, this does NOT terminate\n   * in-flight executions. It only prevents new calls to send() from succeeding.\n   * Any ongoing execution will complete normally.\n   *\n   * To check if a session is aborted, use isAborted()\n   */\n  abort(): void {\n    this._aborted = true;\n    this.emit('aborted');\n    // Note: We can't abort ongoing execution in spawn-per-message model\n    // This just prevents new messages from being sent\n  }\n\n  /**\n   * Get session ID (undefined until first message completes)\n   */\n  getSessionId(): string | undefined {\n    return this._sessionId;\n  }\n\n  /**\n   * Get message count\n   */\n  getMessageCount(): number {\n    return this._messageCount;\n  }\n\n  /**\n   * Check if session is aborted\n   */\n  isAborted(): boolean {\n    return this._aborted;\n  }\n\n  /**\n   * Getter for session ID\n   */\n  get sessionId(): string | undefined {\n    return this._sessionId;\n  }\n\n  /**\n   * Getter for message count\n   */\n  get messageCount(): number {\n    return this._messageCount;\n  }\n}\n",
        "numLines": 153,
        "startLine": 1,
        "totalLines": 153
      }
    }
  },
  {
    "parentUuid": "38820540-13fe-4d3f-81b2-2da2a7ded900",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_013MgqAJXJNdKz2jwDsFWZTY",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "thinking",
          "thinking": "Now let me check the cli-wrapper to see how it's calling onOutput:",
          "signature": "EuwBCkYICBgCKkB0TACnf87RZIXG0fEcaCjJumceYS0dyw4rre2BCxbGNqSXeUSNMTLUwWtstEq3/Q1lyocYOmVGgiMK55TwrbZkEgxkK+fAWdpMQ/gi/q4aDAo3yt2DW4fQ736vPSIwWzO95ezcHlZPM83+xZXdzXotphpxjqUNls/Yvp2fqJYbaa9mEt32/tEbJSIg8jxUKlQcoqBSDgUbjRa2dMlHXTdGIB0mbvuE52UZJW/QwyvgEOMAHpUAduBiqr6NlzwGcAUQ8zy+ZegMHVCq5ovIXnUAm6CgPP4O9K+tuX5KnIxaDVqFUzcYAQ=="
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 14,
        "cache_creation_input_tokens": 3763,
        "cache_read_input_tokens": 25930,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 3763,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHd6Qt2x2Xt3EM3wi8c9",
    "type": "assistant",
    "uuid": "6ee9714a-4502-4739-99eb-1d643725e96c",
    "timestamp": "2025-10-20T01:59:13.782Z"
  },
  {
    "parentUuid": "6ee9714a-4502-4739-99eb-1d643725e96c",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_013MgqAJXJNdKz2jwDsFWZTY",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_015wpNj38hjBU2gZfBSHt8MP",
          "name": "Read",
          "input": {
            "file_path": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts"
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 14,
        "cache_creation_input_tokens": 3763,
        "cache_read_input_tokens": 25930,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 3763,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHd6Qt2x2Xt3EM3wi8c9",
    "type": "assistant",
    "uuid": "2afe030f-73b7-4f32-a3fd-21a4d14b47dc",
    "timestamp": "2025-10-20T01:59:15.249Z"
  },
  {
    "parentUuid": "2afe030f-73b7-4f32-a3fd-21a4d14b47dc",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_015wpNj38hjBU2gZfBSHt8MP",
          "type": "tool_result",
          "content": "     1\u2192/**\n     2\u2192 * Claude CLI wrapper for process execution\n     3\u2192 */\n     4\u2192\n     5\u2192import type { ClaudeExecutionOptions } from '../../types';\n     6\u2192import type { SpawnResult } from '../../utils';\n     7\u2192import { spawnProcess } from '../../utils';\n     8\u2192\n     9\u2192/**\n    10\u2192 * Build Claude CLI arguments from options\n    11\u2192 */\n    12\u2192export function buildClaudeArgs(\n    13\u2192  prompt: string,\n    14\u2192  options: ClaudeExecutionOptions\n    15\u2192): string[] {\n    16\u2192  const args: string[] = [];\n    17\u2192\n    18\u2192  // Programmatic mode (non-interactive)\n    19\u2192  args.push('-p');\n    20\u2192\n    21\u2192  // Model selection\n    22\u2192  if (options.model) {\n    23\u2192    args.push('--model', options.model);\n    24\u2192  }\n    25\u2192\n    26\u2192  // Session management (sessionId, continue, and resume are mutually exclusive)\n    27\u2192  if (options.sessionId && options.resume) {\n    28\u2192    // Resume an existing session with specific ID\n    29\u2192    args.push('--resume', options.sessionId);\n    30\u2192  } else if (options.sessionId) {\n    31\u2192    // Create new session with specific ID\n    32\u2192    args.push('--session-id', options.sessionId);\n    33\u2192  } else if (options.continue) {\n    34\u2192    args.push('--continue');\n    35\u2192  }\n    36\u2192\n    37\u2192  // Permission mode\n    38\u2192  if (options.permissionMode) {\n    39\u2192    args.push('--permission-mode', options.permissionMode);\n    40\u2192  } else if (options.dangerouslySkipPermissions) {\n    41\u2192    args.push('--permission-mode', 'acceptEdits');\n    42\u2192  }\n    43\u2192\n    44\u2192  // Output format (stream-json requires --verbose)\n    45\u2192  const useStreamJson = options.streaming !== false;\n    46\u2192  if (useStreamJson) {\n    47\u2192    args.push('--output-format', 'stream-json');\n    48\u2192    args.push('--verbose'); // Required for stream-json\n    49\u2192  } else if (options.verbose) {\n    50\u2192    args.push('--verbose');\n    51\u2192  }\n    52\u2192\n    53\u2192  // Tool settings\n    54\u2192  if (options.toolSettings?.allowedTools) {\n    55\u2192    args.push('--allowed-tools', options.toolSettings.allowedTools.join(','));\n    56\u2192  }\n    57\u2192  if (options.toolSettings?.disallowedTools) {\n    58\u2192    args.push(\n    59\u2192      '--disallowed-tools',\n    60\u2192      options.toolSettings.disallowedTools.join(',')\n    61\u2192    );\n    62\u2192  }\n    63\u2192\n    64\u2192  // Images\n    65\u2192  if (options.images && options.images.length > 0) {\n    66\u2192    for (const image of options.images) {\n    67\u2192      args.push('-i', image.path);\n    68\u2192    }\n    69\u2192  }\n    70\u2192\n    71\u2192  // Prompt (must be last)\n    72\u2192  args.push(prompt);\n    73\u2192\n    74\u2192  return args;\n    75\u2192}\n    76\u2192\n    77\u2192/**\n    78\u2192 * Execute Claude CLI\n    79\u2192 */\n    80\u2192export async function executeClaudeCLI(\n    81\u2192  cliPath: string,\n    82\u2192  prompt: string,\n    83\u2192  options: ClaudeExecutionOptions\n    84\u2192): Promise<SpawnResult> {\n    85\u2192  const args = buildClaudeArgs(prompt, options);\n    86\u2192\n    87\u2192  // Set up environment\n    88\u2192  let env: Record<string, string> | undefined;\n    89\u2192\n    90\u2192  if (options.apiKey || options.oauthToken) {\n    91\u2192    const envVars: Record<string, string> = {};\n    92\u2192    if (typeof options.apiKey === 'string') {\n    93\u2192      envVars['ANTHROPIC_API_KEY'] = options.apiKey;\n    94\u2192    }\n    95\u2192    if (typeof options.oauthToken === 'string') {\n    96\u2192      envVars['CLAUDE_CODE_OAUTH_TOKEN'] = options.oauthToken;\n    97\u2192    }\n    98\u2192    env = envVars;\n    99\u2192  }\n   100\u2192\n   101\u2192  // Set up JSONL parsing and OutputData creation\n   102\u2192  let lineBuffer = '';\n   103\u2192  let onStdout: ((chunk: string) => void) | undefined;\n   104\u2192  let turnStarted = false;\n   105\u2192  let accumulatedText = ''; // Track all text accumulated so far\n   106\u2192\n   107\u2192  if (options.onEvent || options.onOutput) {\n   108\u2192    onStdout = (chunk: string) => {\n   109\u2192      // Parse JSONL events from this chunk\n   110\u2192      const chunkEvents: import('../../types').StreamEvent[] = [];\n   111\u2192      let chunkText = '';\n   112\u2192\n   113\u2192      lineBuffer += chunk;\n   114\u2192      const lines = lineBuffer.split('\\n');\n   115\u2192      lineBuffer = lines.pop() || '';\n   116\u2192\n   117\u2192      for (const line of lines) {\n   118\u2192        const trimmed = line.trim();\n   119\u2192        if (!trimmed) continue;\n   120\u2192\n   121\u2192        try {\n   122\u2192          const event = JSON.parse(trimmed);\n   123\u2192          chunkEvents.push(event);\n   124\u2192\n   125\u2192          // Extract text from assistant messages\n   126\u2192          if (event.type === 'assistant' && event.message?.content) {\n   127\u2192            const content = event.message.content;\n   128\u2192            if (Array.isArray(content)) {\n   129\u2192              for (const block of content) {\n   130\u2192                if (block.type === 'text' && block.text) {\n   131\u2192                  chunkText += block.text;\n   132\u2192                }\n   133\u2192              }\n   134\u2192            }\n   135\u2192          }\n   136\u2192\n   137\u2192          // Extract text from result events\n   138\u2192          if (event.type === 'result' && event.result && typeof event.result === 'string') {\n   139\u2192            chunkText += event.result;\n   140\u2192          }\n   141\u2192\n   142\u2192          // onEvent handling (if provided)\n   143\u2192          if (options.onEvent) {\n   144\u2192            // Emit synthetic turn.started event when we see the first assistant message\n   145\u2192            if (!turnStarted && event.type === 'assistant') {\n   146\u2192              turnStarted = true;\n   147\u2192              options.onEvent({\n   148\u2192                type: 'turn.started',\n   149\u2192                timestamp: event.timestamp || Date.now(),\n   150\u2192              });\n   151\u2192            }\n   152\u2192\n   153\u2192            // Emit the original event\n   154\u2192            options.onEvent(event);\n   155\u2192\n   156\u2192            // Also emit synthetic 'text' and tool events for assistant message content\n   157\u2192            // This provides backward compatibility with tests expecting these event types\n   158\u2192            if (event.type === 'assistant' && event.message?.content) {\n   159\u2192              const content = event.message.content;\n   160\u2192              if (Array.isArray(content)) {\n   161\u2192                for (const block of content) {\n   162\u2192                  // Emit text events\n   163\u2192                  if (block.type === 'text' && block.text) {\n   164\u2192                    options.onEvent({\n   165\u2192                      type: 'text',\n   166\u2192                      data: block.text,\n   167\u2192                      timestamp: event.timestamp || Date.now(),\n   168\u2192                    });\n   169\u2192                  }\n   170\u2192                  // Emit tool.started events for tool_use blocks\n   171\u2192                  if (block.type === 'tool_use' && block.name) {\n   172\u2192                    options.onEvent({\n   173\u2192                      type: 'tool.started',\n   174\u2192                      data: {\n   175\u2192                        toolName: block.name,\n   176\u2192                        name: block.name,\n   177\u2192                        id: block.id,\n   178\u2192                        input: block.input,\n   179\u2192                      },\n   180\u2192                      timestamp: event.timestamp || Date.now(),\n   181\u2192                    });\n   182\u2192                  }\n   183\u2192                }\n   184\u2192              }\n   185\u2192            }\n   186\u2192\n   187\u2192            // Emit tool.completed for user messages (which contain tool_result blocks)\n   188\u2192            if (event.type === 'user' && event.message?.content) {\n   189\u2192              const content = event.message.content;\n   190\u2192              if (Array.isArray(content)) {\n   191\u2192                for (const block of content) {\n   192\u2192                  if (block.type === 'tool_result' && block.tool_use_id) {\n   193\u2192                    options.onEvent({\n   194\u2192                      type: 'tool.completed',\n   195\u2192                      data: {\n   196\u2192                        toolId: block.tool_use_id,\n   197\u2192                        result: block.content,\n   198\u2192                        isError: block.is_error || false,\n   199\u2192                      },\n   200\u2192                      timestamp: event.timestamp || Date.now(),\n   201\u2192                    });\n   202\u2192                  }\n   203\u2192                }\n   204\u2192              }\n   205\u2192            }\n   206\u2192\n   207\u2192            // Emit synthetic turn.completed event when we see the result\n   208\u2192            if (event.type === 'result') {\n   209\u2192              options.onEvent({\n   210\u2192                type: 'turn.completed',\n   211\u2192                timestamp: event.timestamp || Date.now(),\n   212\u2192              });\n   213\u2192            }\n   214\u2192          }\n   215\u2192        } catch {\n   216\u2192          // Not valid JSON, skip line\n   217\u2192        }\n   218\u2192      }\n   219\u2192\n   220\u2192      // Update accumulated text\n   221\u2192      if (chunkText) {\n   222\u2192        accumulatedText += chunkText;\n   223\u2192      }\n   224\u2192\n   225\u2192      // Call onOutput with enhanced OutputData\n   226\u2192      if (options.onOutput) {\n   227\u2192        options.onOutput({\n   228\u2192          raw: chunk,\n   229\u2192          events: chunkEvents.length > 0 ? chunkEvents : undefined,\n   230\u2192          text: chunkText || undefined,\n   231\u2192          accumulated: accumulatedText,\n   232\u2192        });\n   233\u2192      }\n   234\u2192    };\n   235\u2192  }\n   236\u2192\n   237\u2192  return spawnProcess(cliPath, {\n   238\u2192    args,\n   239\u2192    cwd: options.workingDir,\n   240\u2192    env,\n   241\u2192    timeout: options.timeout,\n   242\u2192    onStdout,\n   243\u2192    onStderr: (chunk: string) => {\n   244\u2192      if (options.verbose) {\n   245\u2192        process.stderr.write(chunk);\n   246\u2192      }\n   247\u2192    },\n   248\u2192  });\n   249\u2192}\n   250\u2192\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"
        }
      ]
    },
    "uuid": "688df796-fbc9-4527-9a24-5fec3460bfa4",
    "timestamp": "2025-10-20T01:59:15.363Z",
    "toolUseResult": {
      "type": "text",
      "file": {
        "filePath": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts",
        "content": "/**\n * Claude CLI wrapper for process execution\n */\n\nimport type { ClaudeExecutionOptions } from '../../types';\nimport type { SpawnResult } from '../../utils';\nimport { spawnProcess } from '../../utils';\n\n/**\n * Build Claude CLI arguments from options\n */\nexport function buildClaudeArgs(\n  prompt: string,\n  options: ClaudeExecutionOptions\n): string[] {\n  const args: string[] = [];\n\n  // Programmatic mode (non-interactive)\n  args.push('-p');\n\n  // Model selection\n  if (options.model) {\n    args.push('--model', options.model);\n  }\n\n  // Session management (sessionId, continue, and resume are mutually exclusive)\n  if (options.sessionId && options.resume) {\n    // Resume an existing session with specific ID\n    args.push('--resume', options.sessionId);\n  } else if (options.sessionId) {\n    // Create new session with specific ID\n    args.push('--session-id', options.sessionId);\n  } else if (options.continue) {\n    args.push('--continue');\n  }\n\n  // Permission mode\n  if (options.permissionMode) {\n    args.push('--permission-mode', options.permissionMode);\n  } else if (options.dangerouslySkipPermissions) {\n    args.push('--permission-mode', 'acceptEdits');\n  }\n\n  // Output format (stream-json requires --verbose)\n  const useStreamJson = options.streaming !== false;\n  if (useStreamJson) {\n    args.push('--output-format', 'stream-json');\n    args.push('--verbose'); // Required for stream-json\n  } else if (options.verbose) {\n    args.push('--verbose');\n  }\n\n  // Tool settings\n  if (options.toolSettings?.allowedTools) {\n    args.push('--allowed-tools', options.toolSettings.allowedTools.join(','));\n  }\n  if (options.toolSettings?.disallowedTools) {\n    args.push(\n      '--disallowed-tools',\n      options.toolSettings.disallowedTools.join(',')\n    );\n  }\n\n  // Images\n  if (options.images && options.images.length > 0) {\n    for (const image of options.images) {\n      args.push('-i', image.path);\n    }\n  }\n\n  // Prompt (must be last)\n  args.push(prompt);\n\n  return args;\n}\n\n/**\n * Execute Claude CLI\n */\nexport async function executeClaudeCLI(\n  cliPath: string,\n  prompt: string,\n  options: ClaudeExecutionOptions\n): Promise<SpawnResult> {\n  const args = buildClaudeArgs(prompt, options);\n\n  // Set up environment\n  let env: Record<string, string> | undefined;\n\n  if (options.apiKey || options.oauthToken) {\n    const envVars: Record<string, string> = {};\n    if (typeof options.apiKey === 'string') {\n      envVars['ANTHROPIC_API_KEY'] = options.apiKey;\n    }\n    if (typeof options.oauthToken === 'string') {\n      envVars['CLAUDE_CODE_OAUTH_TOKEN'] = options.oauthToken;\n    }\n    env = envVars;\n  }\n\n  // Set up JSONL parsing and OutputData creation\n  let lineBuffer = '';\n  let onStdout: ((chunk: string) => void) | undefined;\n  let turnStarted = false;\n  let accumulatedText = ''; // Track all text accumulated so far\n\n  if (options.onEvent || options.onOutput) {\n    onStdout = (chunk: string) => {\n      // Parse JSONL events from this chunk\n      const chunkEvents: import('../../types').StreamEvent[] = [];\n      let chunkText = '';\n\n      lineBuffer += chunk;\n      const lines = lineBuffer.split('\\n');\n      lineBuffer = lines.pop() || '';\n\n      for (const line of lines) {\n        const trimmed = line.trim();\n        if (!trimmed) continue;\n\n        try {\n          const event = JSON.parse(trimmed);\n          chunkEvents.push(event);\n\n          // Extract text from assistant messages\n          if (event.type === 'assistant' && event.message?.content) {\n            const content = event.message.content;\n            if (Array.isArray(content)) {\n              for (const block of content) {\n                if (block.type === 'text' && block.text) {\n                  chunkText += block.text;\n                }\n              }\n            }\n          }\n\n          // Extract text from result events\n          if (event.type === 'result' && event.result && typeof event.result === 'string') {\n            chunkText += event.result;\n          }\n\n          // onEvent handling (if provided)\n          if (options.onEvent) {\n            // Emit synthetic turn.started event when we see the first assistant message\n            if (!turnStarted && event.type === 'assistant') {\n              turnStarted = true;\n              options.onEvent({\n                type: 'turn.started',\n                timestamp: event.timestamp || Date.now(),\n              });\n            }\n\n            // Emit the original event\n            options.onEvent(event);\n\n            // Also emit synthetic 'text' and tool events for assistant message content\n            // This provides backward compatibility with tests expecting these event types\n            if (event.type === 'assistant' && event.message?.content) {\n              const content = event.message.content;\n              if (Array.isArray(content)) {\n                for (const block of content) {\n                  // Emit text events\n                  if (block.type === 'text' && block.text) {\n                    options.onEvent({\n                      type: 'text',\n                      data: block.text,\n                      timestamp: event.timestamp || Date.now(),\n                    });\n                  }\n                  // Emit tool.started events for tool_use blocks\n                  if (block.type === 'tool_use' && block.name) {\n                    options.onEvent({\n                      type: 'tool.started',\n                      data: {\n                        toolName: block.name,\n                        name: block.name,\n                        id: block.id,\n                        input: block.input,\n                      },\n                      timestamp: event.timestamp || Date.now(),\n                    });\n                  }\n                }\n              }\n            }\n\n            // Emit tool.completed for user messages (which contain tool_result blocks)\n            if (event.type === 'user' && event.message?.content) {\n              const content = event.message.content;\n              if (Array.isArray(content)) {\n                for (const block of content) {\n                  if (block.type === 'tool_result' && block.tool_use_id) {\n                    options.onEvent({\n                      type: 'tool.completed',\n                      data: {\n                        toolId: block.tool_use_id,\n                        result: block.content,\n                        isError: block.is_error || false,\n                      },\n                      timestamp: event.timestamp || Date.now(),\n                    });\n                  }\n                }\n              }\n            }\n\n            // Emit synthetic turn.completed event when we see the result\n            if (event.type === 'result') {\n              options.onEvent({\n                type: 'turn.completed',\n                timestamp: event.timestamp || Date.now(),\n              });\n            }\n          }\n        } catch {\n          // Not valid JSON, skip line\n        }\n      }\n\n      // Update accumulated text\n      if (chunkText) {\n        accumulatedText += chunkText;\n      }\n\n      // Call onOutput with enhanced OutputData\n      if (options.onOutput) {\n        options.onOutput({\n          raw: chunk,\n          events: chunkEvents.length > 0 ? chunkEvents : undefined,\n          text: chunkText || undefined,\n          accumulated: accumulatedText,\n        });\n      }\n    };\n  }\n\n  return spawnProcess(cliPath, {\n    args,\n    cwd: options.workingDir,\n    env,\n    timeout: options.timeout,\n    onStdout,\n    onStderr: (chunk: string) => {\n      if (options.verbose) {\n        process.stderr.write(chunk);\n      }\n    },\n  });\n}\n",
        "numLines": 250,
        "startLine": 1,
        "totalLines": 250
      }
    }
  },
  {
    "parentUuid": "688df796-fbc9-4527-9a24-5fec3460bfa4",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01P6o3YY4PHinGBHkSxRzP95",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "thinking",
          "thinking": "Now I understand the issue! Let me trace through what's happening:\n\n1. In `cli-wrapper.ts` lines 108-234, there's an `onStdout` callback that processes JSONL chunks\n2. For each chunk, it:\n   - Parses JSONL events (lines 114-118)\n   - Extracts text from assistant messages (lines 126-135)\n   - Calls `options.onOutput` with the data (lines 226-233)\n\nThe problem is in the `onEvent` processing (lines 142-214). Look at lines 156-185 - when an `assistant` message event is received, it:\n- First calls `options.onEvent(event)` with the original event (line 154)\n- Then it loops through the content blocks again (lines 160-185) and emits synthetic events\n\nBut wait, the real issue is that the text extraction happens twice for assistant messages:\n\n1. **Lines 126-135**: Extract text from assistant messages and add to `chunkText`\n2. **Lines 158-169**: When processing `onEvent`, if it's an assistant message, it emits synthetic 'text' events for each text block\n\nBut this shouldn't cause duplication in the `onOutput` callback itself...\n\nLet me look more carefully. The `onOutput` is called at lines 226-233, and it's passed:\n- `raw`: the raw chunk\n- `events`: the parsed events from this chunk\n- `text`: the extracted text (chunkText) from this chunk\n- `accumulated`: all text accumulated so far\n\nSo if an assistant message appears in TWO separate chunks (or the same chunk is processed twice), you'd get the text duplicated.\n\nLooking at the screenshot more carefully - the exact same text appears twice. This suggests that either:\n1. The same JSONL line is appearing twice in the output\n2. The same chunk is being processed twice\n3. The assistant is sending the same message twice\n\nActually, let me reconsider. \n\nI'm investigating a potential text duplication issue. The repeated text in the screenshot raises several possibilities about message processing. It could stem from multiple sources: parsing logic, event handling, or how messages are extracted and stored. The key is to understand why identical text is appearing, which might involve examining the event processing mechanism in the CLI wrapper.\n\nThe repetition seems systematic, suggesting a deeper issue in how messages are captured and output. I'll need to trace the exact path of message extraction and verify if there are multiple points where the same text could be captured. The function handles text output strategically, first prioritizing pre-extracted text and then falling back to manual event parsing. It checks for a direct text property, writing it immediately if available. If no direct text exists, it iterates through events, specifically targeting assistant message content and extracting text components. Error events are also handled, writing error messages to stdout. The core logic aims to prevent duplicate text output by checking text availability and using a fallback mechanism for parsing different event types.\n\nThe potential issue centers on how the output callback might be invoked, potentially triggering multiple writes for the same textual content. The mechanism seems designed to be flexible, accommodating various data structures while attempting to minimize redundant text generation.\n\nThe synthetic event emission for backward compatibility suggests a complex event handling strategy, with special processing for assistant message content that could inadvertently trigger multiple text outputs.\n\nBy examining the event extraction logic, I notice two distinct text sources: assistant messages and result events. This dual extraction mechanism creates a potential pathway for text duplication, where identical content might be processed and emitted through different event channels.\n\nThe underlying issue appears to stem from the CLI's event processing approach, which extracts text from multiple event types without robust deduplication mechanisms. This design could lead to redundant text generation, especially when assistant messages and result events contain overlapping or identical content.\n\nA strategic resolution would involve implementing a more precise text extraction method that prevents redundant text processing, potentially by establishing a single authoritative text source or introducing a tracking system to identify and eliminate duplicate content.\n\nThe core issue stems from multiple text extraction points within the chunk processing workflow, where assistant messages and result events can both contribute identical text segments to `chunkText`. This dual-source approach inadvertently creates text duplication within the output data.\n\nBy modifying the extraction logic to prioritize assistant message text and explicitly prevent result event text from being re-added, we can effectively eliminate the unintended text repetition.",
          "signature": ""
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 12,
        "cache_creation_input_tokens": 3264,
        "cache_read_input_tokens": 29693,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 3264,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHd6mgBUw4HnaEmCJxhN",
    "type": "assistant",
    "uuid": "a98cceea-0eea-41e6-b668-3b5ce4728f7c",
    "timestamp": "2025-10-20T01:59:59.687Z"
  },
  {
    "parentUuid": "a98cceea-0eea-41e6-b668-3b5ce4728f7c",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01P6o3YY4PHinGBHkSxRzP95",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "text",
          "text": "Perfect! I found the issue. Let me trace through what's happening:"
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 12,
        "cache_creation_input_tokens": 3264,
        "cache_read_input_tokens": 29693,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 3264,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHd6mgBUw4HnaEmCJxhN",
    "type": "assistant",
    "uuid": "68d4177d-f494-43e7-8b4e-4cb666e7c339",
    "timestamp": "2025-10-20T01:59:59.692Z"
  },
  {
    "parentUuid": "68d4177d-f494-43e7-8b4e-4cb666e7c339",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01P6o3YY4PHinGBHkSxRzP95",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_019mZiDzNK31zyqb9mjZwTBA",
          "name": "Grep",
          "input": {
            "pattern": "type === 'result'",
            "path": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude",
            "output_mode": "content",
            "-n": true,
            "-B": 2,
            "-A": 5
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 12,
        "cache_creation_input_tokens": 3264,
        "cache_read_input_tokens": 29693,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 3264,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHd6mgBUw4HnaEmCJxhN",
    "type": "assistant",
    "uuid": "af325446-f267-496c-8ac9-2517f39dfd06",
    "timestamp": "2025-10-20T01:59:59.757Z"
  },
  {
    "parentUuid": "af325446-f267-496c-8ac9-2517f39dfd06",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_019mZiDzNK31zyqb9mjZwTBA",
          "type": "tool_result",
          "content": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-44-\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-45-    // Extract final result message (this is the key output from Claude CLI)\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts:46:    if (event.type === 'result' && ev.result) {\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-47-      finalOutput = typeof ev.result === 'string' ? ev.result : JSON.stringify(ev.result);\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-48-    }\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-49-\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-50-    // Extract message content from assistant messages\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-51-    if (event.type === 'assistant' && ev.message && typeof ev.message === 'object') {\n--\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-119-        }\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-120-      }\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts:121:    } else if (event.type === 'result' && ev.usage && typeof ev.usage === 'object') {\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-122-      const usage = ev.usage as Record<string, unknown>;\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-123-      const inputTokens = Number(usage.input_tokens) || 0;\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-124-      const outputTokens = Number(usage.output_tokens) || 0;\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-125-\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-126-      totalInputTokens += inputTokens;\n--\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-136-\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-137-          // Extract text from result events\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts:138:          if (event.type === 'result' && event.result && typeof event.result === 'string') {\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-139-            chunkText += event.result;\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-140-          }\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-141-\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-142-          // onEvent handling (if provided)\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-143-          if (options.onEvent) {\n--\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-206-\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-207-            // Emit synthetic turn.completed event when we see the result\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts:208:            if (event.type === 'result') {\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-209-              options.onEvent({\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-210-                type: 'turn.completed',\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-211-                timestamp: event.timestamp || Date.now(),\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-212-              });\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-213-            }"
        }
      ]
    },
    "uuid": "277eab7c-254f-4728-81c3-57949db4e9cb",
    "timestamp": "2025-10-20T01:59:59.879Z",
    "toolUseResult": {
      "mode": "content",
      "numFiles": 0,
      "filenames": [],
      "content": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-44-\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-45-    // Extract final result message (this is the key output from Claude CLI)\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts:46:    if (event.type === 'result' && ev.result) {\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-47-      finalOutput = typeof ev.result === 'string' ? ev.result : JSON.stringify(ev.result);\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-48-    }\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-49-\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-50-    // Extract message content from assistant messages\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-51-    if (event.type === 'assistant' && ev.message && typeof ev.message === 'object') {\n--\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-119-        }\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-120-      }\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts:121:    } else if (event.type === 'result' && ev.usage && typeof ev.usage === 'object') {\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-122-      const usage = ev.usage as Record<string, unknown>;\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-123-      const inputTokens = Number(usage.input_tokens) || 0;\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-124-      const outputTokens = Number(usage.output_tokens) || 0;\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-125-\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/parser.ts-126-      totalInputTokens += inputTokens;\n--\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-136-\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-137-          // Extract text from result events\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts:138:          if (event.type === 'result' && event.result && typeof event.result === 'string') {\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-139-            chunkText += event.result;\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-140-          }\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-141-\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-142-          // onEvent handling (if provided)\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-143-          if (options.onEvent) {\n--\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-206-\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-207-            // Emit synthetic turn.completed event when we see the result\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts:208:            if (event.type === 'result') {\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-209-              options.onEvent({\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-210-                type: 'turn.completed',\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-211-                timestamp: event.timestamp || Date.now(),\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-212-              });\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts-213-            }",
      "numLines": 35
    }
  },
  {
    "parentUuid": "277eab7c-254f-4728-81c3-57949db4e9cb",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01HzEb1yguuKvcLPsxbGL9CR",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "thinking",
          "thinking": "Perfect! I found it. In `/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts` at lines 137-140:\n\n```typescript\n// Extract text from result events\nif (event.type === 'result' && event.result && typeof event.result === 'string') {\n  chunkText += event.result;\n}\n```\n\nAnd earlier at lines 126-135, it extracts text from assistant messages.\n\nSo when Claude CLI outputs in stream-json format, it sends:\n1. One or more `assistant` message events with text content\n2. A final `result` event that contains the accumulated output from all assistant messages\n\nBoth are being extracted and added to `chunkText`, which means the text appears twice in `data.text`, which then gets written twice to stdout!\n\nThe fix is simple: **Don't extract text from result events** since that text has already been extracted from the assistant messages during streaming.\n\nThe `result` event is meant to contain the final accumulated output, which is useful for the final response parsing (in parser.ts), but it shouldn't be included in the streaming text extraction because it duplicates what was already streamed.\n\nLet me create a plan to fix this.",
          "signature": "EtAKCkYICBgCKkAN1jy7zvOchq9/qgwWd7hxKNQQNIoEpdSrj6bfUwV98rKD/XbnLVFoQG3CTdqDhpqwYX4LBskJXnm097w4bATHEgwx0bG3svDA4kpjkUsaDEp0PMn0YbKLZbAK8yIwen2Bgwll89EzolUcRzUeBab1yXRRvg0YD4TyURfan6Fv6otMeTlcYtrhsly135PVKrcJ/Ls0IGFB22zwdR7XrJNxjhMS28IItFd365IMh04aBv/ifUAm6FmENxar9W2oHeuiHK0B++cYhaekE1KyNAeTeE2DFrzAacwmqoo+aVq5T4zwyosO2+b7Tooci55dwTt/nnjx8SRH/WEG6UZdxa1V8+Ut+OfCXl0ptMbFOArpn0tZy8WsL19/QlfiThZxM1bC+0i+kNP/mdWUvOmt3ImqK/0ammelh/vLJ6buaHIz27bnvW2UmRPjkTdQOZfQX5HhUb0ek+kMtmJGj3bH77c0O2tz+9zON/l1WRfg0tG7E+QCENkBImeInfzkD5s+KNIU24z8UzXgr/jugwViKWTFmgI63LQGwNc3wDH+5WfAV8pFdJL++Ms5O7OVInXLZMKhbjvfbT/055d7rwxcvOxAQmq/857iWb8tLnrCLeZ7sZV1RAyGkCBOxhEbxO2rS8pMQRyTxj9OZMUwSEYRyJIrgfhNm2a9vnQ/PutD3VjH+kbDICriOFqK5YcIg4ZIXgd7N0GZUJC83Y0WhojkgDbm9a82nTXRStyyDtwRC6C2OjLUdyQRmRIFIjzBLdkBKmGvFe+L05bkoPZX7bn4+0kdik6JMb1VK8ZuByfyeO2Pf2eYaZW5gfwEbKPcnnheCpwvbnemPCXRcJTb/p75ItEUtfqAkZnB3fBqfYGSP0Xoyi2BtcVRpkQj1P73qvjqv4n6Y5/DvdG+BLu+z9XdvVGwx9dZgYtAvIRVhb8x1XI6SbDWqcO48/uXcS1O0vHJyN4hvAp6uXS6fNbjaSOh3piHipUJ4DUYTHI2weUR7dY4vAbTB7bhbj4lm12d+xXDJBb0geGamVw/rhyn6jWtI6ijVCZDQ38zcwwDyN4ad/n7Mu5SdPnzX0HJBujy+sGE5ma9k+fLn05RpMqETQEGwlhHfSmBaGYH2WdWV5dyf+PxmbV83kNgMcdicoYdBzDpuIQ3olcLZN5HvAfZ/E+7TN7Yvoj1vHaSetilgUIShc1JgoaFQTwbB3ZE59FcSCX/6v6tBF/U5GggH8MO8dqN7+wb+jXwexD/E7z+GBF5iaSuhBVNQhkQZh5+eeofuXGhkGTJqiQKC2shPA2lRILmP1hgcYwwG7M/sDNkybn899971PrPnrmiL2ox80vMskWN+eUhWZQjEvlihSuRxMlx95Chsbe/1V4Ko9Vk1y+XqpOY/38SxUzG1Ww8RqS60V0GK8cmh1bgRhCY/pFYGjFt6YYT8bqY54ia10nNtGUDu0F84+jMzdlvvdGm/cSLSfQrwGga1ndu110E0dsK33w5CTn1qJBU2/pPGu077Lv39RLUvmIDUFwIJT07cxtDrM31g/jHVTdQoWvan+VffzOtKJaaWMPbb1p9Mlgbkd6UPy3mJTlTWUkL4FxBoqrkX6hIJH6rj3ULXNddMO2+vaTC2NmV6f1E1CTIOIgMfq8Uv696Zd62grSfGqyc8kwtnlsPdt8zpg3qxnwEqptJYFyZFvt4y/qcuVheKoQBdKaB16vDLFbD6pgVc5ach2hnZOIBg4/f+9A8S1FMLjhVDVR6+iKsPAmeSSNU1hfUYjr0zGPL7qvm2rluk4uG62wMPLU4MxBf9dN0HD6RyBgB"
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 11,
        "cache_creation_input_tokens": 4150,
        "cache_read_input_tokens": 32957,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 4150,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdA3upocWdpAkhYPTAs",
    "type": "assistant",
    "uuid": "ad994473-9c66-4a46-963c-75481aff7011",
    "timestamp": "2025-10-20T02:00:09.539Z"
  },
  {
    "parentUuid": "ad994473-9c66-4a46-963c-75481aff7011",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01HzEb1yguuKvcLPsxbGL9CR",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "text",
          "text": "## Root Cause Found!\n\nI've identified the text duplication issue. Here's what's happening:\n\n**In `cli-wrapper.ts` (lines 126-140)**, the text extraction logic does this:\n\n1. **Lines 126-135**: Extracts text from `assistant` message events (the streaming messages)\n2. **Lines 137-140**: **ALSO** extracts text from `result` events (the final accumulated output)\n\nWhen Claude CLI streams in `stream-json` format, it sends:\n- Multiple `assistant` events with text content as the response is generated\n- A final `result` event containing **the complete accumulated text from all assistant messages**\n\nSince both are being added to `chunkText`, the text appears **twice** in `data.text`, which then gets written twice by the example's `createTextOnlyOutput()` function.\n\n## The Fix\n\nThe `result` event should **not** contribute to the streaming text output because:\n1. Its content has already been streamed via `assistant` events\n2. The `result` event is meant for final output capture in non-streaming scenarios\n3. Including it causes duplication in streaming callbacks"
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 11,
        "cache_creation_input_tokens": 4150,
        "cache_read_input_tokens": 32957,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 4150,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdA3upocWdpAkhYPTAs",
    "type": "assistant",
    "uuid": "2c5e5da0-dcc5-4fec-852f-0123de4b5c93",
    "timestamp": "2025-10-20T02:00:15.896Z"
  },
  {
    "parentUuid": "2c5e5da0-dcc5-4fec-852f-0123de4b5c93",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01HzEb1yguuKvcLPsxbGL9CR",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_01T2zmoApqSdbdrwLsdQQK5t",
          "name": "ExitPlanMode",
          "input": {
            "plan": "**Fix text duplication in streaming output**\n\n1. **Remove result event text extraction** from `cli-wrapper.ts:137-140`\n   - The `result` event contains accumulated text that was already streamed via `assistant` events\n   - Extracting text from `result` events causes duplication in streaming scenarios\n   - Keep the `result` event for other purposes (final output, usage stats) but don't add its text to `chunkText`\n\n2. **Test the fix** with the `dynamic-scoping-session.ts` example to verify:\n   - No more duplicate text in Q&A sessions\n   - Text still streams correctly from `assistant` events\n   - Final response is still captured correctly"
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 11,
        "cache_creation_input_tokens": 4150,
        "cache_read_input_tokens": 32957,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 4150,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdA3upocWdpAkhYPTAs",
    "type": "assistant",
    "uuid": "49cf6aa6-4c92-4936-85cc-3c4131421beb",
    "timestamp": "2025-10-20T02:00:19.433Z"
  },
  {
    "parentUuid": "49cf6aa6-4c92-4936-85cc-3c4131421beb",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "type": "tool_result",
          "content": "The user doesn't want to proceed with this tool use. The tool use was rejected (eg. if it was a file edit, the new_string was NOT written to the file). STOP what you are doing and wait for the user to tell you how to proceed.",
          "is_error": true,
          "tool_use_id": "toolu_01T2zmoApqSdbdrwLsdQQK5t"
        }
      ]
    },
    "uuid": "78ccb7e9-ba42-49a5-a1d2-7aa29bb8a10b",
    "timestamp": "2025-10-20T02:01:16.302Z",
    "toolUseResult": "Error: The user doesn't want to proceed with this tool use. The tool use was rejected (eg. if it was a file edit, the new_string was NOT written to the file). STOP what you are doing and wait for the user to tell you how to proceed."
  },
  {
    "parentUuid": "78ccb7e9-ba42-49a5-a1d2-7aa29bb8a10b",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "[Request interrupted by user for tool use]"
        }
      ]
    },
    "uuid": "8a1472c8-f686-4004-957e-54ff761b17b2",
    "timestamp": "2025-10-20T02:01:16.327Z"
  },
  {
    "type": "file-history-snapshot",
    "messageId": "63922b84-58b7-45b4-8406-044e8ce7c083",
    "snapshot": {
      "messageId": "63922b84-58b7-45b4-8406-044e8ce7c083",
      "trackedFileBackups": {},
      "timestamp": "2025-10-20T02:01:30.826Z"
    },
    "isSnapshotUpdate": false
  },
  {
    "parentUuid": "8a1472c8-f686-4004-957e-54ff761b17b2",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": "also can you write a unit test to confirm this regression is fixed"
    },
    "uuid": "63922b84-58b7-45b4-8406-044e8ce7c083",
    "timestamp": "2025-10-20T02:01:30.779Z",
    "thinkingMetadata": {
      "level": "high",
      "disabled": false,
      "triggers": []
    }
  },
  {
    "parentUuid": "63922b84-58b7-45b4-8406-044e8ce7c083",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01K88dPjURv7ZjcaLZZA2Hd5",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "thinking",
          "thinking": "The user wants me to also include a unit test in the plan to confirm the regression is fixed. Let me update my plan to include that.\n\nI should look at the existing test structure to understand how to write a proper test for this.",
          "signature": "Eo8DCkYICBgCKkBgHKIkuP49UHWAQO5XekVqcvK4YDOX7k+A3zm2bYZKuqjPFvrtSRzCKCRYa0XGLfYFFLDUxxNdSQLC5c03xiSEEgwx6cio/CXnRYjHTwYaDIQGYNLNXTeW5eHzGyIwWU5y3sCgiIhsiYatz/Sfa3U7pNBjcgsbq+twjabzIGiPaXKvllIP3qzuu/evYyljKvYBVoH0i/TEz+hZsD4iRMViScgYIxeLwlsL0T84A8QvAqZrFHtA3gP4jcFPINQ4rq71VRm/xoccbQ6LQABwcXR+hY2aYVTzGiE51TXPlvyX+1cVxnf5+Iv1nr4OLJ44PyyTKVJXi0sGTHeZzAhskbK43qEMSi51hpOsDJggoYzXuigfAuRenstCDHJqy87Lcx/3BfTMbGDUl+1Ps35M6k6Y4dviasVT3UOgO73PY3KiFgVj0OwsbiKc0IOkYto0qhSEYqYZMiCTqToHLJEme+wFGODzN9LZWjQbt6YI0UUePZkJsaxK93UCagu8V33vNSkCWTsEExMxGAE="
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 10,
        "cache_creation_input_tokens": 21918,
        "cache_read_input_tokens": 13094,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 21918,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdGmBwUKnHtp2AdL4xU",
    "type": "assistant",
    "uuid": "c9dd527a-2e4a-4481-a5a2-1daa0985448e",
    "timestamp": "2025-10-20T02:01:35.466Z"
  },
  {
    "parentUuid": "c9dd527a-2e4a-4481-a5a2-1daa0985448e",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01K88dPjURv7ZjcaLZZA2Hd5",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "text",
          "text": "Let me check the existing test structure first to write an appropriate regression test."
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 10,
        "cache_creation_input_tokens": 21918,
        "cache_read_input_tokens": 13094,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 21918,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdGmBwUKnHtp2AdL4xU",
    "type": "assistant",
    "uuid": "5c464a23-c3c8-45ed-b2ab-e2ef2a7ba0ee",
    "timestamp": "2025-10-20T02:01:36.063Z"
  },
  {
    "parentUuid": "5c464a23-c3c8-45ed-b2ab-e2ef2a7ba0ee",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01K88dPjURv7ZjcaLZZA2Hd5",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_01JQwQ5DvDjh4iTYMHed6M4R",
          "name": "Glob",
          "input": {
            "pattern": "**/*.test.ts",
            "path": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk"
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 10,
        "cache_creation_input_tokens": 21918,
        "cache_read_input_tokens": 13094,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 21918,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdGmBwUKnHtp2AdL4xU",
    "type": "assistant",
    "uuid": "884a3388-0043-4ebc-b87c-3ba8f97ca18f",
    "timestamp": "2025-10-20T02:01:38.014Z"
  },
  {
    "parentUuid": "884a3388-0043-4ebc-b87c-3ba8f97ca18f",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01K88dPjURv7ZjcaLZZA2Hd5",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_012WP5Ezqaco53dk6osaCGFw",
          "name": "Glob",
          "input": {
            "pattern": "**/*.spec.ts",
            "path": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk"
          }
        }
      ],
      "stop_reason": "tool_use",
      "stop_sequence": null,
      "usage": {
        "input_tokens": 10,
        "cache_creation_input_tokens": 21918,
        "cache_read_input_tokens": 13094,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 21918,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 259,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdGmBwUKnHtp2AdL4xU",
    "type": "assistant",
    "uuid": "70874ec3-4790-4ef8-8175-f91f3db7da85",
    "timestamp": "2025-10-20T02:01:38.223Z"
  },
  {
    "parentUuid": "70874ec3-4790-4ef8-8175-f91f3db7da85",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_01JQwQ5DvDjh4iTYMHed6M4R",
          "type": "tool_result",
          "content": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/e2e/structured-output.e2e.test.ts\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/integration/session-flows.test.ts\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/adapters/claude/image-handler.test.ts\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/adapters/claude/mcp-detector.test.ts\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/adapters/claude/parser.test.ts\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/client/agent-client.test.ts\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/client/session.test.ts\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/core/errors.test.ts\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/utils/json-parser.test.ts\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/utils/spawn.test.ts\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/utils/validation.test.ts\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/e2e/claude-e2e.test.ts\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/e2e/codex-e2e.test.ts\n/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/integration/client-workflows.test.ts"
        }
      ]
    },
    "uuid": "3a87d6d6-f552-4da2-88e9-b7f8b0ddeef6",
    "timestamp": "2025-10-20T02:01:38.356Z",
    "toolUseResult": {
      "filenames": [
        "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/e2e/structured-output.e2e.test.ts",
        "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/integration/session-flows.test.ts",
        "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/adapters/claude/image-handler.test.ts",
        "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/adapters/claude/mcp-detector.test.ts",
        "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/adapters/claude/parser.test.ts",
        "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/client/agent-client.test.ts",
        "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/client/session.test.ts",
        "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/core/errors.test.ts",
        "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/utils/json-parser.test.ts",
        "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/utils/spawn.test.ts",
        "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/utils/validation.test.ts",
        "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/e2e/claude-e2e.test.ts",
        "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/e2e/codex-e2e.test.ts",
        "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/integration/client-workflows.test.ts"
      ],
      "durationMs": 68,
      "numFiles": 14,
      "truncated": false
    }
  },
  {
    "parentUuid": "3a87d6d6-f552-4da2-88e9-b7f8b0ddeef6",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_012WP5Ezqaco53dk6osaCGFw",
          "type": "tool_result",
          "content": "No files found"
        }
      ]
    },
    "uuid": "0ca95ffa-1caf-4b1f-9319-a5ddcfef671a",
    "timestamp": "2025-10-20T02:01:38.364Z",
    "toolUseResult": {
      "filenames": [],
      "durationMs": 35,
      "numFiles": 0,
      "truncated": false
    }
  },
  {
    "parentUuid": "0ca95ffa-1caf-4b1f-9319-a5ddcfef671a",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01G35yd1qaqBckwcoxTpRYhQ",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "thinking",
          "thinking": "Good, I found several test files. Let me check the parser test and session test to see how they structure tests, especially around output handling. Those seem most relevant.",
          "signature": "EtcCCkYICBgCKkCsiRPBT5ms5Ewhz6o/WjnCAR7drBBLKG3NXDIC4cJy7IZEzfVqp/jLXrulAS4lJLqYFeGOP7oeto3u46MGxHfXEgwVl12F2VpAb6a0IIIaDBZAyRl264du4zl6TiIwCpuOiqgOHRw+LpZWLqumUrkMisd6TuzFNPi6VG0ZxxMbvuJPWSZyXEBCpuIubuSUKr4BmcKBVcj/z9WFWYvLDErOna5vwfKIT3LwzVQRu/qN6vIP9r+GHS5SXA/8KoTYS3WRrlo6pNUxDVH8XhSKWfU8LUNXMsF07rrDAumXwSLF8SG+hC5EKRPoa6Nt2vBWsX++SiQRXj+LzbP8gWb50IzAf21Z/Pxh32y05bMtTh+2+eex3n7xnCjIKIuuV0hM43oveLzfXltTfTgVOAKFadW8N9XiDiBErWJaLUlVkWqtXL3Ap+S9K6dKL899GyOmWhgB"
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 14,
        "cache_creation_input_tokens": 1035,
        "cache_read_input_tokens": 35012,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 1035,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdHKRg7CF17FJnhwFuV",
    "type": "assistant",
    "uuid": "08ae5df5-e5f1-4b16-8cee-78e57afde124",
    "timestamp": "2025-10-20T02:01:41.780Z"
  },
  {
    "parentUuid": "08ae5df5-e5f1-4b16-8cee-78e57afde124",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01G35yd1qaqBckwcoxTpRYhQ",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_01SYHmxWrTpWcdwdAZonUeZS",
          "name": "Read",
          "input": {
            "file_path": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/client/session.test.ts"
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 14,
        "cache_creation_input_tokens": 1035,
        "cache_read_input_tokens": 35012,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 1035,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdHKRg7CF17FJnhwFuV",
    "type": "assistant",
    "uuid": "39f2cd76-8f80-4592-acb7-c007ed6c044b",
    "timestamp": "2025-10-20T02:01:42.563Z"
  },
  {
    "parentUuid": "39f2cd76-8f80-4592-acb7-c007ed6c044b",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01G35yd1qaqBckwcoxTpRYhQ",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_01NW9TqyrERmiGkohMB8mfss",
          "name": "Read",
          "input": {
            "file_path": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/adapters/claude/parser.test.ts"
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 14,
        "cache_creation_input_tokens": 1035,
        "cache_read_input_tokens": 35012,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 1035,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdHKRg7CF17FJnhwFuV",
    "type": "assistant",
    "uuid": "52b9e072-0042-40f9-84c6-f1056252b0f2",
    "timestamp": "2025-10-20T02:01:42.972Z"
  },
  {
    "parentUuid": "52b9e072-0042-40f9-84c6-f1056252b0f2",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_01SYHmxWrTpWcdwdAZonUeZS",
          "type": "tool_result",
          "content": "     1\u2192/**\n     2\u2192 * Tests for Session wrapper class\n     3\u2192 */\n     4\u2192\n     5\u2192import { describe, it, expect, vi, beforeEach } from 'vitest';\n     6\u2192import { EventEmitter } from 'node:events';\n     7\u2192import { Session } from '../../../src/client/session';\n     8\u2192import type { AIAdapter, ExecutionResponse } from '../../../src/types/index';\n     9\u2192\n    10\u2192// Mock adapter session\n    11\u2192class MockAdapterSession extends EventEmitter {\n    12\u2192  private _sessionId?: string;\n    13\u2192  private _messageCount = 0;\n    14\u2192\n    15\u2192  async send<T = string>(message: string, options?: any): Promise<ExecutionResponse<T>> {\n    16\u2192    this._messageCount++;\n    17\u2192\n    18\u2192    if (!this._sessionId) {\n    19\u2192      this._sessionId = options?.sessionId || `mock-session-${Date.now()}`;\n    20\u2192    }\n    21\u2192\n    22\u2192    const response: ExecutionResponse<T> = {\n    23\u2192      output: `Response to: ${message}` as T,\n    24\u2192      sessionId: this._sessionId,\n    25\u2192      status: 'success',\n    26\u2192      exitCode: 0,\n    27\u2192      duration: 100,\n    28\u2192      metadata: {},\n    29\u2192    };\n    30\u2192\n    31\u2192    // Emit complete event asynchronously\n    32\u2192    setImmediate(() => this.emit('complete', response));\n    33\u2192\n    34\u2192    return response;\n    35\u2192  }\n    36\u2192\n    37\u2192  abort(): void {\n    38\u2192    this.emit('aborted');\n    39\u2192  }\n    40\u2192\n    41\u2192  getSessionId(): string | undefined {\n    42\u2192    return this._sessionId;\n    43\u2192  }\n    44\u2192\n    45\u2192  getMessageCount(): number {\n    46\u2192    return this._messageCount;\n    47\u2192  }\n    48\u2192}\n    49\u2192\n    50\u2192// Mock adapter\n    51\u2192const mockAdapter: AIAdapter = {\n    52\u2192  async execute() {\n    53\u2192    return {\n    54\u2192      output: 'test',\n    55\u2192      sessionId: 'test',\n    56\u2192      status: 'success',\n    57\u2192      exitCode: 0,\n    58\u2192      duration: 100,\n    59\u2192      metadata: {},\n    60\u2192    };\n    61\u2192  },\n    62\u2192  getCapabilities() {\n    63\u2192    return {\n    64\u2192      streaming: true,\n    65\u2192      sessionManagement: true,\n    66\u2192      toolCalling: true,\n    67\u2192      multiModal: false,\n    68\u2192    };\n    69\u2192  },\n    70\u2192};\n    71\u2192\n    72\u2192describe('Session', () => {\n    73\u2192  let adapterSession: MockAdapterSession;\n    74\u2192  let session: Session;\n    75\u2192\n    76\u2192  beforeEach(() => {\n    77\u2192    adapterSession = new MockAdapterSession();\n    78\u2192    session = new Session(mockAdapter, adapterSession, {});\n    79\u2192  });\n    80\u2192\n    81\u2192  describe('Initialization', () => {\n    82\u2192    it('should initialize with zero message count', () => {\n    83\u2192      expect(session.messageCount).toBe(0);\n    84\u2192      expect(session.getMessageCount()).toBe(0);\n    85\u2192    });\n    86\u2192\n    87\u2192    it('should not have session ID initially', () => {\n    88\u2192      expect(session.sessionId).toBeUndefined();\n    89\u2192      expect(session.getSessionId()).toBeUndefined();\n    90\u2192    });\n    91\u2192\n    92\u2192    it('should record start time', () => {\n    93\u2192      const beforeTime = Date.now();\n    94\u2192      const newSession = new Session(mockAdapter, new MockAdapterSession(), {});\n    95\u2192      const afterTime = Date.now();\n    96\u2192\n    97\u2192      expect(newSession.startedAt).toBeGreaterThanOrEqual(beforeTime);\n    98\u2192      expect(newSession.startedAt).toBeLessThanOrEqual(afterTime);\n    99\u2192    });\n   100\u2192\n   101\u2192    it('should accept pre-set session ID', () => {\n   102\u2192      const customSession = new Session(mockAdapter, new MockAdapterSession(), {\n   103\u2192        sessionId: 'custom-session-id',\n   104\u2192      });\n   105\u2192\n   106\u2192      expect(customSession.sessionId).toBe('custom-session-id');\n   107\u2192    });\n   108\u2192\n   109\u2192    it('should not have last message time initially', () => {\n   110\u2192      expect(session.lastMessageAt).toBeUndefined();\n   111\u2192    });\n   112\u2192  });\n   113\u2192\n   114\u2192  describe('Sending Messages', () => {\n   115\u2192    it('should send message and return response', async () => {\n   116\u2192      const result = await session.send('Hello');\n   117\u2192\n   118\u2192      expect(result.output).toBe('Response to: Hello');\n   119\u2192      expect(result.status).toBe('success');\n   120\u2192    });\n   121\u2192\n   122\u2192    it('should increment message count', async () => {\n   123\u2192      expect(session.messageCount).toBe(0);\n   124\u2192\n   125\u2192      await session.send('Message 1');\n   126\u2192      expect(session.messageCount).toBe(1);\n   127\u2192\n   128\u2192      await session.send('Message 2');\n   129\u2192      expect(session.messageCount).toBe(2);\n   130\u2192\n   131\u2192      await session.send('Message 3');\n   132\u2192      expect(session.messageCount).toBe(3);\n   133\u2192    });\n   134\u2192\n   135\u2192    it('should capture session ID from first message', async () => {\n   136\u2192      expect(session.sessionId).toBeUndefined();\n   137\u2192\n   138\u2192      const result = await session.send('First message');\n   139\u2192\n   140\u2192      expect(session.sessionId).toBeDefined();\n   141\u2192      expect(session.sessionId).toBe(result.sessionId);\n   142\u2192    });\n   143\u2192\n   144\u2192    it('should maintain same session ID across messages', async () => {\n   145\u2192      const result1 = await session.send('Message 1');\n   146\u2192      const result2 = await session.send('Message 2');\n   147\u2192      const result3 = await session.send('Message 3');\n   148\u2192\n   149\u2192      expect(result1.sessionId).toBe(result2.sessionId);\n   150\u2192      expect(result2.sessionId).toBe(result3.sessionId);\n   151\u2192      expect(session.sessionId).toBe(result1.sessionId);\n   152\u2192    });\n   153\u2192\n   154\u2192    it('should update last message time', async () => {\n   155\u2192      expect(session.lastMessageAt).toBeUndefined();\n   156\u2192\n   157\u2192      const beforeTime = Date.now();\n   158\u2192      await session.send('Message');\n   159\u2192      const afterTime = Date.now();\n   160\u2192\n   161\u2192      expect(session.lastMessageAt).toBeGreaterThanOrEqual(beforeTime);\n   162\u2192      expect(session.lastMessageAt).toBeLessThanOrEqual(afterTime);\n   163\u2192    });\n   164\u2192\n   165\u2192    it('should update last message time on each send', async () => {\n   166\u2192      await session.send('Message 1');\n   167\u2192      const firstMessageTime = session.lastMessageAt;\n   168\u2192\n   169\u2192      // Wait a bit\n   170\u2192      await new Promise((resolve) => setTimeout(resolve, 10));\n   171\u2192\n   172\u2192      await session.send('Message 2');\n   173\u2192      const secondMessageTime = session.lastMessageAt;\n   174\u2192\n   175\u2192      expect(secondMessageTime).toBeGreaterThan(firstMessageTime!);\n   176\u2192    });\n   177\u2192\n   178\u2192    it('should merge session options with send options', async () => {\n   179\u2192      const sessionWithOptions = new Session(mockAdapter, adapterSession, {\n   180\u2192        timeout: 5000,\n   181\u2192        workingDirectory: '/default/dir',\n   182\u2192      });\n   183\u2192\n   184\u2192      const sendSpy = vi.spyOn(adapterSession, 'send');\n   185\u2192\n   186\u2192      await sessionWithOptions.send('Test', {\n   187\u2192        timeout: 10000, // Override\n   188\u2192      });\n   189\u2192\n   190\u2192      expect(sendSpy).toHaveBeenCalledWith(\n   191\u2192        'Test',\n   192\u2192        expect.objectContaining({\n   193\u2192          timeout: 10000,\n   194\u2192          workingDirectory: '/default/dir',\n   195\u2192        })\n   196\u2192      );\n   197\u2192    });\n   198\u2192\n   199\u2192    it('should prioritize send options over session options', async () => {\n   200\u2192      const sessionWithOptions = new Session(mockAdapter, adapterSession, {\n   201\u2192        verbose: false,\n   202\u2192        logPath: '/default/logs',\n   203\u2192      });\n   204\u2192\n   205\u2192      const sendSpy = vi.spyOn(adapterSession, 'send');\n   206\u2192\n   207\u2192      await sessionWithOptions.send('Test', {\n   208\u2192        verbose: true,\n   209\u2192        logPath: '/override/logs',\n   210\u2192      });\n   211\u2192\n   212\u2192      expect(sendSpy).toHaveBeenCalledWith(\n   213\u2192        'Test',\n   214\u2192        expect.objectContaining({\n   215\u2192          verbose: true,\n   216\u2192          logPath: '/override/logs',\n   217\u2192        })\n   218\u2192      );\n   219\u2192    });\n   220\u2192  });\n   221\u2192\n   222\u2192  describe('Abort', () => {\n   223\u2192    it('should call adapter session abort', () => {\n   224\u2192      const abortSpy = vi.spyOn(adapterSession, 'abort');\n   225\u2192\n   226\u2192      session.abort();\n   227\u2192\n   228\u2192      expect(abortSpy).toHaveBeenCalled();\n   229\u2192    });\n   230\u2192\n   231\u2192    it('should emit aborted event via forwarding', () => {\n   232\u2192      return new Promise<void>((resolve) => {\n   233\u2192        session.on('aborted', () => {\n   234\u2192          resolve();\n   235\u2192        });\n   236\u2192\n   237\u2192        session.abort();\n   238\u2192      });\n   239\u2192    });\n   240\u2192\n   241\u2192    it('should handle adapter session without abort method', () => {\n   242\u2192      const sessionWithoutAbort = new MockAdapterSession();\n   243\u2192      delete (sessionWithoutAbort as any).abort;\n   244\u2192\n   245\u2192      const sessionNoAbort = new Session(mockAdapter, sessionWithoutAbort as any, {});\n   246\u2192\n   247\u2192      expect(() => sessionNoAbort.abort()).not.toThrow();\n   248\u2192    });\n   249\u2192  });\n   250\u2192\n   251\u2192  describe('Event Forwarding', () => {\n   252\u2192    it('should forward complete event', () => {\n   253\u2192      return new Promise<void>((resolve) => {\n   254\u2192        session.on('complete', (response) => {\n   255\u2192          expect(response.output).toContain('Test');\n   256\u2192          resolve();\n   257\u2192        });\n   258\u2192\n   259\u2192        session.send('Test');\n   260\u2192      });\n   261\u2192    });\n   262\u2192\n   263\u2192    it('should forward output event', () => {\n   264\u2192      return new Promise<void>((resolve) => {\n   265\u2192        session.on('output', (chunk) => {\n   266\u2192          expect(chunk).toBeDefined();\n   267\u2192          resolve();\n   268\u2192        });\n   269\u2192\n   270\u2192        adapterSession.emit('output', 'chunk data');\n   271\u2192      });\n   272\u2192    });\n   273\u2192\n   274\u2192    it('should forward event event', () => {\n   275\u2192      return new Promise<void>((resolve) => {\n   276\u2192        session.on('event', (event) => {\n   277\u2192          expect(event.type).toBe('test');\n   278\u2192          resolve();\n   279\u2192        });\n   280\u2192\n   281\u2192        adapterSession.emit('event', { type: 'test' });\n   282\u2192      });\n   283\u2192    });\n   284\u2192\n   285\u2192    it('should forward error event', () => {\n   286\u2192      return new Promise<void>((resolve) => {\n   287\u2192        session.on('error', (error) => {\n   288\u2192          expect(error.message).toBe('Test error');\n   289\u2192          resolve();\n   290\u2192        });\n   291\u2192\n   292\u2192        adapterSession.emit('error', new Error('Test error'));\n   293\u2192      });\n   294\u2192    });\n   295\u2192\n   296\u2192    it('should forward aborted event', () => {\n   297\u2192      return new Promise<void>((resolve) => {\n   298\u2192        session.on('aborted', () => {\n   299\u2192          resolve();\n   300\u2192        });\n   301\u2192\n   302\u2192        adapterSession.emit('aborted');\n   303\u2192      });\n   304\u2192    });\n   305\u2192\n   306\u2192    it('should forward all event types', () => {\n   307\u2192      const outputSpy = vi.fn();\n   308\u2192      const eventSpy = vi.fn();\n   309\u2192      const completeSpy = vi.fn();\n   310\u2192      const errorSpy = vi.fn();\n   311\u2192      const abortedSpy = vi.fn();\n   312\u2192\n   313\u2192      session.on('output', outputSpy);\n   314\u2192      session.on('event', eventSpy);\n   315\u2192      session.on('complete', completeSpy);\n   316\u2192      session.on('error', errorSpy);\n   317\u2192      session.on('aborted', abortedSpy);\n   318\u2192\n   319\u2192      adapterSession.emit('output', 'data');\n   320\u2192      adapterSession.emit('event', { type: 'test' });\n   321\u2192      adapterSession.emit('complete', {});\n   322\u2192      adapterSession.emit('error', new Error());\n   323\u2192      adapterSession.emit('aborted');\n   324\u2192\n   325\u2192      expect(outputSpy).toHaveBeenCalled();\n   326\u2192      expect(eventSpy).toHaveBeenCalled();\n   327\u2192      expect(completeSpy).toHaveBeenCalled();\n   328\u2192      expect(errorSpy).toHaveBeenCalled();\n   329\u2192      expect(abortedSpy).toHaveBeenCalled();\n   330\u2192    });\n   331\u2192\n   332\u2192    it('should forward events with all arguments', () => {\n   333\u2192      return new Promise<void>((resolve) => {\n   334\u2192        session.on('event', (arg1, arg2, arg3) => {\n   335\u2192          expect(arg1).toBe('first');\n   336\u2192          expect(arg2).toBe('second');\n   337\u2192          expect(arg3).toBe('third');\n   338\u2192          resolve();\n   339\u2192        });\n   340\u2192\n   341\u2192        adapterSession.emit('event', 'first', 'second', 'third');\n   342\u2192      });\n   343\u2192    });\n   344\u2192  });\n   345\u2192\n   346\u2192  // Removed: Trivial getter tests and TypeScript feature tests\n   347\u2192  // These tests verify that getters return properties, which adds no value\n   348\u2192  // The behavior is already tested through other tests that use these properties\n   349\u2192\n   350\u2192  describe('Metadata Tracking', () => {\n   351\u2192    it('should track session lifecycle', async () => {\n   352\u2192      const startTime = session.startedAt;\n   353\u2192\n   354\u2192      await session.send('Message 1');\n   355\u2192      const firstMessageTime = session.lastMessageAt!;\n   356\u2192\n   357\u2192      expect(firstMessageTime).toBeGreaterThanOrEqual(startTime);\n   358\u2192\n   359\u2192      await new Promise((resolve) => setTimeout(resolve, 10));\n   360\u2192\n   361\u2192      await session.send('Message 2');\n   362\u2192      const secondMessageTime = session.lastMessageAt!;\n   363\u2192\n   364\u2192      expect(secondMessageTime).toBeGreaterThan(firstMessageTime);\n   365\u2192      expect(session.messageCount).toBe(2);\n   366\u2192    });\n   367\u2192\n   368\u2192    it('should maintain accurate state across many messages', async () => {\n   369\u2192      const messageCount = 10;\n   370\u2192\n   371\u2192      for (let i = 1; i <= messageCount; i++) {\n   372\u2192        await session.send(`Message ${i}`);\n   373\u2192        expect(session.messageCount).toBe(i);\n   374\u2192      }\n   375\u2192\n   376\u2192      expect(session.messageCount).toBe(messageCount);\n   377\u2192      expect(session.sessionId).toBeDefined();\n   378\u2192      expect(session.lastMessageAt).toBeGreaterThanOrEqual(session.startedAt);\n   379\u2192    });\n   380\u2192  });\n   381\u2192\n   382\u2192  describe('Pre-set Session ID', () => {\n   383\u2192    it('should use provided session ID', () => {\n   384\u2192      const customSession = new Session(mockAdapter, new MockAdapterSession(), {\n   385\u2192        sessionId: 'pre-set-id-123',\n   386\u2192      });\n   387\u2192\n   388\u2192      expect(customSession.sessionId).toBe('pre-set-id-123');\n   389\u2192      expect(customSession.getSessionId()).toBe('pre-set-id-123');\n   390\u2192    });\n   391\u2192\n   392\u2192    it('should maintain pre-set session ID after messages', async () => {\n   393\u2192      const customSession = new Session(mockAdapter, adapterSession, {\n   394\u2192        sessionId: 'custom-id',\n   395\u2192      });\n   396\u2192\n   397\u2192      await customSession.send('Message');\n   398\u2192\n   399\u2192      expect(customSession.sessionId).toBe('custom-id');\n   400\u2192    });\n   401\u2192\n   402\u2192    it('should not override pre-set session ID', async () => {\n   403\u2192      const customSession = new Session(mockAdapter, adapterSession, {\n   404\u2192        sessionId: 'my-custom-id',\n   405\u2192      });\n   406\u2192\n   407\u2192      const result = await customSession.send('Test');\n   408\u2192\n   409\u2192      // Even if response has different session ID, wrapper should keep pre-set one\n   410\u2192      expect(customSession.sessionId).toBe('my-custom-id');\n   411\u2192    });\n   412\u2192  });\n   413\u2192\n   414\u2192  describe('Options Handling', () => {\n   415\u2192    it('should accept empty options', () => {\n   416\u2192      const emptySession = new Session(mockAdapter, new MockAdapterSession(), {});\n   417\u2192\n   418\u2192      expect(emptySession.sessionId).toBeUndefined();\n   419\u2192      expect(emptySession.messageCount).toBe(0);\n   420\u2192    });\n   421\u2192\n   422\u2192    it('should merge multiple option types', async () => {\n   423\u2192      const sessionOptions = {\n   424\u2192        timeout: 5000,\n   425\u2192        verbose: true,\n   426\u2192        logPath: '/logs',\n   427\u2192      };\n   428\u2192\n   429\u2192      const sendOptions = {\n   430\u2192        timeout: 10000, // Override\n   431\u2192        workingDirectory: '/work', // New option\n   432\u2192      };\n   433\u2192\n   434\u2192      const sessionWithOptions = new Session(mockAdapter, adapterSession, sessionOptions);\n   435\u2192      const sendSpy = vi.spyOn(adapterSession, 'send');\n   436\u2192\n   437\u2192      await sessionWithOptions.send('Test', sendOptions);\n   438\u2192\n   439\u2192      expect(sendSpy).toHaveBeenCalledWith(\n   440\u2192        'Test',\n   441\u2192        expect.objectContaining({\n   442\u2192          timeout: 10000,\n   443\u2192          verbose: true,\n   444\u2192          logPath: '/logs',\n   445\u2192          workingDirectory: '/work',\n   446\u2192        })\n   447\u2192      );\n   448\u2192    });\n   449\u2192  });\n   450\u2192\n   451\u2192  describe('Error Scenarios', () => {\n   452\u2192    it('should propagate errors from adapter session', async () => {\n   453\u2192      const errorSession = new MockAdapterSession();\n   454\u2192      errorSession.send = vi.fn().mockRejectedValue(new Error('Send failed'));\n   455\u2192\n   456\u2192      const sessionWithError = new Session(mockAdapter, errorSession, {});\n   457\u2192\n   458\u2192      await expect(sessionWithError.send('Test')).rejects.toThrow('Send failed');\n   459\u2192    });\n   460\u2192\n   461\u2192    it('should handle event forwarding errors gracefully', () => {\n   462\u2192      session.on('error', () => {\n   463\u2192        throw new Error('Listener error');\n   464\u2192      });\n   465\u2192\n   466\u2192      // Should not throw when adapter emits error\n   467\u2192      expect(() => {\n   468\u2192        adapterSession.emit('error', new Error('Adapter error'));\n   469\u2192      }).toThrow('Listener error'); // EventEmitter will throw listener errors\n   470\u2192    });\n   471\u2192\n   472\u2192    // Removed: Test for message count increment on error\n   473\u2192    // This tests implementation details of internal state management\n   474\u2192    // The important behavior (error propagation) is tested elsewhere\n   475\u2192  });\n   476\u2192});\n   477\u2192\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"
        }
      ]
    },
    "uuid": "fd39776c-fe3d-4380-a061-0e70d0e625c9",
    "timestamp": "2025-10-20T02:01:43.085Z",
    "toolUseResult": {
      "type": "text",
      "file": {
        "filePath": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/client/session.test.ts",
        "content": "/**\n * Tests for Session wrapper class\n */\n\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { EventEmitter } from 'node:events';\nimport { Session } from '../../../src/client/session';\nimport type { AIAdapter, ExecutionResponse } from '../../../src/types/index';\n\n// Mock adapter session\nclass MockAdapterSession extends EventEmitter {\n  private _sessionId?: string;\n  private _messageCount = 0;\n\n  async send<T = string>(message: string, options?: any): Promise<ExecutionResponse<T>> {\n    this._messageCount++;\n\n    if (!this._sessionId) {\n      this._sessionId = options?.sessionId || `mock-session-${Date.now()}`;\n    }\n\n    const response: ExecutionResponse<T> = {\n      output: `Response to: ${message}` as T,\n      sessionId: this._sessionId,\n      status: 'success',\n      exitCode: 0,\n      duration: 100,\n      metadata: {},\n    };\n\n    // Emit complete event asynchronously\n    setImmediate(() => this.emit('complete', response));\n\n    return response;\n  }\n\n  abort(): void {\n    this.emit('aborted');\n  }\n\n  getSessionId(): string | undefined {\n    return this._sessionId;\n  }\n\n  getMessageCount(): number {\n    return this._messageCount;\n  }\n}\n\n// Mock adapter\nconst mockAdapter: AIAdapter = {\n  async execute() {\n    return {\n      output: 'test',\n      sessionId: 'test',\n      status: 'success',\n      exitCode: 0,\n      duration: 100,\n      metadata: {},\n    };\n  },\n  getCapabilities() {\n    return {\n      streaming: true,\n      sessionManagement: true,\n      toolCalling: true,\n      multiModal: false,\n    };\n  },\n};\n\ndescribe('Session', () => {\n  let adapterSession: MockAdapterSession;\n  let session: Session;\n\n  beforeEach(() => {\n    adapterSession = new MockAdapterSession();\n    session = new Session(mockAdapter, adapterSession, {});\n  });\n\n  describe('Initialization', () => {\n    it('should initialize with zero message count', () => {\n      expect(session.messageCount).toBe(0);\n      expect(session.getMessageCount()).toBe(0);\n    });\n\n    it('should not have session ID initially', () => {\n      expect(session.sessionId).toBeUndefined();\n      expect(session.getSessionId()).toBeUndefined();\n    });\n\n    it('should record start time', () => {\n      const beforeTime = Date.now();\n      const newSession = new Session(mockAdapter, new MockAdapterSession(), {});\n      const afterTime = Date.now();\n\n      expect(newSession.startedAt).toBeGreaterThanOrEqual(beforeTime);\n      expect(newSession.startedAt).toBeLessThanOrEqual(afterTime);\n    });\n\n    it('should accept pre-set session ID', () => {\n      const customSession = new Session(mockAdapter, new MockAdapterSession(), {\n        sessionId: 'custom-session-id',\n      });\n\n      expect(customSession.sessionId).toBe('custom-session-id');\n    });\n\n    it('should not have last message time initially', () => {\n      expect(session.lastMessageAt).toBeUndefined();\n    });\n  });\n\n  describe('Sending Messages', () => {\n    it('should send message and return response', async () => {\n      const result = await session.send('Hello');\n\n      expect(result.output).toBe('Response to: Hello');\n      expect(result.status).toBe('success');\n    });\n\n    it('should increment message count', async () => {\n      expect(session.messageCount).toBe(0);\n\n      await session.send('Message 1');\n      expect(session.messageCount).toBe(1);\n\n      await session.send('Message 2');\n      expect(session.messageCount).toBe(2);\n\n      await session.send('Message 3');\n      expect(session.messageCount).toBe(3);\n    });\n\n    it('should capture session ID from first message', async () => {\n      expect(session.sessionId).toBeUndefined();\n\n      const result = await session.send('First message');\n\n      expect(session.sessionId).toBeDefined();\n      expect(session.sessionId).toBe(result.sessionId);\n    });\n\n    it('should maintain same session ID across messages', async () => {\n      const result1 = await session.send('Message 1');\n      const result2 = await session.send('Message 2');\n      const result3 = await session.send('Message 3');\n\n      expect(result1.sessionId).toBe(result2.sessionId);\n      expect(result2.sessionId).toBe(result3.sessionId);\n      expect(session.sessionId).toBe(result1.sessionId);\n    });\n\n    it('should update last message time', async () => {\n      expect(session.lastMessageAt).toBeUndefined();\n\n      const beforeTime = Date.now();\n      await session.send('Message');\n      const afterTime = Date.now();\n\n      expect(session.lastMessageAt).toBeGreaterThanOrEqual(beforeTime);\n      expect(session.lastMessageAt).toBeLessThanOrEqual(afterTime);\n    });\n\n    it('should update last message time on each send', async () => {\n      await session.send('Message 1');\n      const firstMessageTime = session.lastMessageAt;\n\n      // Wait a bit\n      await new Promise((resolve) => setTimeout(resolve, 10));\n\n      await session.send('Message 2');\n      const secondMessageTime = session.lastMessageAt;\n\n      expect(secondMessageTime).toBeGreaterThan(firstMessageTime!);\n    });\n\n    it('should merge session options with send options', async () => {\n      const sessionWithOptions = new Session(mockAdapter, adapterSession, {\n        timeout: 5000,\n        workingDirectory: '/default/dir',\n      });\n\n      const sendSpy = vi.spyOn(adapterSession, 'send');\n\n      await sessionWithOptions.send('Test', {\n        timeout: 10000, // Override\n      });\n\n      expect(sendSpy).toHaveBeenCalledWith(\n        'Test',\n        expect.objectContaining({\n          timeout: 10000,\n          workingDirectory: '/default/dir',\n        })\n      );\n    });\n\n    it('should prioritize send options over session options', async () => {\n      const sessionWithOptions = new Session(mockAdapter, adapterSession, {\n        verbose: false,\n        logPath: '/default/logs',\n      });\n\n      const sendSpy = vi.spyOn(adapterSession, 'send');\n\n      await sessionWithOptions.send('Test', {\n        verbose: true,\n        logPath: '/override/logs',\n      });\n\n      expect(sendSpy).toHaveBeenCalledWith(\n        'Test',\n        expect.objectContaining({\n          verbose: true,\n          logPath: '/override/logs',\n        })\n      );\n    });\n  });\n\n  describe('Abort', () => {\n    it('should call adapter session abort', () => {\n      const abortSpy = vi.spyOn(adapterSession, 'abort');\n\n      session.abort();\n\n      expect(abortSpy).toHaveBeenCalled();\n    });\n\n    it('should emit aborted event via forwarding', () => {\n      return new Promise<void>((resolve) => {\n        session.on('aborted', () => {\n          resolve();\n        });\n\n        session.abort();\n      });\n    });\n\n    it('should handle adapter session without abort method', () => {\n      const sessionWithoutAbort = new MockAdapterSession();\n      delete (sessionWithoutAbort as any).abort;\n\n      const sessionNoAbort = new Session(mockAdapter, sessionWithoutAbort as any, {});\n\n      expect(() => sessionNoAbort.abort()).not.toThrow();\n    });\n  });\n\n  describe('Event Forwarding', () => {\n    it('should forward complete event', () => {\n      return new Promise<void>((resolve) => {\n        session.on('complete', (response) => {\n          expect(response.output).toContain('Test');\n          resolve();\n        });\n\n        session.send('Test');\n      });\n    });\n\n    it('should forward output event', () => {\n      return new Promise<void>((resolve) => {\n        session.on('output', (chunk) => {\n          expect(chunk).toBeDefined();\n          resolve();\n        });\n\n        adapterSession.emit('output', 'chunk data');\n      });\n    });\n\n    it('should forward event event', () => {\n      return new Promise<void>((resolve) => {\n        session.on('event', (event) => {\n          expect(event.type).toBe('test');\n          resolve();\n        });\n\n        adapterSession.emit('event', { type: 'test' });\n      });\n    });\n\n    it('should forward error event', () => {\n      return new Promise<void>((resolve) => {\n        session.on('error', (error) => {\n          expect(error.message).toBe('Test error');\n          resolve();\n        });\n\n        adapterSession.emit('error', new Error('Test error'));\n      });\n    });\n\n    it('should forward aborted event', () => {\n      return new Promise<void>((resolve) => {\n        session.on('aborted', () => {\n          resolve();\n        });\n\n        adapterSession.emit('aborted');\n      });\n    });\n\n    it('should forward all event types', () => {\n      const outputSpy = vi.fn();\n      const eventSpy = vi.fn();\n      const completeSpy = vi.fn();\n      const errorSpy = vi.fn();\n      const abortedSpy = vi.fn();\n\n      session.on('output', outputSpy);\n      session.on('event', eventSpy);\n      session.on('complete', completeSpy);\n      session.on('error', errorSpy);\n      session.on('aborted', abortedSpy);\n\n      adapterSession.emit('output', 'data');\n      adapterSession.emit('event', { type: 'test' });\n      adapterSession.emit('complete', {});\n      adapterSession.emit('error', new Error());\n      adapterSession.emit('aborted');\n\n      expect(outputSpy).toHaveBeenCalled();\n      expect(eventSpy).toHaveBeenCalled();\n      expect(completeSpy).toHaveBeenCalled();\n      expect(errorSpy).toHaveBeenCalled();\n      expect(abortedSpy).toHaveBeenCalled();\n    });\n\n    it('should forward events with all arguments', () => {\n      return new Promise<void>((resolve) => {\n        session.on('event', (arg1, arg2, arg3) => {\n          expect(arg1).toBe('first');\n          expect(arg2).toBe('second');\n          expect(arg3).toBe('third');\n          resolve();\n        });\n\n        adapterSession.emit('event', 'first', 'second', 'third');\n      });\n    });\n  });\n\n  // Removed: Trivial getter tests and TypeScript feature tests\n  // These tests verify that getters return properties, which adds no value\n  // The behavior is already tested through other tests that use these properties\n\n  describe('Metadata Tracking', () => {\n    it('should track session lifecycle', async () => {\n      const startTime = session.startedAt;\n\n      await session.send('Message 1');\n      const firstMessageTime = session.lastMessageAt!;\n\n      expect(firstMessageTime).toBeGreaterThanOrEqual(startTime);\n\n      await new Promise((resolve) => setTimeout(resolve, 10));\n\n      await session.send('Message 2');\n      const secondMessageTime = session.lastMessageAt!;\n\n      expect(secondMessageTime).toBeGreaterThan(firstMessageTime);\n      expect(session.messageCount).toBe(2);\n    });\n\n    it('should maintain accurate state across many messages', async () => {\n      const messageCount = 10;\n\n      for (let i = 1; i <= messageCount; i++) {\n        await session.send(`Message ${i}`);\n        expect(session.messageCount).toBe(i);\n      }\n\n      expect(session.messageCount).toBe(messageCount);\n      expect(session.sessionId).toBeDefined();\n      expect(session.lastMessageAt).toBeGreaterThanOrEqual(session.startedAt);\n    });\n  });\n\n  describe('Pre-set Session ID', () => {\n    it('should use provided session ID', () => {\n      const customSession = new Session(mockAdapter, new MockAdapterSession(), {\n        sessionId: 'pre-set-id-123',\n      });\n\n      expect(customSession.sessionId).toBe('pre-set-id-123');\n      expect(customSession.getSessionId()).toBe('pre-set-id-123');\n    });\n\n    it('should maintain pre-set session ID after messages', async () => {\n      const customSession = new Session(mockAdapter, adapterSession, {\n        sessionId: 'custom-id',\n      });\n\n      await customSession.send('Message');\n\n      expect(customSession.sessionId).toBe('custom-id');\n    });\n\n    it('should not override pre-set session ID', async () => {\n      const customSession = new Session(mockAdapter, adapterSession, {\n        sessionId: 'my-custom-id',\n      });\n\n      const result = await customSession.send('Test');\n\n      // Even if response has different session ID, wrapper should keep pre-set one\n      expect(customSession.sessionId).toBe('my-custom-id');\n    });\n  });\n\n  describe('Options Handling', () => {\n    it('should accept empty options', () => {\n      const emptySession = new Session(mockAdapter, new MockAdapterSession(), {});\n\n      expect(emptySession.sessionId).toBeUndefined();\n      expect(emptySession.messageCount).toBe(0);\n    });\n\n    it('should merge multiple option types', async () => {\n      const sessionOptions = {\n        timeout: 5000,\n        verbose: true,\n        logPath: '/logs',\n      };\n\n      const sendOptions = {\n        timeout: 10000, // Override\n        workingDirectory: '/work', // New option\n      };\n\n      const sessionWithOptions = new Session(mockAdapter, adapterSession, sessionOptions);\n      const sendSpy = vi.spyOn(adapterSession, 'send');\n\n      await sessionWithOptions.send('Test', sendOptions);\n\n      expect(sendSpy).toHaveBeenCalledWith(\n        'Test',\n        expect.objectContaining({\n          timeout: 10000,\n          verbose: true,\n          logPath: '/logs',\n          workingDirectory: '/work',\n        })\n      );\n    });\n  });\n\n  describe('Error Scenarios', () => {\n    it('should propagate errors from adapter session', async () => {\n      const errorSession = new MockAdapterSession();\n      errorSession.send = vi.fn().mockRejectedValue(new Error('Send failed'));\n\n      const sessionWithError = new Session(mockAdapter, errorSession, {});\n\n      await expect(sessionWithError.send('Test')).rejects.toThrow('Send failed');\n    });\n\n    it('should handle event forwarding errors gracefully', () => {\n      session.on('error', () => {\n        throw new Error('Listener error');\n      });\n\n      // Should not throw when adapter emits error\n      expect(() => {\n        adapterSession.emit('error', new Error('Adapter error'));\n      }).toThrow('Listener error'); // EventEmitter will throw listener errors\n    });\n\n    // Removed: Test for message count increment on error\n    // This tests implementation details of internal state management\n    // The important behavior (error propagation) is tested elsewhere\n  });\n});\n",
        "numLines": 477,
        "startLine": 1,
        "totalLines": 477
      }
    }
  },
  {
    "parentUuid": "fd39776c-fe3d-4380-a061-0e70d0e625c9",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_01NW9TqyrERmiGkohMB8mfss",
          "type": "tool_result",
          "content": "     1\u2192/**\n     2\u2192 * Tests for Claude CLI output parser\n     3\u2192 */\n     4\u2192\n     5\u2192import { describe, it, expect } from 'vitest';\n     6\u2192import { parseStreamOutput } from '../../../../src/adapters/claude/parser';\n     7\u2192import { ParseError } from '../../../../src/core/errors';\n     8\u2192import { z } from 'zod';\n     9\u2192\n    10\u2192describe('parseStreamOutput', () => {\n    11\u2192  describe('Basic Parsing', () => {\n    12\u2192    it('should parse result event', async () => {\n    13\u2192      const stdout = JSON.stringify({ type: 'result', result: 'Hello, world!', sessionId: 'test-123' });\n    14\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n    15\u2192\n    16\u2192      expect(response.output).toBe('Hello, world!');\n    17\u2192      expect(response.sessionId).toBe('test-123');\n    18\u2192      expect(response.status).toBe('success');\n    19\u2192      expect(response.exitCode).toBe(0);\n    20\u2192      expect(response.duration).toBe(100);\n    21\u2192    });\n    22\u2192\n    23\u2192    it('should extract from assistant message with text content', async () => {\n    24\u2192      const stdout = JSON.stringify({\n    25\u2192        type: 'assistant',\n    26\u2192        message: {\n    27\u2192          content: [{ type: 'text', text: 'Response text' }],\n    28\u2192        },\n    29\u2192        sessionId: 'sess-456',\n    30\u2192      });\n    31\u2192\n    32\u2192      const response = await parseStreamOutput(stdout, 200, 0);\n    33\u2192\n    34\u2192      expect(response.output).toBe('Response text');\n    35\u2192      expect(response.sessionId).toBe('sess-456');\n    36\u2192    });\n    37\u2192\n    38\u2192    it('should handle string content in assistant message', async () => {\n    39\u2192      const stdout = JSON.stringify({\n    40\u2192        type: 'assistant',\n    41\u2192        message: {\n    42\u2192          content: 'Direct string content',\n    43\u2192        },\n    44\u2192        session_id: 'snake-case-id',\n    45\u2192      });\n    46\u2192\n    47\u2192      const response = await parseStreamOutput(stdout, 150, 0);\n    48\u2192\n    49\u2192      expect(response.output).toBe('Direct string content');\n    50\u2192      expect(response.sessionId).toBe('snake-case-id');\n    51\u2192    });\n    52\u2192\n    53\u2192    it('should concatenate multiple text blocks', async () => {\n    54\u2192      const events = [\n    55\u2192        { type: 'assistant', message: { content: [{ type: 'text', text: 'Part 1 ' }] } },\n    56\u2192        { type: 'assistant', message: { content: [{ type: 'text', text: 'Part 2 ' }] } },\n    57\u2192        { type: 'assistant', message: { content: [{ type: 'text', text: 'Part 3' }] } },\n    58\u2192      ];\n    59\u2192\n    60\u2192      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n    61\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n    62\u2192\n    63\u2192      expect(response.output).toBe('Part 1 Part 2 Part 3');\n    64\u2192    });\n    65\u2192\n    66\u2192    it('should fallback to raw stdout if no events found', async () => {\n    67\u2192      const stdout = 'Plain text output without JSONL';\n    68\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n    69\u2192\n    70\u2192      expect(response.output).toBe('Plain text output without JSONL');\n    71\u2192    });\n    72\u2192\n    73\u2192    it('should return empty string if no output', async () => {\n    74\u2192      const stdout = '';\n    75\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n    76\u2192\n    77\u2192      expect(response.output).toBe('');\n    78\u2192    });\n    79\u2192  });\n    80\u2192\n    81\u2192  describe('Session ID Extraction', () => {\n    82\u2192    it('should extract camelCase sessionId', async () => {\n    83\u2192      const stdout = JSON.stringify({ type: 'result', result: 'test', sessionId: 'camel-123' });\n    84\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n    85\u2192\n    86\u2192      expect(response.sessionId).toBe('camel-123');\n    87\u2192    });\n    88\u2192\n    89\u2192    it('should extract snake_case session_id', async () => {\n    90\u2192      const stdout = JSON.stringify({ type: 'result', result: 'test', session_id: 'snake-456' });\n    91\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n    92\u2192\n    93\u2192      expect(response.sessionId).toBe('snake-456');\n    94\u2192    });\n    95\u2192\n    96\u2192    it('should update session ID from subsequent events', async () => {\n    97\u2192      const events = [\n    98\u2192        { type: 'start', sessionId: 'first-id' },\n    99\u2192        { type: 'result', result: 'output', sessionId: 'second-id' },\n   100\u2192      ];\n   101\u2192\n   102\u2192      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n   103\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   104\u2192\n   105\u2192      // Parser updates with each event, so last one wins\n   106\u2192      expect(response.sessionId).toBe('second-id');\n   107\u2192    });\n   108\u2192\n   109\u2192    it('should default to unknown if no session ID', async () => {\n   110\u2192      const stdout = JSON.stringify({ type: 'result', result: 'test' });\n   111\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   112\u2192\n   113\u2192      expect(response.sessionId).toBe('unknown');\n   114\u2192    });\n   115\u2192  });\n   116\u2192\n   117\u2192  describe('Tool Tracking', () => {\n   118\u2192    it('should extract tool names from tool.started events', async () => {\n   119\u2192      const events = [\n   120\u2192        { type: 'tool.started', toolName: 'Read', timestamp: Date.now() },\n   121\u2192        { type: 'tool.completed', toolName: 'Read' },\n   122\u2192        { type: 'result', result: 'done' },\n   123\u2192      ];\n   124\u2192\n   125\u2192      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n   126\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   127\u2192\n   128\u2192      expect(response.metadata?.toolsUsed).toEqual(['Read']);\n   129\u2192      expect(response.actions).toHaveLength(1);\n   130\u2192      expect(response.actions?.[0].type).toBe('tool');\n   131\u2192      expect(response.actions?.[0].description).toBe('Tool: Read');\n   132\u2192    });\n   133\u2192\n   134\u2192    it('should track multiple unique tools', async () => {\n   135\u2192      const events = [\n   136\u2192        { type: 'tool.started', toolName: 'Read' },\n   137\u2192        { type: 'tool.started', toolName: 'Write' },\n   138\u2192        { type: 'tool.started', toolName: 'Bash' },\n   139\u2192        { type: 'result', result: 'done' },\n   140\u2192      ];\n   141\u2192\n   142\u2192      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n   143\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   144\u2192\n   145\u2192      expect(response.metadata?.toolsUsed).toEqual(['Read', 'Write', 'Bash']);\n   146\u2192    });\n   147\u2192\n   148\u2192    it('should not duplicate tool names', async () => {\n   149\u2192      const events = [\n   150\u2192        { type: 'tool.started', toolName: 'Read' },\n   151\u2192        { type: 'tool.started', toolName: 'Read' },\n   152\u2192        { type: 'tool.started', toolName: 'Write' },\n   153\u2192        { type: 'tool.started', toolName: 'Read' },\n   154\u2192        { type: 'result', result: 'done' },\n   155\u2192      ];\n   156\u2192\n   157\u2192      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n   158\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   159\u2192\n   160\u2192      expect(response.metadata?.toolsUsed).toEqual(['Read', 'Write']);\n   161\u2192    });\n   162\u2192\n   163\u2192    it('should handle missing toolsUsed gracefully', async () => {\n   164\u2192      const stdout = JSON.stringify({ type: 'result', result: 'test' });\n   165\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   166\u2192\n   167\u2192      expect(response.metadata?.toolsUsed).toBeUndefined();\n   168\u2192    });\n   169\u2192  });\n   170\u2192\n   171\u2192  describe('File Modification Tracking', () => {\n   172\u2192    it('should extract file paths from file.modified events', async () => {\n   173\u2192      const events = [\n   174\u2192        { type: 'file.modified', path: '/path/to/file1.ts' },\n   175\u2192        { type: 'file.modified', path: '/path/to/file2.ts' },\n   176\u2192        { type: 'result', result: 'done' },\n   177\u2192      ];\n   178\u2192\n   179\u2192      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n   180\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   181\u2192\n   182\u2192      expect(response.metadata?.filesModified).toEqual(['/path/to/file1.ts', '/path/to/file2.ts']);\n   183\u2192    });\n   184\u2192\n   185\u2192    it('should not duplicate file paths', async () => {\n   186\u2192      const events = [\n   187\u2192        { type: 'file.modified', path: '/file.ts' },\n   188\u2192        { type: 'file.modified', path: '/other.ts' },\n   189\u2192        { type: 'file.modified', path: '/file.ts' },\n   190\u2192        { type: 'result', result: 'done' },\n   191\u2192      ];\n   192\u2192\n   193\u2192      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n   194\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   195\u2192\n   196\u2192      expect(response.metadata?.filesModified).toEqual(['/file.ts', '/other.ts']);\n   197\u2192    });\n   198\u2192  });\n   199\u2192\n   200\u2192  describe('Token Usage', () => {\n   201\u2192    it('should extract token usage from assistant message', async () => {\n   202\u2192      const stdout = JSON.stringify({\n   203\u2192        type: 'assistant',\n   204\u2192        message: {\n   205\u2192          content: 'Response',\n   206\u2192          usage: {\n   207\u2192            input_tokens: 100,\n   208\u2192            output_tokens: 50,\n   209\u2192          },\n   210\u2192          model: 'claude-3-opus',\n   211\u2192        },\n   212\u2192        sessionId: 'test',\n   213\u2192      });\n   214\u2192\n   215\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   216\u2192\n   217\u2192      expect(response.usage).toEqual({\n   218\u2192        inputTokens: 100,\n   219\u2192        outputTokens: 50,\n   220\u2192        totalTokens: 150,\n   221\u2192      });\n   222\u2192    });\n   223\u2192\n   224\u2192    it('should extract token usage from result event', async () => {\n   225\u2192      const stdout = JSON.stringify({\n   226\u2192        type: 'result',\n   227\u2192        result: 'Output',\n   228\u2192        usage: {\n   229\u2192          input_tokens: 200,\n   230\u2192          output_tokens: 100,\n   231\u2192        },\n   232\u2192      });\n   233\u2192\n   234\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   235\u2192\n   236\u2192      expect(response.usage).toEqual({\n   237\u2192        inputTokens: 200,\n   238\u2192        outputTokens: 100,\n   239\u2192        totalTokens: 300,\n   240\u2192      });\n   241\u2192    });\n   242\u2192\n   243\u2192    it('should accumulate token usage across multiple events', async () => {\n   244\u2192      const events = [\n   245\u2192        {\n   246\u2192          type: 'assistant',\n   247\u2192          message: {\n   248\u2192            content: 'Part 1',\n   249\u2192            usage: { input_tokens: 50, output_tokens: 25 },\n   250\u2192          },\n   251\u2192        },\n   252\u2192        {\n   253\u2192          type: 'assistant',\n   254\u2192          message: {\n   255\u2192            content: 'Part 2',\n   256\u2192            usage: { input_tokens: 30, output_tokens: 20 },\n   257\u2192          },\n   258\u2192        },\n   259\u2192        {\n   260\u2192          type: 'result',\n   261\u2192          result: 'Done',\n   262\u2192          usage: { input_tokens: 20, output_tokens: 10 },\n   263\u2192        },\n   264\u2192      ];\n   265\u2192\n   266\u2192      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n   267\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   268\u2192\n   269\u2192      expect(response.usage).toEqual({\n   270\u2192        inputTokens: 100,\n   271\u2192        outputTokens: 55,\n   272\u2192        totalTokens: 155,\n   273\u2192      });\n   274\u2192    });\n   275\u2192\n   276\u2192    it('should be undefined if no usage data', async () => {\n   277\u2192      const stdout = JSON.stringify({ type: 'result', result: 'test' });\n   278\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   279\u2192\n   280\u2192      expect(response.usage).toBeUndefined();\n   281\u2192    });\n   282\u2192  });\n   283\u2192\n   284\u2192  describe('Model Usage Tracking', () => {\n   285\u2192    it('should track usage by model', async () => {\n   286\u2192      const stdout = JSON.stringify({\n   287\u2192        type: 'assistant',\n   288\u2192        message: {\n   289\u2192          content: 'Response',\n   290\u2192          usage: { input_tokens: 100, output_tokens: 50 },\n   291\u2192          model: 'claude-3-opus-20240229',\n   292\u2192        },\n   293\u2192      });\n   294\u2192\n   295\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   296\u2192\n   297\u2192      expect(response.modelUsage).toBeDefined();\n   298\u2192      expect(response.modelUsage?.['claude-3-opus-20240229']).toEqual({\n   299\u2192        model: 'claude-3-opus-20240229',\n   300\u2192        inputTokens: 100,\n   301\u2192        outputTokens: 50,\n   302\u2192        totalTokens: 150,\n   303\u2192      });\n   304\u2192    });\n   305\u2192\n   306\u2192    it('should accumulate usage for same model', async () => {\n   307\u2192      const events = [\n   308\u2192        {\n   309\u2192          type: 'assistant',\n   310\u2192          message: {\n   311\u2192            content: 'Part 1',\n   312\u2192            usage: { input_tokens: 50, output_tokens: 25 },\n   313\u2192            model: 'claude-3-haiku',\n   314\u2192          },\n   315\u2192        },\n   316\u2192        {\n   317\u2192          type: 'assistant',\n   318\u2192          message: {\n   319\u2192            content: 'Part 2',\n   320\u2192            usage: { input_tokens: 30, output_tokens: 20 },\n   321\u2192            model: 'claude-3-haiku',\n   322\u2192          },\n   323\u2192        },\n   324\u2192      ];\n   325\u2192\n   326\u2192      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n   327\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   328\u2192\n   329\u2192      expect(response.modelUsage?.['claude-3-haiku']).toEqual({\n   330\u2192        model: 'claude-3-haiku',\n   331\u2192        inputTokens: 80,\n   332\u2192        outputTokens: 45,\n   333\u2192        totalTokens: 125,\n   334\u2192      });\n   335\u2192    });\n   336\u2192\n   337\u2192    it('should track multiple models separately', async () => {\n   338\u2192      const events = [\n   339\u2192        {\n   340\u2192          type: 'assistant',\n   341\u2192          message: {\n   342\u2192            content: 'Opus',\n   343\u2192            usage: { input_tokens: 100, output_tokens: 50 },\n   344\u2192            model: 'claude-3-opus',\n   345\u2192          },\n   346\u2192        },\n   347\u2192        {\n   348\u2192          type: 'assistant',\n   349\u2192          message: {\n   350\u2192            content: 'Haiku',\n   351\u2192            usage: { input_tokens: 20, output_tokens: 10 },\n   352\u2192            model: 'claude-3-haiku',\n   353\u2192          },\n   354\u2192        },\n   355\u2192      ];\n   356\u2192\n   357\u2192      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n   358\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   359\u2192\n   360\u2192      expect(response.modelUsage?.['claude-3-opus']).toBeDefined();\n   361\u2192      expect(response.modelUsage?.['claude-3-haiku']).toBeDefined();\n   362\u2192      expect(response.modelUsage?.['claude-3-opus'].totalTokens).toBe(150);\n   363\u2192      expect(response.modelUsage?.['claude-3-haiku'].totalTokens).toBe(30);\n   364\u2192    });\n   365\u2192  });\n   366\u2192\n   367\u2192  describe('Status and Exit Code', () => {\n   368\u2192    it('should set status to success for exit code 0', async () => {\n   369\u2192      const stdout = JSON.stringify({ type: 'result', result: 'done' });\n   370\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   371\u2192\n   372\u2192      expect(response.status).toBe('success');\n   373\u2192      expect(response.exitCode).toBe(0);\n   374\u2192    });\n   375\u2192\n   376\u2192    it('should set status to error for non-zero exit code', async () => {\n   377\u2192      const stdout = JSON.stringify({ type: 'result', result: 'failed' });\n   378\u2192      const response = await parseStreamOutput(stdout, 100, 1);\n   379\u2192\n   380\u2192      expect(response.status).toBe('error');\n   381\u2192      expect(response.exitCode).toBe(1);\n   382\u2192    });\n   383\u2192  });\n   384\u2192\n   385\u2192  describe('Error Handling', () => {\n   386\u2192    it('should extract error from error event', async () => {\n   387\u2192      const events = [\n   388\u2192        {\n   389\u2192          type: 'error',\n   390\u2192          code: 'VALIDATION_ERROR',\n   391\u2192          message: 'Invalid input provided',\n   392\u2192          details: { field: 'prompt' },\n   393\u2192        },\n   394\u2192      ];\n   395\u2192\n   396\u2192      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n   397\u2192      const response = await parseStreamOutput(stdout, 100, 1);\n   398\u2192\n   399\u2192      expect(response.status).toBe('error');\n   400\u2192      expect(response.error).toEqual({\n   401\u2192        code: 'VALIDATION_ERROR',\n   402\u2192        message: 'Invalid input provided',\n   403\u2192        details: { field: 'prompt' },\n   404\u2192      });\n   405\u2192    });\n   406\u2192\n   407\u2192    it('should extract error from execution_error event', async () => {\n   408\u2192      const events = [\n   409\u2192        {\n   410\u2192          type: 'execution_error',\n   411\u2192          code: 'TIMEOUT',\n   412\u2192          message: 'Request timed out',\n   413\u2192        },\n   414\u2192      ];\n   415\u2192\n   416\u2192      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n   417\u2192      const response = await parseStreamOutput(stdout, 100, 1);\n   418\u2192\n   419\u2192      expect(response.error).toEqual({\n   420\u2192        code: 'TIMEOUT',\n   421\u2192        message: 'Request timed out',\n   422\u2192        details: undefined,\n   423\u2192      });\n   424\u2192    });\n   425\u2192\n   426\u2192    it('should create NO_OUTPUT error if no output and no error event', async () => {\n   427\u2192      const stdout = '';\n   428\u2192      const response = await parseStreamOutput(stdout, 100, 1);\n   429\u2192\n   430\u2192      expect(response.error).toEqual({\n   431\u2192        code: 'NO_OUTPUT',\n   432\u2192        message: 'CLI exited with code 1 and produced no output',\n   433\u2192      });\n   434\u2192    });\n   435\u2192\n   436\u2192    it('should use output as error message if no error event', async () => {\n   437\u2192      const stdout = 'Some error output';\n   438\u2192      const response = await parseStreamOutput(stdout, 100, 1);\n   439\u2192\n   440\u2192      expect(response.error).toEqual({\n   441\u2192        code: 'EXECUTION_FAILED',\n   442\u2192        message: 'Some error output',\n   443\u2192      });\n   444\u2192    });\n   445\u2192  });\n   446\u2192\n   447\u2192  describe('Structured Output (JSON)', () => {\n   448\u2192    it('should parse JSON with responseSchema: true', async () => {\n   449\u2192      const stdout = JSON.stringify({\n   450\u2192        type: 'result',\n   451\u2192        result: '```json\\n{\"name\": \"test\", \"value\": 42}\\n```',\n   452\u2192      });\n   453\u2192\n   454\u2192      const response = await parseStreamOutput(stdout, 100, 0, true);\n   455\u2192\n   456\u2192      expect(response.output).toEqual({ name: 'test', value: 42 });\n   457\u2192    });\n   458\u2192\n   459\u2192    it('should validate with Zod schema', async () => {\n   460\u2192      const UserSchema = z.object({\n   461\u2192        name: z.string(),\n   462\u2192        age: z.number(),\n   463\u2192      });\n   464\u2192\n   465\u2192      const stdout = JSON.stringify({\n   466\u2192        type: 'result',\n   467\u2192        result: '{\"name\": \"Alice\", \"age\": 30}',\n   468\u2192      });\n   469\u2192\n   470\u2192      const response = await parseStreamOutput(stdout, 100, 0, UserSchema);\n   471\u2192\n   472\u2192      expect(response.output).toEqual({ name: 'Alice', age: 30 });\n   473\u2192    });\n   474\u2192\n   475\u2192    it('should throw ParseError for invalid JSON', async () => {\n   476\u2192      const stdout = JSON.stringify({\n   477\u2192        type: 'result',\n   478\u2192        result: 'Not valid JSON at all',\n   479\u2192      });\n   480\u2192\n   481\u2192      await expect(parseStreamOutput(stdout, 100, 0, true)).rejects.toThrow(ParseError);\n   482\u2192    });\n   483\u2192\n   484\u2192    it('should throw ParseError for schema validation failure', async () => {\n   485\u2192      const StrictSchema = z.object({\n   486\u2192        required: z.string(),\n   487\u2192      });\n   488\u2192\n   489\u2192      const stdout = JSON.stringify({\n   490\u2192        type: 'result',\n   491\u2192        result: '{\"wrong\": \"field\"}',\n   492\u2192      });\n   493\u2192\n   494\u2192      await expect(parseStreamOutput(stdout, 100, 0, StrictSchema)).rejects.toThrow(ParseError);\n   495\u2192    });\n   496\u2192\n   497\u2192    it('should extract JSON from code block', async () => {\n   498\u2192      const jsonInMarkdown = '```json\\n{\"status\": \"ok\", \"count\": 5}\\n```';\n   499\u2192      const stdout = JSON.stringify({ type: 'result', result: jsonInMarkdown });\n   500\u2192\n   501\u2192      const response = await parseStreamOutput(stdout, 100, 0, true);\n   502\u2192\n   503\u2192      expect(response.output).toEqual({ status: 'ok', count: 5 });\n   504\u2192    });\n   505\u2192  });\n   506\u2192\n   507\u2192  describe('Raw Output', () => {\n   508\u2192    it('should include raw stdout', async () => {\n   509\u2192      const stdout = JSON.stringify({ type: 'result', result: 'test' });\n   510\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   511\u2192\n   512\u2192      expect(response.raw?.stdout).toBe(stdout);\n   513\u2192    });\n   514\u2192\n   515\u2192    it('should include parsed events', async () => {\n   516\u2192      const event1 = { type: 'start', sessionId: 'test' };\n   517\u2192      const event2 = { type: 'result', result: 'done' };\n   518\u2192      const stdout = `${JSON.stringify(event1)}\\n${JSON.stringify(event2)}`;\n   519\u2192\n   520\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   521\u2192\n   522\u2192      expect(response.raw?.events).toHaveLength(2);\n   523\u2192      expect(response.raw?.events?.[0].type).toBe('start');\n   524\u2192      expect(response.raw?.events?.[1].type).toBe('result');\n   525\u2192    });\n   526\u2192\n   527\u2192    it('should set stderr to empty string', async () => {\n   528\u2192      const stdout = JSON.stringify({ type: 'result', result: 'test' });\n   529\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   530\u2192\n   531\u2192      expect(response.raw?.stderr).toBe('');\n   532\u2192    });\n   533\u2192  });\n   534\u2192\n   535\u2192  describe('Legacy Event Formats', () => {\n   536\u2192    it('should handle message.chunk events', async () => {\n   537\u2192      const events = [\n   538\u2192        { type: 'message.chunk', content: 'Chunk 1 ' },\n   539\u2192        { type: 'message.chunk', content: 'Chunk 2' },\n   540\u2192      ];\n   541\u2192\n   542\u2192      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n   543\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   544\u2192\n   545\u2192      expect(response.output).toBe('Chunk 1 Chunk 2');\n   546\u2192    });\n   547\u2192\n   548\u2192    it('should handle turn.completed events', async () => {\n   549\u2192      const stdout = JSON.stringify({\n   550\u2192        type: 'turn.completed',\n   551\u2192        message: 'Turn complete message',\n   552\u2192      });\n   553\u2192\n   554\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   555\u2192\n   556\u2192      expect(response.output).toBe('Turn complete message');\n   557\u2192    });\n   558\u2192\n   559\u2192    it('should prefer result over turn.completed', async () => {\n   560\u2192      const events = [\n   561\u2192        { type: 'turn.completed', message: 'Turn message' },\n   562\u2192        { type: 'result', result: 'Final result' },\n   563\u2192      ];\n   564\u2192\n   565\u2192      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n   566\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   567\u2192\n   568\u2192      expect(response.output).toBe('Final result');\n   569\u2192    });\n   570\u2192  });\n   571\u2192\n   572\u2192  describe('Edge Cases', () => {\n   573\u2192    it('should handle empty JSONL', async () => {\n   574\u2192      const stdout = '\\n\\n\\n';\n   575\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   576\u2192\n   577\u2192      // Falls back to raw stdout if no events\n   578\u2192      expect(response.output).toBe(stdout);\n   579\u2192    });\n   580\u2192\n   581\u2192    it('should handle malformed JSONL gracefully', async () => {\n   582\u2192      const stdout = '{invalid json}\\n{\"type\": \"result\", \"result\": \"valid\"}\\n{also invalid}';\n   583\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   584\u2192\n   585\u2192      expect(response.output).toBe('valid');\n   586\u2192    });\n   587\u2192\n   588\u2192    it('should handle mixed valid and invalid JSON lines', async () => {\n   589\u2192      const lines = [\n   590\u2192        '{\"type\": \"start\"}',\n   591\u2192        'not json',\n   592\u2192        '{\"type\": \"result\", \"result\": \"output\"}',\n   593\u2192        '{incomplete',\n   594\u2192      ];\n   595\u2192\n   596\u2192      const stdout = lines.join('\\n');\n   597\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   598\u2192\n   599\u2192      expect(response.output).toBe('output');\n   600\u2192      expect(response.raw?.events).toHaveLength(2);\n   601\u2192    });\n   602\u2192\n   603\u2192    it('should handle zero duration', async () => {\n   604\u2192      const stdout = JSON.stringify({ type: 'result', result: 'fast' });\n   605\u2192      const response = await parseStreamOutput(stdout, 0, 0);\n   606\u2192\n   607\u2192      expect(response.duration).toBe(0);\n   608\u2192    });\n   609\u2192\n   610\u2192    it('should handle very large output', async () => {\n   611\u2192      const largeResult = 'x'.repeat(100000);\n   612\u2192      const stdout = JSON.stringify({ type: 'result', result: largeResult });\n   613\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   614\u2192\n   615\u2192      expect(response.output).toBe(largeResult);\n   616\u2192      expect(response.output.length).toBe(100000);\n   617\u2192    });\n   618\u2192\n   619\u2192    it('should handle special characters in output', async () => {\n   620\u2192      const specialChars = 'Special chars: \\n\\t\\r\"\\'\\\\';\n   621\u2192      const stdout = JSON.stringify({ type: 'result', result: specialChars });\n   622\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   623\u2192\n   624\u2192      expect(response.output).toBe(specialChars);\n   625\u2192    });\n   626\u2192  });\n   627\u2192\n   628\u2192  describe('Metadata', () => {\n   629\u2192    it('should not include empty metadata fields', async () => {\n   630\u2192      const stdout = JSON.stringify({ type: 'result', result: 'test' });\n   631\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   632\u2192\n   633\u2192      expect(response.metadata?.toolsUsed).toBeUndefined();\n   634\u2192      expect(response.metadata?.filesModified).toBeUndefined();\n   635\u2192      expect(response.metadata?.tokensUsed).toBeUndefined();\n   636\u2192    });\n   637\u2192\n   638\u2192    it('should include tokensUsed if usage data exists', async () => {\n   639\u2192      const stdout = JSON.stringify({\n   640\u2192        type: 'result',\n   641\u2192        result: 'test',\n   642\u2192        usage: { input_tokens: 50, output_tokens: 25 },\n   643\u2192      });\n   644\u2192\n   645\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   646\u2192\n   647\u2192      expect(response.metadata?.tokensUsed).toBe(75);\n   648\u2192    });\n   649\u2192\n   650\u2192    it('should not include tokensUsed if zero', async () => {\n   651\u2192      const stdout = JSON.stringify({\n   652\u2192        type: 'result',\n   653\u2192        result: 'test',\n   654\u2192        usage: { input_tokens: 0, output_tokens: 0 },\n   655\u2192      });\n   656\u2192\n   657\u2192      const response = await parseStreamOutput(stdout, 100, 0);\n   658\u2192\n   659\u2192      expect(response.metadata?.tokensUsed).toBeUndefined();\n   660\u2192    });\n   661\u2192  });\n   662\u2192});\n   663\u2192\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"
        }
      ]
    },
    "uuid": "e2a1c219-8d12-4f08-8127-ca80bf09d62a",
    "timestamp": "2025-10-20T02:01:43.106Z",
    "toolUseResult": {
      "type": "text",
      "file": {
        "filePath": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/adapters/claude/parser.test.ts",
        "content": "/**\n * Tests for Claude CLI output parser\n */\n\nimport { describe, it, expect } from 'vitest';\nimport { parseStreamOutput } from '../../../../src/adapters/claude/parser';\nimport { ParseError } from '../../../../src/core/errors';\nimport { z } from 'zod';\n\ndescribe('parseStreamOutput', () => {\n  describe('Basic Parsing', () => {\n    it('should parse result event', async () => {\n      const stdout = JSON.stringify({ type: 'result', result: 'Hello, world!', sessionId: 'test-123' });\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.output).toBe('Hello, world!');\n      expect(response.sessionId).toBe('test-123');\n      expect(response.status).toBe('success');\n      expect(response.exitCode).toBe(0);\n      expect(response.duration).toBe(100);\n    });\n\n    it('should extract from assistant message with text content', async () => {\n      const stdout = JSON.stringify({\n        type: 'assistant',\n        message: {\n          content: [{ type: 'text', text: 'Response text' }],\n        },\n        sessionId: 'sess-456',\n      });\n\n      const response = await parseStreamOutput(stdout, 200, 0);\n\n      expect(response.output).toBe('Response text');\n      expect(response.sessionId).toBe('sess-456');\n    });\n\n    it('should handle string content in assistant message', async () => {\n      const stdout = JSON.stringify({\n        type: 'assistant',\n        message: {\n          content: 'Direct string content',\n        },\n        session_id: 'snake-case-id',\n      });\n\n      const response = await parseStreamOutput(stdout, 150, 0);\n\n      expect(response.output).toBe('Direct string content');\n      expect(response.sessionId).toBe('snake-case-id');\n    });\n\n    it('should concatenate multiple text blocks', async () => {\n      const events = [\n        { type: 'assistant', message: { content: [{ type: 'text', text: 'Part 1 ' }] } },\n        { type: 'assistant', message: { content: [{ type: 'text', text: 'Part 2 ' }] } },\n        { type: 'assistant', message: { content: [{ type: 'text', text: 'Part 3' }] } },\n      ];\n\n      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.output).toBe('Part 1 Part 2 Part 3');\n    });\n\n    it('should fallback to raw stdout if no events found', async () => {\n      const stdout = 'Plain text output without JSONL';\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.output).toBe('Plain text output without JSONL');\n    });\n\n    it('should return empty string if no output', async () => {\n      const stdout = '';\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.output).toBe('');\n    });\n  });\n\n  describe('Session ID Extraction', () => {\n    it('should extract camelCase sessionId', async () => {\n      const stdout = JSON.stringify({ type: 'result', result: 'test', sessionId: 'camel-123' });\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.sessionId).toBe('camel-123');\n    });\n\n    it('should extract snake_case session_id', async () => {\n      const stdout = JSON.stringify({ type: 'result', result: 'test', session_id: 'snake-456' });\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.sessionId).toBe('snake-456');\n    });\n\n    it('should update session ID from subsequent events', async () => {\n      const events = [\n        { type: 'start', sessionId: 'first-id' },\n        { type: 'result', result: 'output', sessionId: 'second-id' },\n      ];\n\n      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      // Parser updates with each event, so last one wins\n      expect(response.sessionId).toBe('second-id');\n    });\n\n    it('should default to unknown if no session ID', async () => {\n      const stdout = JSON.stringify({ type: 'result', result: 'test' });\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.sessionId).toBe('unknown');\n    });\n  });\n\n  describe('Tool Tracking', () => {\n    it('should extract tool names from tool.started events', async () => {\n      const events = [\n        { type: 'tool.started', toolName: 'Read', timestamp: Date.now() },\n        { type: 'tool.completed', toolName: 'Read' },\n        { type: 'result', result: 'done' },\n      ];\n\n      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.metadata?.toolsUsed).toEqual(['Read']);\n      expect(response.actions).toHaveLength(1);\n      expect(response.actions?.[0].type).toBe('tool');\n      expect(response.actions?.[0].description).toBe('Tool: Read');\n    });\n\n    it('should track multiple unique tools', async () => {\n      const events = [\n        { type: 'tool.started', toolName: 'Read' },\n        { type: 'tool.started', toolName: 'Write' },\n        { type: 'tool.started', toolName: 'Bash' },\n        { type: 'result', result: 'done' },\n      ];\n\n      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.metadata?.toolsUsed).toEqual(['Read', 'Write', 'Bash']);\n    });\n\n    it('should not duplicate tool names', async () => {\n      const events = [\n        { type: 'tool.started', toolName: 'Read' },\n        { type: 'tool.started', toolName: 'Read' },\n        { type: 'tool.started', toolName: 'Write' },\n        { type: 'tool.started', toolName: 'Read' },\n        { type: 'result', result: 'done' },\n      ];\n\n      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.metadata?.toolsUsed).toEqual(['Read', 'Write']);\n    });\n\n    it('should handle missing toolsUsed gracefully', async () => {\n      const stdout = JSON.stringify({ type: 'result', result: 'test' });\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.metadata?.toolsUsed).toBeUndefined();\n    });\n  });\n\n  describe('File Modification Tracking', () => {\n    it('should extract file paths from file.modified events', async () => {\n      const events = [\n        { type: 'file.modified', path: '/path/to/file1.ts' },\n        { type: 'file.modified', path: '/path/to/file2.ts' },\n        { type: 'result', result: 'done' },\n      ];\n\n      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.metadata?.filesModified).toEqual(['/path/to/file1.ts', '/path/to/file2.ts']);\n    });\n\n    it('should not duplicate file paths', async () => {\n      const events = [\n        { type: 'file.modified', path: '/file.ts' },\n        { type: 'file.modified', path: '/other.ts' },\n        { type: 'file.modified', path: '/file.ts' },\n        { type: 'result', result: 'done' },\n      ];\n\n      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.metadata?.filesModified).toEqual(['/file.ts', '/other.ts']);\n    });\n  });\n\n  describe('Token Usage', () => {\n    it('should extract token usage from assistant message', async () => {\n      const stdout = JSON.stringify({\n        type: 'assistant',\n        message: {\n          content: 'Response',\n          usage: {\n            input_tokens: 100,\n            output_tokens: 50,\n          },\n          model: 'claude-3-opus',\n        },\n        sessionId: 'test',\n      });\n\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.usage).toEqual({\n        inputTokens: 100,\n        outputTokens: 50,\n        totalTokens: 150,\n      });\n    });\n\n    it('should extract token usage from result event', async () => {\n      const stdout = JSON.stringify({\n        type: 'result',\n        result: 'Output',\n        usage: {\n          input_tokens: 200,\n          output_tokens: 100,\n        },\n      });\n\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.usage).toEqual({\n        inputTokens: 200,\n        outputTokens: 100,\n        totalTokens: 300,\n      });\n    });\n\n    it('should accumulate token usage across multiple events', async () => {\n      const events = [\n        {\n          type: 'assistant',\n          message: {\n            content: 'Part 1',\n            usage: { input_tokens: 50, output_tokens: 25 },\n          },\n        },\n        {\n          type: 'assistant',\n          message: {\n            content: 'Part 2',\n            usage: { input_tokens: 30, output_tokens: 20 },\n          },\n        },\n        {\n          type: 'result',\n          result: 'Done',\n          usage: { input_tokens: 20, output_tokens: 10 },\n        },\n      ];\n\n      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.usage).toEqual({\n        inputTokens: 100,\n        outputTokens: 55,\n        totalTokens: 155,\n      });\n    });\n\n    it('should be undefined if no usage data', async () => {\n      const stdout = JSON.stringify({ type: 'result', result: 'test' });\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.usage).toBeUndefined();\n    });\n  });\n\n  describe('Model Usage Tracking', () => {\n    it('should track usage by model', async () => {\n      const stdout = JSON.stringify({\n        type: 'assistant',\n        message: {\n          content: 'Response',\n          usage: { input_tokens: 100, output_tokens: 50 },\n          model: 'claude-3-opus-20240229',\n        },\n      });\n\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.modelUsage).toBeDefined();\n      expect(response.modelUsage?.['claude-3-opus-20240229']).toEqual({\n        model: 'claude-3-opus-20240229',\n        inputTokens: 100,\n        outputTokens: 50,\n        totalTokens: 150,\n      });\n    });\n\n    it('should accumulate usage for same model', async () => {\n      const events = [\n        {\n          type: 'assistant',\n          message: {\n            content: 'Part 1',\n            usage: { input_tokens: 50, output_tokens: 25 },\n            model: 'claude-3-haiku',\n          },\n        },\n        {\n          type: 'assistant',\n          message: {\n            content: 'Part 2',\n            usage: { input_tokens: 30, output_tokens: 20 },\n            model: 'claude-3-haiku',\n          },\n        },\n      ];\n\n      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.modelUsage?.['claude-3-haiku']).toEqual({\n        model: 'claude-3-haiku',\n        inputTokens: 80,\n        outputTokens: 45,\n        totalTokens: 125,\n      });\n    });\n\n    it('should track multiple models separately', async () => {\n      const events = [\n        {\n          type: 'assistant',\n          message: {\n            content: 'Opus',\n            usage: { input_tokens: 100, output_tokens: 50 },\n            model: 'claude-3-opus',\n          },\n        },\n        {\n          type: 'assistant',\n          message: {\n            content: 'Haiku',\n            usage: { input_tokens: 20, output_tokens: 10 },\n            model: 'claude-3-haiku',\n          },\n        },\n      ];\n\n      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.modelUsage?.['claude-3-opus']).toBeDefined();\n      expect(response.modelUsage?.['claude-3-haiku']).toBeDefined();\n      expect(response.modelUsage?.['claude-3-opus'].totalTokens).toBe(150);\n      expect(response.modelUsage?.['claude-3-haiku'].totalTokens).toBe(30);\n    });\n  });\n\n  describe('Status and Exit Code', () => {\n    it('should set status to success for exit code 0', async () => {\n      const stdout = JSON.stringify({ type: 'result', result: 'done' });\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.status).toBe('success');\n      expect(response.exitCode).toBe(0);\n    });\n\n    it('should set status to error for non-zero exit code', async () => {\n      const stdout = JSON.stringify({ type: 'result', result: 'failed' });\n      const response = await parseStreamOutput(stdout, 100, 1);\n\n      expect(response.status).toBe('error');\n      expect(response.exitCode).toBe(1);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should extract error from error event', async () => {\n      const events = [\n        {\n          type: 'error',\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input provided',\n          details: { field: 'prompt' },\n        },\n      ];\n\n      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n      const response = await parseStreamOutput(stdout, 100, 1);\n\n      expect(response.status).toBe('error');\n      expect(response.error).toEqual({\n        code: 'VALIDATION_ERROR',\n        message: 'Invalid input provided',\n        details: { field: 'prompt' },\n      });\n    });\n\n    it('should extract error from execution_error event', async () => {\n      const events = [\n        {\n          type: 'execution_error',\n          code: 'TIMEOUT',\n          message: 'Request timed out',\n        },\n      ];\n\n      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n      const response = await parseStreamOutput(stdout, 100, 1);\n\n      expect(response.error).toEqual({\n        code: 'TIMEOUT',\n        message: 'Request timed out',\n        details: undefined,\n      });\n    });\n\n    it('should create NO_OUTPUT error if no output and no error event', async () => {\n      const stdout = '';\n      const response = await parseStreamOutput(stdout, 100, 1);\n\n      expect(response.error).toEqual({\n        code: 'NO_OUTPUT',\n        message: 'CLI exited with code 1 and produced no output',\n      });\n    });\n\n    it('should use output as error message if no error event', async () => {\n      const stdout = 'Some error output';\n      const response = await parseStreamOutput(stdout, 100, 1);\n\n      expect(response.error).toEqual({\n        code: 'EXECUTION_FAILED',\n        message: 'Some error output',\n      });\n    });\n  });\n\n  describe('Structured Output (JSON)', () => {\n    it('should parse JSON with responseSchema: true', async () => {\n      const stdout = JSON.stringify({\n        type: 'result',\n        result: '```json\\n{\"name\": \"test\", \"value\": 42}\\n```',\n      });\n\n      const response = await parseStreamOutput(stdout, 100, 0, true);\n\n      expect(response.output).toEqual({ name: 'test', value: 42 });\n    });\n\n    it('should validate with Zod schema', async () => {\n      const UserSchema = z.object({\n        name: z.string(),\n        age: z.number(),\n      });\n\n      const stdout = JSON.stringify({\n        type: 'result',\n        result: '{\"name\": \"Alice\", \"age\": 30}',\n      });\n\n      const response = await parseStreamOutput(stdout, 100, 0, UserSchema);\n\n      expect(response.output).toEqual({ name: 'Alice', age: 30 });\n    });\n\n    it('should throw ParseError for invalid JSON', async () => {\n      const stdout = JSON.stringify({\n        type: 'result',\n        result: 'Not valid JSON at all',\n      });\n\n      await expect(parseStreamOutput(stdout, 100, 0, true)).rejects.toThrow(ParseError);\n    });\n\n    it('should throw ParseError for schema validation failure', async () => {\n      const StrictSchema = z.object({\n        required: z.string(),\n      });\n\n      const stdout = JSON.stringify({\n        type: 'result',\n        result: '{\"wrong\": \"field\"}',\n      });\n\n      await expect(parseStreamOutput(stdout, 100, 0, StrictSchema)).rejects.toThrow(ParseError);\n    });\n\n    it('should extract JSON from code block', async () => {\n      const jsonInMarkdown = '```json\\n{\"status\": \"ok\", \"count\": 5}\\n```';\n      const stdout = JSON.stringify({ type: 'result', result: jsonInMarkdown });\n\n      const response = await parseStreamOutput(stdout, 100, 0, true);\n\n      expect(response.output).toEqual({ status: 'ok', count: 5 });\n    });\n  });\n\n  describe('Raw Output', () => {\n    it('should include raw stdout', async () => {\n      const stdout = JSON.stringify({ type: 'result', result: 'test' });\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.raw?.stdout).toBe(stdout);\n    });\n\n    it('should include parsed events', async () => {\n      const event1 = { type: 'start', sessionId: 'test' };\n      const event2 = { type: 'result', result: 'done' };\n      const stdout = `${JSON.stringify(event1)}\\n${JSON.stringify(event2)}`;\n\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.raw?.events).toHaveLength(2);\n      expect(response.raw?.events?.[0].type).toBe('start');\n      expect(response.raw?.events?.[1].type).toBe('result');\n    });\n\n    it('should set stderr to empty string', async () => {\n      const stdout = JSON.stringify({ type: 'result', result: 'test' });\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.raw?.stderr).toBe('');\n    });\n  });\n\n  describe('Legacy Event Formats', () => {\n    it('should handle message.chunk events', async () => {\n      const events = [\n        { type: 'message.chunk', content: 'Chunk 1 ' },\n        { type: 'message.chunk', content: 'Chunk 2' },\n      ];\n\n      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.output).toBe('Chunk 1 Chunk 2');\n    });\n\n    it('should handle turn.completed events', async () => {\n      const stdout = JSON.stringify({\n        type: 'turn.completed',\n        message: 'Turn complete message',\n      });\n\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.output).toBe('Turn complete message');\n    });\n\n    it('should prefer result over turn.completed', async () => {\n      const events = [\n        { type: 'turn.completed', message: 'Turn message' },\n        { type: 'result', result: 'Final result' },\n      ];\n\n      const stdout = events.map((e) => JSON.stringify(e)).join('\\n');\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.output).toBe('Final result');\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('should handle empty JSONL', async () => {\n      const stdout = '\\n\\n\\n';\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      // Falls back to raw stdout if no events\n      expect(response.output).toBe(stdout);\n    });\n\n    it('should handle malformed JSONL gracefully', async () => {\n      const stdout = '{invalid json}\\n{\"type\": \"result\", \"result\": \"valid\"}\\n{also invalid}';\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.output).toBe('valid');\n    });\n\n    it('should handle mixed valid and invalid JSON lines', async () => {\n      const lines = [\n        '{\"type\": \"start\"}',\n        'not json',\n        '{\"type\": \"result\", \"result\": \"output\"}',\n        '{incomplete',\n      ];\n\n      const stdout = lines.join('\\n');\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.output).toBe('output');\n      expect(response.raw?.events).toHaveLength(2);\n    });\n\n    it('should handle zero duration', async () => {\n      const stdout = JSON.stringify({ type: 'result', result: 'fast' });\n      const response = await parseStreamOutput(stdout, 0, 0);\n\n      expect(response.duration).toBe(0);\n    });\n\n    it('should handle very large output', async () => {\n      const largeResult = 'x'.repeat(100000);\n      const stdout = JSON.stringify({ type: 'result', result: largeResult });\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.output).toBe(largeResult);\n      expect(response.output.length).toBe(100000);\n    });\n\n    it('should handle special characters in output', async () => {\n      const specialChars = 'Special chars: \\n\\t\\r\"\\'\\\\';\n      const stdout = JSON.stringify({ type: 'result', result: specialChars });\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.output).toBe(specialChars);\n    });\n  });\n\n  describe('Metadata', () => {\n    it('should not include empty metadata fields', async () => {\n      const stdout = JSON.stringify({ type: 'result', result: 'test' });\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.metadata?.toolsUsed).toBeUndefined();\n      expect(response.metadata?.filesModified).toBeUndefined();\n      expect(response.metadata?.tokensUsed).toBeUndefined();\n    });\n\n    it('should include tokensUsed if usage data exists', async () => {\n      const stdout = JSON.stringify({\n        type: 'result',\n        result: 'test',\n        usage: { input_tokens: 50, output_tokens: 25 },\n      });\n\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.metadata?.tokensUsed).toBe(75);\n    });\n\n    it('should not include tokensUsed if zero', async () => {\n      const stdout = JSON.stringify({\n        type: 'result',\n        result: 'test',\n        usage: { input_tokens: 0, output_tokens: 0 },\n      });\n\n      const response = await parseStreamOutput(stdout, 100, 0);\n\n      expect(response.metadata?.tokensUsed).toBeUndefined();\n    });\n  });\n});\n",
        "numLines": 663,
        "startLine": 1,
        "totalLines": 663
      }
    }
  },
  {
    "parentUuid": "e2a1c219-8d12-4f08-8127-ca80bf09d62a",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01UzoJbVai55nGn5zMXoW14f",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "thinking",
          "thinking": "The user said \"go ahead and implement\" which means they want me to proceed with the implementation. However, I'm still in plan mode, so I should now create a comprehensive plan with the unit test included and call ExitPlanMode.\n\nLooking at the test structure:\n1. Tests use vitest\n2. Parser tests focus on the parseStreamOutput function\n3. Tests for cli-wrapper would need to test the onOutput callback behavior\n\nFor this issue, I should write a test that:\n1. Simulates streaming output with both assistant messages and a result event\n2. Verifies that the text is NOT duplicated in the OutputData.text field\n3. Verifies that accumulatedText still contains the full output\n\nLet me structure a proper plan that includes:\n1. Fixing the cli-wrapper.ts to remove result event text extraction\n2. Writing a unit test to verify the fix",
          "signature": "EuQHCkYICBgCKkAUl+smJXwEiixnRRoHEvCWUskOoIIu2vOZY4jKw8DRpkCSYLmJFlr3xsRSeKp3GCzVxVkvxIxcsM+rsSw6dkH/EgwdOeGejx1j6TLHcogaDFriCaBMAvamiDOw5SIwB0yt4AMB92Sf7xII+to9HGgIzb/Aq5lUJ8GM8Sp7axEbp6IZOEDim3Pa70IgVLwSKssG2DyrWMssVtpowlQEOAo2niioS53OjXyjZlta8e+To/7SOKEi0rdPb85H5W32OGe5zCEGVdC5WCwiALSEH9zzwWaeGcXlBv872c+5ZGe2f/1oT9ByWEc3VSGujzg3dhdMpB6WwQzLSkq19FnP9muD1DGHw+xl3byD8GxavgACb2pHstfcYHPOb2zi0PiM3zssdgfxHm3dNMMbeLuV4KWUKcv48FkfkocwYy9ewP4izKx9KIF3IVvyff0KDFa6wnsRhQ0DkR23/hNmMftL2GPqt63Fm7qZtbnNJ62r2Tbo8vWod36hZ6uWX6FifexxncQfxQPAFBttpeW6imTCJ9rCvuvF6sPfZFE2c8nhYloptu+aZ8/lHJhCFuqzCYFENnKjU7PvM/fr3RjyrwTPWrEQnr0vHVefkdz8oN7Cw3LMzW54yTlQ8cb3rYy1fvB+Z2pw/GC4xQXziyRIffX+OFhjDMV4n9qKv1hI7DLstDrJU2C/7stvkLmP+nPFoKm2GPWzv9fpnZz/er1oDJEqAOdNkuTqpesDQrDaA2MMnU6MLBGvJcmTZU4sCeW6GwfgfMQ6fc2/S73KhzCUsPx65N7xCqixiwPuapWH2PsOTJJEm2lSGvENbg9HEi2hrPOHEB4EfpepPK5tqAqPSc6/+M17KICtLHA2ltesI7uevoOskjqvQBQrv5hRLArkxI4pUDfVscrmmSAlRhYwgR8pRqNWqbbs+BrAz6o0m1keF6l8FwHfp2w2BSKhtBa/ovsp1h3mfijXRdqsgJ3SbmPT/+Yr7USi6wFuzvVGeV0W3bIHHtWvDsNqJrPU2+LzssgWU/kHEnLLXKhrK69gySfyw1PMmWOxI5vwxyZvCkUz+dGfX1PvqyPc+jYyE/Jl4ALxh5GAq54JDmJgF0m21rwEg5kAQiIYYOauElWuAcIZcsmSrbM2duzhBAOYvd/c7L32IaKIo+9ugvHzNI1ziWMOmb+IrJMLenKLfuTVRhF9wyDHVQ5vlIRN7jQzt/bkWqiD4wOCDoAnIyeqUj2HBSaJxiOVitpORftdTah5DummwHeL6IzrPtpLbet9ZBAI4I46SZhwtfTZ3UZwVMhuQz+niFmi/Oly7GudhUMiYVHeGAE="
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 14,
        "cache_creation_input_tokens": 14455,
        "cache_read_input_tokens": 36047,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 14455,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdHfPxuQNS3BZJUWmwM",
    "type": "assistant",
    "uuid": "71b24ed2-f921-4e75-bd0f-24d4282fb384",
    "timestamp": "2025-10-20T02:01:51.412Z"
  },
  {
    "parentUuid": "71b24ed2-f921-4e75-bd0f-24d4282fb384",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01UzoJbVai55nGn5zMXoW14f",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "text",
          "text": "Perfect! Now I have a clear understanding of the test structure. Let me create a comprehensive plan that includes both the fix and a regression test."
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 14,
        "cache_creation_input_tokens": 14455,
        "cache_read_input_tokens": 36047,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 14455,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdHfPxuQNS3BZJUWmwM",
    "type": "assistant",
    "uuid": "d5b8c8bd-0164-4612-9bd2-b8c227a3c830",
    "timestamp": "2025-10-20T02:01:52.493Z"
  },
  {
    "parentUuid": "d5b8c8bd-0164-4612-9bd2-b8c227a3c830",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01UzoJbVai55nGn5zMXoW14f",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_01Xhi7nucWCBHERmhmnbgRVs",
          "name": "ExitPlanMode",
          "input": {
            "plan": "**Fix text duplication in streaming output + add regression test**\n\n## Problem\nIn `cli-wrapper.ts`, text is extracted from both `assistant` events (streaming) AND `result` events (final accumulated output), causing duplicate text in the `onOutput` callback.\n\n## Changes\n\n### 1. Fix `cli-wrapper.ts:137-140`\n**File:** `packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts`\n\nRemove lines 137-140 that extract text from `result` events:\n```typescript\n// Extract text from result events\nif (event.type === 'result' && event.result && typeof event.result === 'string') {\n  chunkText += event.result;\n}\n```\n\n**Reason:** The `result` event contains accumulated text that was already streamed via `assistant` events. Including it causes duplication in streaming scenarios.\n\n### 2. Add regression test\n**File:** `packages/agent-cli-sdk/tests/unit/adapters/claude/cli-wrapper.test.ts` (new file)\n\nCreate a unit test that:\n- Simulates a realistic streaming scenario with multiple `assistant` events followed by a `result` event\n- Verifies that `OutputData.text` does NOT contain duplicate text\n- Verifies that `OutputData.accumulated` correctly accumulates all text from `assistant` events only\n- Confirms the `result` event still emits through `onOutput` but doesn't contribute duplicate text\n\nThe test will verify that when Claude streams:\n1. Assistant event 1: \"Perfect! Let me start with the first question:\"\n2. Assistant event 2: \"**What's the purpose...\"\n3. Result event: \"Perfect! Let me start with the first question:**What's the purpose...\" (full accumulated text)\n\nThe onOutput callback should receive:\n- Chunk 1: text = \"Perfect! Let me start with the first question:\"\n- Chunk 2: text = \"**What's the purpose...\"\n- Chunk 3 (result): text = undefined (no duplicate)\n\nAnd `accumulated` should equal the full text (not doubled)."
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 14,
        "cache_creation_input_tokens": 14455,
        "cache_read_input_tokens": 36047,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 14455,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdHfPxuQNS3BZJUWmwM",
    "type": "assistant",
    "uuid": "f882df64-e356-4494-8305-7dadb0e08e0f",
    "timestamp": "2025-10-20T02:02:02.435Z"
  },
  {
    "parentUuid": "f882df64-e356-4494-8305-7dadb0e08e0f",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "type": "tool_result",
          "content": "User has approved your plan. You can now start coding. Start with updating your todo list if applicable",
          "tool_use_id": "toolu_01Xhi7nucWCBHERmhmnbgRVs"
        }
      ]
    },
    "uuid": "c2a3d374-d866-4534-84e0-c531b1575ffc",
    "timestamp": "2025-10-20T02:02:02.528Z",
    "toolUseResult": {
      "plan": "**Fix text duplication in streaming output + add regression test**\n\n## Problem\nIn `cli-wrapper.ts`, text is extracted from both `assistant` events (streaming) AND `result` events (final accumulated output), causing duplicate text in the `onOutput` callback.\n\n## Changes\n\n### 1. Fix `cli-wrapper.ts:137-140`\n**File:** `packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts`\n\nRemove lines 137-140 that extract text from `result` events:\n```typescript\n// Extract text from result events\nif (event.type === 'result' && event.result && typeof event.result === 'string') {\n  chunkText += event.result;\n}\n```\n\n**Reason:** The `result` event contains accumulated text that was already streamed via `assistant` events. Including it causes duplication in streaming scenarios.\n\n### 2. Add regression test\n**File:** `packages/agent-cli-sdk/tests/unit/adapters/claude/cli-wrapper.test.ts` (new file)\n\nCreate a unit test that:\n- Simulates a realistic streaming scenario with multiple `assistant` events followed by a `result` event\n- Verifies that `OutputData.text` does NOT contain duplicate text\n- Verifies that `OutputData.accumulated` correctly accumulates all text from `assistant` events only\n- Confirms the `result` event still emits through `onOutput` but doesn't contribute duplicate text\n\nThe test will verify that when Claude streams:\n1. Assistant event 1: \"Perfect! Let me start with the first question:\"\n2. Assistant event 2: \"**What's the purpose...\"\n3. Result event: \"Perfect! Let me start with the first question:**What's the purpose...\" (full accumulated text)\n\nThe onOutput callback should receive:\n- Chunk 1: text = \"Perfect! Let me start with the first question:\"\n- Chunk 2: text = \"**What's the purpose...\"\n- Chunk 3 (result): text = undefined (no duplicate)\n\nAnd `accumulated` should equal the full text (not doubled).",
      "isAgent": false
    }
  },
  {
    "parentUuid": "c2a3d374-d866-4534-84e0-c531b1575ffc",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01JLYamPkR5N8dvwLSePdA4C",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "thinking",
          "thinking": "Great! The user has approved the plan. Now I need to:\n\n1. Create a todo list to track the tasks\n2. Fix the cli-wrapper.ts file\n3. Write the regression test\n\nLet me start by creating the todo list, then proceed with the implementation.",
          "signature": "EpQDCkYICBgCKkAA+6+PnsWQsSNzXiZI0GAv3ZTjMzJ066xMrt1B3xCTKKafELomLN6F1/jn8YWy2Ymw7uNiuQ/j1vZm8gp8aMgYEgwLIdn8nPXY9ivDqHUaDOqSNP5a39qvz7A7tSIwpkxgCUlnoExl0KovtRNQihEX8ZgiVSnP4642DbEOF4ViisYZ7iOfLAJmp/H7JUjbKvsBWvnrK0xSwe05ZlQ2Rieq/HUKSP2BJyzUhd/Rv5RiL1JSy6bnz96l+9Rw4l7FH/tbuBWHfXC2RYr9WXuLIAMxsI/etQKepmKY/iuSoVDnUH4+VcnYepLYVcxa4owIVcyq2SERa8fiSYQ7DaLCSyUMTLWqT4YHZcZTJjbINBdsBjYKqKxsj/Nj4EtUETTqaDBQe8Pt4/4sREkX6zPrWALAsZ5CSmnHE41fKwTN38itn2LqIpi9KMIniOCHedhBXRt2Zj48jV+7CwugLVTq/y4qcYKqrYv6gWtZgV4Lar5RkwP6dWyA+1oS7RAuOmsBa2ygSzNwKCn2RD1VpCMYAQ=="
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 12,
        "cache_creation_input_tokens": 903,
        "cache_read_input_tokens": 50502,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 903,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 4,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdK6gm6z192igZ66fa9",
    "type": "assistant",
    "uuid": "145d6dd5-f3fc-4a26-97e2-aad38d311cba",
    "timestamp": "2025-10-20T02:02:06.599Z"
  },
  {
    "parentUuid": "145d6dd5-f3fc-4a26-97e2-aad38d311cba",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01JLYamPkR5N8dvwLSePdA4C",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_01DEtqhEQ4oaPrBRo8jwdaiX",
          "name": "TodoWrite",
          "input": {
            "todos": [
              {
                "content": "Remove result event text extraction from cli-wrapper.ts",
                "status": "pending",
                "activeForm": "Removing result event text extraction from cli-wrapper.ts"
              },
              {
                "content": "Create regression test for text duplication fix",
                "status": "pending",
                "activeForm": "Creating regression test for text duplication fix"
              },
              {
                "content": "Run tests to verify the fix",
                "status": "pending",
                "activeForm": "Running tests to verify the fix"
              }
            ]
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 12,
        "cache_creation_input_tokens": 903,
        "cache_read_input_tokens": 50502,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 903,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 4,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdK6gm6z192igZ66fa9",
    "type": "assistant",
    "uuid": "0ac52358-7ba4-4e95-87a1-7a67b19e5ebc",
    "timestamp": "2025-10-20T02:02:08.589Z"
  },
  {
    "parentUuid": "0ac52358-7ba4-4e95-87a1-7a67b19e5ebc",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_01DEtqhEQ4oaPrBRo8jwdaiX",
          "type": "tool_result",
          "content": "Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"
        }
      ]
    },
    "uuid": "d2873d18-8326-498c-a2f2-0d35a314081d",
    "timestamp": "2025-10-20T02:02:08.719Z",
    "toolUseResult": {
      "oldTodos": [],
      "newTodos": [
        {
          "content": "Remove result event text extraction from cli-wrapper.ts",
          "status": "pending",
          "activeForm": "Removing result event text extraction from cli-wrapper.ts"
        },
        {
          "content": "Create regression test for text duplication fix",
          "status": "pending",
          "activeForm": "Creating regression test for text duplication fix"
        },
        {
          "content": "Run tests to verify the fix",
          "status": "pending",
          "activeForm": "Running tests to verify the fix"
        }
      ]
    }
  },
  {
    "parentUuid": "d2873d18-8326-498c-a2f2-0d35a314081d",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_0113vveucqfRW5WgumBeT4PX",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "thinking",
          "thinking": "Good! Now let me update the first todo to in_progress and start fixing the cli-wrapper.ts file.",
          "signature": "EokCCkYICBgCKkCZ5TG69cJAT51RXSa3EupESPRcRsTsL0XJbJIS5lt5qjeFlWelAwxSuGPn2EIUo6Pg0CAbYyGqiwa7iZdOrpheEgzfLHJaA8UhhmEXticaDCiQEoJUdjsIj563PSIwSkQHQ1cUkIR9sxzR/2zuL1A3o4bZPBGfeeIVlOSKC3O56PwvbyDrIoJUckT/CzpwKnHkwYhF/noOl1T9cl9/SPGKWmnv58I5Hdg8l75+5mL4SGhnhyc+Tr8SkVawyLuKAN0iUVfoPM3G3xmvKSFd5z/lCLj07jJjZGCbFsz+U3IK0XAB+DLd3RQXrq9JYrTnFmwCB4bHQ/pUIC4UToYtIKnWYhgB"
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 12,
        "cache_creation_input_tokens": 273,
        "cache_read_input_tokens": 51405,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 273,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdKYo9TFiHQ343D8eZX",
    "type": "assistant",
    "uuid": "fe38bedf-bff0-4736-b41b-93df67802cdf",
    "timestamp": "2025-10-20T02:02:11.694Z"
  },
  {
    "parentUuid": "fe38bedf-bff0-4736-b41b-93df67802cdf",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_0113vveucqfRW5WgumBeT4PX",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_01UGWsX1wn74K4pXBUG4dpwi",
          "name": "TodoWrite",
          "input": {
            "todos": [
              {
                "content": "Remove result event text extraction from cli-wrapper.ts",
                "status": "in_progress",
                "activeForm": "Removing result event text extraction from cli-wrapper.ts"
              },
              {
                "content": "Create regression test for text duplication fix",
                "status": "pending",
                "activeForm": "Creating regression test for text duplication fix"
              },
              {
                "content": "Run tests to verify the fix",
                "status": "pending",
                "activeForm": "Running tests to verify the fix"
              }
            ]
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 12,
        "cache_creation_input_tokens": 273,
        "cache_read_input_tokens": 51405,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 273,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdKYo9TFiHQ343D8eZX",
    "type": "assistant",
    "uuid": "ca4900a1-dc50-4d6d-82ad-56aa1376b9a1",
    "timestamp": "2025-10-20T02:02:12.620Z"
  },
  {
    "parentUuid": "ca4900a1-dc50-4d6d-82ad-56aa1376b9a1",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_01UGWsX1wn74K4pXBUG4dpwi",
          "type": "tool_result",
          "content": "Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"
        }
      ]
    },
    "uuid": "c1b0319c-bda0-4510-ae31-8523eb2756c8",
    "timestamp": "2025-10-20T02:02:12.746Z",
    "toolUseResult": {
      "oldTodos": [
        {
          "content": "Remove result event text extraction from cli-wrapper.ts",
          "status": "pending",
          "activeForm": "Removing result event text extraction from cli-wrapper.ts"
        },
        {
          "content": "Create regression test for text duplication fix",
          "status": "pending",
          "activeForm": "Creating regression test for text duplication fix"
        },
        {
          "content": "Run tests to verify the fix",
          "status": "pending",
          "activeForm": "Running tests to verify the fix"
        }
      ],
      "newTodos": [
        {
          "content": "Remove result event text extraction from cli-wrapper.ts",
          "status": "in_progress",
          "activeForm": "Removing result event text extraction from cli-wrapper.ts"
        },
        {
          "content": "Create regression test for text duplication fix",
          "status": "pending",
          "activeForm": "Creating regression test for text duplication fix"
        },
        {
          "content": "Run tests to verify the fix",
          "status": "pending",
          "activeForm": "Running tests to verify the fix"
        }
      ]
    }
  },
  {
    "parentUuid": "c1b0319c-bda0-4510-ae31-8523eb2756c8",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01SXnuq9EK5tfZyhn2CBz6EY",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "thinking",
          "thinking": "Now let me fix the cli-wrapper.ts file by removing the lines that extract text from result events.",
          "signature": "EowCCkYICBgCKkCLn+mOuXY5pgDK+/F52ePcqMDMYjCdB6mq2QKdXGSth5avMzZxDYoRNaK9IeEtguRRhX0kdX5mlsMHysm8XvQLEgxaDU0sYuWyLGwoRUMaDNYplOBujWhew5CUwCIwxGksqWQxxaDsKeJeWUOqON6i6TxA3IRvv6IGvdEwNso7JESyXXHk8i3j0AkDj7aAKnRGvhqKct0LCUnIf1Iw3ACNnsrrxLPH4x59CbJ3NOoZ+gjIV+ERHenhr18EYuyigRzpzgXiFsl9hmWWRLqZX2Xkj60G8AqfdxycZzamotdIogtd+jKHMOOTyqRnoy39ycGRvNJHrnJprbLzHAvox97UixAflRgB"
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 12,
        "cache_creation_input_tokens": 240,
        "cache_read_input_tokens": 51678,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 240,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdKr7wV7J6RqyieZPFv",
    "type": "assistant",
    "uuid": "c4e51b45-218c-49fd-9d13-4ef4bc371c42",
    "timestamp": "2025-10-20T02:02:15.487Z"
  },
  {
    "parentUuid": "c4e51b45-218c-49fd-9d13-4ef4bc371c42",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01SXnuq9EK5tfZyhn2CBz6EY",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "text",
          "text": "Now I'll fix the text duplication issue in cli-wrapper.ts:"
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 12,
        "cache_creation_input_tokens": 240,
        "cache_read_input_tokens": 51678,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 240,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdKr7wV7J6RqyieZPFv",
    "type": "assistant",
    "uuid": "d1f7e2b5-59d5-45de-b56f-dc6f63e2dbf7",
    "timestamp": "2025-10-20T02:02:15.880Z"
  },
  {
    "parentUuid": "d1f7e2b5-59d5-45de-b56f-dc6f63e2dbf7",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01SXnuq9EK5tfZyhn2CBz6EY",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_01JHCLLPc5wG1vGfrV6GuRJ8",
          "name": "Edit",
          "input": {
            "file_path": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts",
            "old_string": "          }\n\n          // Extract text from result events\n          if (event.type === 'result' && event.result && typeof event.result === 'string') {\n            chunkText += event.result;\n          }\n\n          // onEvent handling (if provided)",
            "new_string": "          }\n\n          // onEvent handling (if provided)"
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 12,
        "cache_creation_input_tokens": 240,
        "cache_read_input_tokens": 51678,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 240,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdKr7wV7J6RqyieZPFv",
    "type": "assistant",
    "uuid": "3d09c6d8-bad4-451d-a3c4-a5c5f5425d13",
    "timestamp": "2025-10-20T02:02:18.703Z"
  },
  {
    "type": "file-history-snapshot",
    "messageId": "3d09c6d8-bad4-451d-a3c4-a5c5f5425d13",
    "snapshot": {
      "messageId": "63922b84-58b7-45b4-8406-044e8ce7c083",
      "trackedFileBackups": {
        "packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts": {
          "backupFileName": "1c21a7e6a151d2f5@v1",
          "version": 1,
          "backupTime": "2025-10-20T02:02:18.832Z"
        }
      },
      "timestamp": "2025-10-20T02:01:30.826Z"
    },
    "isSnapshotUpdate": true
  },
  {
    "parentUuid": "3d09c6d8-bad4-451d-a3c4-a5c5f5425d13",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_01JHCLLPc5wG1vGfrV6GuRJ8",
          "type": "tool_result",
          "content": "The file /Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n   131\u2192                  chunkText += block.text;\n   132\u2192                }\n   133\u2192              }\n   134\u2192            }\n   135\u2192          }\n   136\u2192\n   137\u2192          // onEvent handling (if provided)\n   138\u2192          if (options.onEvent) {\n   139\u2192            // Emit synthetic turn.started event when we see the first assistant message\n   140\u2192            if (!turnStarted && event.type === 'assistant') {\n   141\u2192              turnStarted = true;"
        }
      ]
    },
    "uuid": "2e1659d7-6c2b-41fe-bbd6-5e2bd0e85492",
    "timestamp": "2025-10-20T02:02:18.843Z",
    "toolUseResult": {
      "filePath": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts",
      "oldString": "          }\n\n          // Extract text from result events\n          if (event.type === 'result' && event.result && typeof event.result === 'string') {\n            chunkText += event.result;\n          }\n\n          // onEvent handling (if provided)",
      "newString": "          }\n\n          // onEvent handling (if provided)",
      "originalFile": "/**\n * Claude CLI wrapper for process execution\n */\n\nimport type { ClaudeExecutionOptions } from '../../types';\nimport type { SpawnResult } from '../../utils';\nimport { spawnProcess } from '../../utils';\n\n/**\n * Build Claude CLI arguments from options\n */\nexport function buildClaudeArgs(\n  prompt: string,\n  options: ClaudeExecutionOptions\n): string[] {\n  const args: string[] = [];\n\n  // Programmatic mode (non-interactive)\n  args.push('-p');\n\n  // Model selection\n  if (options.model) {\n    args.push('--model', options.model);\n  }\n\n  // Session management (sessionId, continue, and resume are mutually exclusive)\n  if (options.sessionId && options.resume) {\n    // Resume an existing session with specific ID\n    args.push('--resume', options.sessionId);\n  } else if (options.sessionId) {\n    // Create new session with specific ID\n    args.push('--session-id', options.sessionId);\n  } else if (options.continue) {\n    args.push('--continue');\n  }\n\n  // Permission mode\n  if (options.permissionMode) {\n    args.push('--permission-mode', options.permissionMode);\n  } else if (options.dangerouslySkipPermissions) {\n    args.push('--permission-mode', 'acceptEdits');\n  }\n\n  // Output format (stream-json requires --verbose)\n  const useStreamJson = options.streaming !== false;\n  if (useStreamJson) {\n    args.push('--output-format', 'stream-json');\n    args.push('--verbose'); // Required for stream-json\n  } else if (options.verbose) {\n    args.push('--verbose');\n  }\n\n  // Tool settings\n  if (options.toolSettings?.allowedTools) {\n    args.push('--allowed-tools', options.toolSettings.allowedTools.join(','));\n  }\n  if (options.toolSettings?.disallowedTools) {\n    args.push(\n      '--disallowed-tools',\n      options.toolSettings.disallowedTools.join(',')\n    );\n  }\n\n  // Images\n  if (options.images && options.images.length > 0) {\n    for (const image of options.images) {\n      args.push('-i', image.path);\n    }\n  }\n\n  // Prompt (must be last)\n  args.push(prompt);\n\n  return args;\n}\n\n/**\n * Execute Claude CLI\n */\nexport async function executeClaudeCLI(\n  cliPath: string,\n  prompt: string,\n  options: ClaudeExecutionOptions\n): Promise<SpawnResult> {\n  const args = buildClaudeArgs(prompt, options);\n\n  // Set up environment\n  let env: Record<string, string> | undefined;\n\n  if (options.apiKey || options.oauthToken) {\n    const envVars: Record<string, string> = {};\n    if (typeof options.apiKey === 'string') {\n      envVars['ANTHROPIC_API_KEY'] = options.apiKey;\n    }\n    if (typeof options.oauthToken === 'string') {\n      envVars['CLAUDE_CODE_OAUTH_TOKEN'] = options.oauthToken;\n    }\n    env = envVars;\n  }\n\n  // Set up JSONL parsing and OutputData creation\n  let lineBuffer = '';\n  let onStdout: ((chunk: string) => void) | undefined;\n  let turnStarted = false;\n  let accumulatedText = ''; // Track all text accumulated so far\n\n  if (options.onEvent || options.onOutput) {\n    onStdout = (chunk: string) => {\n      // Parse JSONL events from this chunk\n      const chunkEvents: import('../../types').StreamEvent[] = [];\n      let chunkText = '';\n\n      lineBuffer += chunk;\n      const lines = lineBuffer.split('\\n');\n      lineBuffer = lines.pop() || '';\n\n      for (const line of lines) {\n        const trimmed = line.trim();\n        if (!trimmed) continue;\n\n        try {\n          const event = JSON.parse(trimmed);\n          chunkEvents.push(event);\n\n          // Extract text from assistant messages\n          if (event.type === 'assistant' && event.message?.content) {\n            const content = event.message.content;\n            if (Array.isArray(content)) {\n              for (const block of content) {\n                if (block.type === 'text' && block.text) {\n                  chunkText += block.text;\n                }\n              }\n            }\n          }\n\n          // Extract text from result events\n          if (event.type === 'result' && event.result && typeof event.result === 'string') {\n            chunkText += event.result;\n          }\n\n          // onEvent handling (if provided)\n          if (options.onEvent) {\n            // Emit synthetic turn.started event when we see the first assistant message\n            if (!turnStarted && event.type === 'assistant') {\n              turnStarted = true;\n              options.onEvent({\n                type: 'turn.started',\n                timestamp: event.timestamp || Date.now(),\n              });\n            }\n\n            // Emit the original event\n            options.onEvent(event);\n\n            // Also emit synthetic 'text' and tool events for assistant message content\n            // This provides backward compatibility with tests expecting these event types\n            if (event.type === 'assistant' && event.message?.content) {\n              const content = event.message.content;\n              if (Array.isArray(content)) {\n                for (const block of content) {\n                  // Emit text events\n                  if (block.type === 'text' && block.text) {\n                    options.onEvent({\n                      type: 'text',\n                      data: block.text,\n                      timestamp: event.timestamp || Date.now(),\n                    });\n                  }\n                  // Emit tool.started events for tool_use blocks\n                  if (block.type === 'tool_use' && block.name) {\n                    options.onEvent({\n                      type: 'tool.started',\n                      data: {\n                        toolName: block.name,\n                        name: block.name,\n                        id: block.id,\n                        input: block.input,\n                      },\n                      timestamp: event.timestamp || Date.now(),\n                    });\n                  }\n                }\n              }\n            }\n\n            // Emit tool.completed for user messages (which contain tool_result blocks)\n            if (event.type === 'user' && event.message?.content) {\n              const content = event.message.content;\n              if (Array.isArray(content)) {\n                for (const block of content) {\n                  if (block.type === 'tool_result' && block.tool_use_id) {\n                    options.onEvent({\n                      type: 'tool.completed',\n                      data: {\n                        toolId: block.tool_use_id,\n                        result: block.content,\n                        isError: block.is_error || false,\n                      },\n                      timestamp: event.timestamp || Date.now(),\n                    });\n                  }\n                }\n              }\n            }\n\n            // Emit synthetic turn.completed event when we see the result\n            if (event.type === 'result') {\n              options.onEvent({\n                type: 'turn.completed',\n                timestamp: event.timestamp || Date.now(),\n              });\n            }\n          }\n        } catch {\n          // Not valid JSON, skip line\n        }\n      }\n\n      // Update accumulated text\n      if (chunkText) {\n        accumulatedText += chunkText;\n      }\n\n      // Call onOutput with enhanced OutputData\n      if (options.onOutput) {\n        options.onOutput({\n          raw: chunk,\n          events: chunkEvents.length > 0 ? chunkEvents : undefined,\n          text: chunkText || undefined,\n          accumulated: accumulatedText,\n        });\n      }\n    };\n  }\n\n  return spawnProcess(cliPath, {\n    args,\n    cwd: options.workingDir,\n    env,\n    timeout: options.timeout,\n    onStdout,\n    onStderr: (chunk: string) => {\n      if (options.verbose) {\n        process.stderr.write(chunk);\n      }\n    },\n  });\n}\n",
      "structuredPatch": [
        {
          "oldStart": 134,
          "oldLines": 11,
          "newStart": 134,
          "newLines": 6,
          "lines": [
            "             }",
            "           }",
            " ",
            "-          // Extract text from result events",
            "-          if (event.type === 'result' && event.result && typeof event.result === 'string') {",
            "-            chunkText += event.result;",
            "-          }",
            "-",
            "           // onEvent handling (if provided)",
            "           if (options.onEvent) {",
            "             // Emit synthetic turn.started event when we see the first assistant message"
          ]
        }
      ],
      "userModified": false,
      "replaceAll": false
    }
  },
  {
    "parentUuid": "2e1659d7-6c2b-41fe-bbd6-5e2bd0e85492",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_012QeaC8QAfjVrBEZyhquwms",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "thinking",
          "thinking": "Good! I've successfully removed the lines that were causing the text duplication. Now let me mark that todo as completed and move on to creating the regression test.",
          "signature": "EtACCkYICBgCKkD9+Ct6ustXFHowY2jqNLyJ1653YDkQvs3MuPkRCZwKZIWTbH3KYDC/py6dmCkjKn/98+xh+BFNL9AtjHPahn0wEgzxxpLNGfy/Y353z/MaDDsxITzETUkoOOgxUyIwnXU2leBZJQHFANdIDlZuiXmLFYBOxvbXYN5b0P51yBNiwja/555nCrVqIHMy32h3KrcB+o388fdrEBrzPUyLHH/fZl3AFgaNLdfu2iOeLe+yddbRJ0n4iGid+WgXyhEc3N+OUwxZ/68jufr4aQp40onXX1V7sva26HxVbPnbh90tVcRfgqwBhIfutTVTnA60Gk4nD+BDC9UzQ78R+OvIhmMkj3YWI2CXGTI6P+Gt8g0MpMjXJ4Dgf/35luPZhlPB5r+nAsOlbBuj2il1fWKvg7i4fJ5/T2Hr1Kwws2cOK8GVPIgAC28gpKLdGAE="
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 11,
        "cache_creation_input_tokens": 452,
        "cache_read_input_tokens": 51918,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 452,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 4,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdLJYBAeyRAy2CoGToi",
    "type": "assistant",
    "uuid": "72763cec-cd2f-4fe1-b9a6-02a4d575382b",
    "timestamp": "2025-10-20T02:02:21.939Z"
  },
  {
    "parentUuid": "72763cec-cd2f-4fe1-b9a6-02a4d575382b",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_012QeaC8QAfjVrBEZyhquwms",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_01KwToDhWiPAGe2o6NeayNp7",
          "name": "TodoWrite",
          "input": {
            "todos": [
              {
                "content": "Remove result event text extraction from cli-wrapper.ts",
                "status": "completed",
                "activeForm": "Removing result event text extraction from cli-wrapper.ts"
              },
              {
                "content": "Create regression test for text duplication fix",
                "status": "in_progress",
                "activeForm": "Creating regression test for text duplication fix"
              },
              {
                "content": "Run tests to verify the fix",
                "status": "pending",
                "activeForm": "Running tests to verify the fix"
              }
            ]
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 11,
        "cache_creation_input_tokens": 452,
        "cache_read_input_tokens": 51918,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 452,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 4,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdLJYBAeyRAy2CoGToi",
    "type": "assistant",
    "uuid": "5213888e-74e1-4c6a-a959-bd79c6ef1f7c",
    "timestamp": "2025-10-20T02:02:22.835Z"
  },
  {
    "parentUuid": "5213888e-74e1-4c6a-a959-bd79c6ef1f7c",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_01KwToDhWiPAGe2o6NeayNp7",
          "type": "tool_result",
          "content": "Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"
        }
      ]
    },
    "uuid": "18901cab-51aa-42af-b8ac-2dc6b565af89",
    "timestamp": "2025-10-20T02:02:22.949Z",
    "toolUseResult": {
      "oldTodos": [
        {
          "content": "Remove result event text extraction from cli-wrapper.ts",
          "status": "in_progress",
          "activeForm": "Removing result event text extraction from cli-wrapper.ts"
        },
        {
          "content": "Create regression test for text duplication fix",
          "status": "pending",
          "activeForm": "Creating regression test for text duplication fix"
        },
        {
          "content": "Run tests to verify the fix",
          "status": "pending",
          "activeForm": "Running tests to verify the fix"
        }
      ],
      "newTodos": [
        {
          "content": "Remove result event text extraction from cli-wrapper.ts",
          "status": "completed",
          "activeForm": "Removing result event text extraction from cli-wrapper.ts"
        },
        {
          "content": "Create regression test for text duplication fix",
          "status": "in_progress",
          "activeForm": "Creating regression test for text duplication fix"
        },
        {
          "content": "Run tests to verify the fix",
          "status": "pending",
          "activeForm": "Running tests to verify the fix"
        }
      ]
    }
  },
  {
    "parentUuid": "18901cab-51aa-42af-b8ac-2dc6b565af89",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01AhbxtSQvJQdWcsUdXrkUsx",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "thinking",
          "thinking": "Now I need to create a regression test. Let me write a test file for cli-wrapper.ts. I'll create a new test file at `packages/agent-cli-sdk/tests/unit/adapters/claude/cli-wrapper.test.ts`.\n\nLooking at the existing tests, I can see they use vitest. The test should:\n1. Mock the spawnProcess function\n2. Simulate streaming output with assistant events and a result event\n3. Track the onOutput calls\n4. Verify that text is not duplicated\n\nLet me write this test.",
          "signature": "EvcECkYICBgCKkC7jKMIKsig/lzVDnqi72AabD7gLKcPBZvl/gAswVgefq/SIfnonVgAnRJSKk3ExQgQn2UsjugGuUj5jVem7TK6EgyGM+XQxISu6sDLNv4aDI2au8YykYTX7BV3SiIwAPlK1jav5ZLa7qTn92E8Swk9aIz4JRjUdb00NOEMlgp/G1sgR5Qa/YHQc85oC0W7Kt4DWQKmoJZASjoi3PxFw05lgqRBE+UVvpfQW3djxscAfieOFQACfRl3zCBkyuw0wAQQkGlOBRnoIp+B2E/L/Xr2WPl2fYKKjjmn1Tn8TfW7nmpSTF6citco8CYis+DFV/LQkiiJcQaH1ONLkcCwOxG5JHVNfb8YJ/V4/fR3gxzAb9IaC8WiV7SLNdQ16uEE0ODHbfgkMYXcGpfM4PMwdrLx7ptk5kWby3OAbwWJrATmFpaced3XiodPNw8HxGmAQHdIsLGyI1zz1E8ZbbZqjRJxLVfXX/bQnsCqJlDxreJTk/I3W7nhuBGb5/vkpIQKRdEV8JvQzd4P1NY3Zs/6e6ZgBcPPwgvIMRUEzmuBRhr+ZyYUseg7eukcEqrPpcqqCaZGZhd2wHs3O5iiyjby1Gywp5Blpr0E9CthdjSpRYvzjDArYdEGuqg1fJTCLWByQAR6md4/j/uyoWHyFcITlOZF8jEWIodVDdPRCzH6FYk92RzwbHT+pX5xWofk4003hcOCtn83xwCan76LjXivijiy76+KnpI3K9wyQhe4tSE0VxYBM0jcIft1QgFKdi0yMF81j7ThCd2IngEACJOOTcmO/snpkwQNIwMDwDcgjmSXxtQKvjpPtb3yXtJSuPnS0BgB"
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 11,
        "cache_creation_input_tokens": 249,
        "cache_read_input_tokens": 52370,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 249,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 9,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdLbindYxbNAG7CSU7o",
    "type": "assistant",
    "uuid": "bca92e13-76b8-4685-9a49-5c567fb4a99f",
    "timestamp": "2025-10-20T02:02:28.604Z"
  },
  {
    "parentUuid": "bca92e13-76b8-4685-9a49-5c567fb4a99f",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01AhbxtSQvJQdWcsUdXrkUsx",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "text",
          "text": "Now I'll create a regression test to ensure the text duplication is fixed:"
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 11,
        "cache_creation_input_tokens": 249,
        "cache_read_input_tokens": 52370,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 249,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 9,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdLbindYxbNAG7CSU7o",
    "type": "assistant",
    "uuid": "fd2499b5-74e3-437c-986e-c7a183c46f52",
    "timestamp": "2025-10-20T02:02:28.918Z"
  },
  {
    "parentUuid": "fd2499b5-74e3-437c-986e-c7a183c46f52",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01AhbxtSQvJQdWcsUdXrkUsx",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_017GFQP9vBxVtWbPBLR27ssa",
          "name": "Write",
          "input": {
            "file_path": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/adapters/claude/cli-wrapper.test.ts",
            "content": "/**\n * Tests for Claude CLI wrapper\n */\n\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { executeClaudeCLI } from '../../../../src/adapters/claude/cli-wrapper.js';\nimport type { ClaudeExecutionOptions } from '../../../../src/types/index.js';\nimport * as spawnModule from '../../../../src/utils/spawn.js';\n\n// Mock the spawn module\nvi.mock('../../../../src/utils/spawn.js', () => ({\n  spawnProcess: vi.fn(),\n}));\n\ndescribe('executeClaudeCLI', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  describe('Text Duplication Prevention', () => {\n    it('should not duplicate text when result event contains accumulated output', async () => {\n      // This is a regression test for the text duplication bug\n      // When Claude streams output, it sends:\n      // 1. Multiple assistant events with text content (streaming)\n      // 2. A final result event with the full accumulated text\n      // We should NOT extract text from the result event as it duplicates the streamed content\n\n      const outputCalls: any[] = [];\n\n      const options: ClaudeExecutionOptions = {\n        onOutput: (data) => {\n          outputCalls.push({\n            text: data.text,\n            accumulated: data.accumulated,\n            hasEvents: data.events && data.events.length > 0,\n          });\n        },\n      };\n\n      // Simulate streaming chunks\n      const chunk1 = JSON.stringify({\n        type: 'assistant',\n        message: {\n          content: [\n            { type: 'text', text: 'Perfect! Let me start with the first question:\\n\\n' },\n          ],\n        },\n        sessionId: 'test-session',\n      });\n\n      const chunk2 = JSON.stringify({\n        type: 'assistant',\n        message: {\n          content: [\n            { type: 'text', text: \"**What's the purpose of this ecommerce app?**\\n\\n\" },\n          ],\n        },\n        sessionId: 'test-session',\n      });\n\n      const chunk3 = JSON.stringify({\n        type: 'result',\n        result:\n          \"Perfect! Let me start with the first question:\\n\\n**What's the purpose of this ecommerce app?**\\n\\n\",\n        sessionId: 'test-session',\n      });\n\n      // Mock spawnProcess to call onStdout with simulated chunks\n      vi.mocked(spawnModule.spawnProcess).mockImplementation(async (_path, opts) => {\n        if (opts?.onStdout) {\n          // Simulate streaming output\n          opts.onStdout(chunk1 + '\\n');\n          opts.onStdout(chunk2 + '\\n');\n          opts.onStdout(chunk3 + '\\n');\n        }\n\n        return {\n          stdout: chunk1 + '\\n' + chunk2 + '\\n' + chunk3 + '\\n',\n          stderr: '',\n          exitCode: 0,\n          duration: 100,\n        };\n      });\n\n      await executeClaudeCLI('/mock/claude', 'test prompt', options);\n\n      // Verify we got 3 onOutput calls\n      expect(outputCalls).toHaveLength(3);\n\n      // First chunk: should contain first text\n      expect(outputCalls[0].text).toBe(\n        'Perfect! Let me start with the first question:\\n\\n'\n      );\n      expect(outputCalls[0].accumulated).toBe(\n        'Perfect! Let me start with the first question:\\n\\n'\n      );\n\n      // Second chunk: should contain second text\n      expect(outputCalls[1].text).toBe(\n        \"**What's the purpose of this ecommerce app?**\\n\\n\"\n      );\n      expect(outputCalls[1].accumulated).toBe(\n        \"Perfect! Let me start with the first question:\\n\\n**What's the purpose of this ecommerce app?**\\n\\n\"\n      );\n\n      // Third chunk (result event): should NOT contain duplicate text\n      // This is the key assertion - result events should not add to text\n      expect(outputCalls[2].text).toBeUndefined();\n\n      // But accumulated should still be the full text (not doubled)\n      expect(outputCalls[2].accumulated).toBe(\n        \"Perfect! Let me start with the first question:\\n\\n**What's the purpose of this ecommerce app?**\\n\\n\"\n      );\n\n      // Verify the result event was parsed (has events)\n      expect(outputCalls[2].hasEvents).toBe(true);\n    });\n\n    it('should correctly accumulate text from multiple assistant messages', async () => {\n      const outputCalls: any[] = [];\n\n      const options: ClaudeExecutionOptions = {\n        onOutput: (data) => {\n          outputCalls.push({\n            text: data.text,\n            accumulated: data.accumulated,\n          });\n        },\n      };\n\n      // Simulate multiple assistant messages\n      const chunks = [\n        JSON.stringify({\n          type: 'assistant',\n          message: { content: [{ type: 'text', text: 'First ' }] },\n        }),\n        JSON.stringify({\n          type: 'assistant',\n          message: { content: [{ type: 'text', text: 'Second ' }] },\n        }),\n        JSON.stringify({\n          type: 'assistant',\n          message: { content: [{ type: 'text', text: 'Third' }] },\n        }),\n      ];\n\n      vi.mocked(spawnModule.spawnProcess).mockImplementation(async (_path, opts) => {\n        if (opts?.onStdout) {\n          for (const chunk of chunks) {\n            opts.onStdout(chunk + '\\n');\n          }\n        }\n\n        return {\n          stdout: chunks.join('\\n'),\n          stderr: '',\n          exitCode: 0,\n          duration: 100,\n        };\n      });\n\n      await executeClaudeCLI('/mock/claude', 'test', options);\n\n      expect(outputCalls).toHaveLength(3);\n\n      // Each chunk should have incremental text\n      expect(outputCalls[0].text).toBe('First ');\n      expect(outputCalls[0].accumulated).toBe('First ');\n\n      expect(outputCalls[1].text).toBe('Second ');\n      expect(outputCalls[1].accumulated).toBe('First Second ');\n\n      expect(outputCalls[2].text).toBe('Third');\n      expect(outputCalls[2].accumulated).toBe('First Second Third');\n    });\n\n    it('should handle result event without text duplication in mixed event stream', async () => {\n      const outputCalls: any[] = [];\n\n      const options: ClaudeExecutionOptions = {\n        onOutput: (data) => {\n          outputCalls.push({\n            text: data.text,\n            accumulated: data.accumulated,\n          });\n        },\n      };\n\n      // Realistic stream with tool use and text\n      const chunks = [\n        JSON.stringify({\n          type: 'assistant',\n          message: {\n            content: [\n              { type: 'text', text: 'Let me help you with that.\\n\\n' },\n              { type: 'tool_use', id: 'tool-1', name: 'Read', input: {} },\n            ],\n          },\n        }),\n        JSON.stringify({\n          type: 'assistant',\n          message: {\n            content: [{ type: 'text', text: 'I found the answer.' }],\n          },\n        }),\n        JSON.stringify({\n          type: 'result',\n          result: 'Let me help you with that.\\n\\nI found the answer.',\n        }),\n      ];\n\n      vi.mocked(spawnModule.spawnProcess).mockImplementation(async (_path, opts) => {\n        if (opts?.onStdout) {\n          for (const chunk of chunks) {\n            opts.onStdout(chunk + '\\n');\n          }\n        }\n\n        return {\n          stdout: chunks.join('\\n'),\n          stderr: '',\n          exitCode: 0,\n          duration: 100,\n        };\n      });\n\n      await executeClaudeCLI('/mock/claude', 'test', options);\n\n      expect(outputCalls).toHaveLength(3);\n\n      // First assistant message\n      expect(outputCalls[0].text).toBe('Let me help you with that.\\n\\n');\n\n      // Second assistant message\n      expect(outputCalls[1].text).toBe('I found the answer.');\n\n      // Result event should NOT duplicate text\n      expect(outputCalls[2].text).toBeUndefined();\n\n      // Final accumulated should match the full output (not doubled)\n      expect(outputCalls[2].accumulated).toBe(\n        'Let me help you with that.\\n\\nI found the answer.'\n      );\n    });\n  });\n\n  describe('Event Parsing', () => {\n    it('should parse and emit events correctly', async () => {\n      const events: any[] = [];\n\n      const options: ClaudeExecutionOptions = {\n        onOutput: (data) => {\n          if (data.events) {\n            events.push(...data.events);\n          }\n        },\n      };\n\n      const chunk = JSON.stringify({\n        type: 'assistant',\n        message: { content: 'test' },\n        sessionId: 'test',\n      });\n\n      vi.mocked(spawnModule.spawnProcess).mockImplementation(async (_path, opts) => {\n        if (opts?.onStdout) {\n          opts.onStdout(chunk + '\\n');\n        }\n\n        return {\n          stdout: chunk,\n          stderr: '',\n          exitCode: 0,\n          duration: 100,\n        };\n      });\n\n      await executeClaudeCLI('/mock/claude', 'test', options);\n\n      expect(events).toHaveLength(1);\n      expect(events[0].type).toBe('assistant');\n    });\n  });\n});\n"
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 11,
        "cache_creation_input_tokens": 249,
        "cache_read_input_tokens": 52370,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 249,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 9,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdLbindYxbNAG7CSU7o",
    "type": "assistant",
    "uuid": "c1c9d089-6fed-4b39-80b0-9f5666e5999d",
    "timestamp": "2025-10-20T02:02:58.622Z"
  },
  {
    "type": "file-history-snapshot",
    "messageId": "c1c9d089-6fed-4b39-80b0-9f5666e5999d",
    "snapshot": {
      "messageId": "63922b84-58b7-45b4-8406-044e8ce7c083",
      "trackedFileBackups": {
        "packages/agent-cli-sdk/src/adapters/claude/cli-wrapper.ts": {
          "backupFileName": "1c21a7e6a151d2f5@v1",
          "version": 1,
          "backupTime": "2025-10-20T02:02:18.832Z"
        },
        "packages/agent-cli-sdk/tests/unit/adapters/claude/cli-wrapper.test.ts": {
          "backupFileName": null,
          "version": 1,
          "backupTime": "2025-10-20T02:02:58.736Z"
        }
      },
      "timestamp": "2025-10-20T02:01:30.826Z"
    },
    "isSnapshotUpdate": true
  },
  {
    "parentUuid": "c1c9d089-6fed-4b39-80b0-9f5666e5999d",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_017GFQP9vBxVtWbPBLR27ssa",
          "type": "tool_result",
          "content": "File created successfully at: /Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/adapters/claude/cli-wrapper.test.ts"
        }
      ]
    },
    "uuid": "64cf5946-4417-4d7b-a413-a67e0979d7fe",
    "timestamp": "2025-10-20T02:02:58.745Z",
    "toolUseResult": {
      "type": "create",
      "filePath": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk/tests/unit/adapters/claude/cli-wrapper.test.ts",
      "content": "/**\n * Tests for Claude CLI wrapper\n */\n\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { executeClaudeCLI } from '../../../../src/adapters/claude/cli-wrapper.js';\nimport type { ClaudeExecutionOptions } from '../../../../src/types/index.js';\nimport * as spawnModule from '../../../../src/utils/spawn.js';\n\n// Mock the spawn module\nvi.mock('../../../../src/utils/spawn.js', () => ({\n  spawnProcess: vi.fn(),\n}));\n\ndescribe('executeClaudeCLI', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  describe('Text Duplication Prevention', () => {\n    it('should not duplicate text when result event contains accumulated output', async () => {\n      // This is a regression test for the text duplication bug\n      // When Claude streams output, it sends:\n      // 1. Multiple assistant events with text content (streaming)\n      // 2. A final result event with the full accumulated text\n      // We should NOT extract text from the result event as it duplicates the streamed content\n\n      const outputCalls: any[] = [];\n\n      const options: ClaudeExecutionOptions = {\n        onOutput: (data) => {\n          outputCalls.push({\n            text: data.text,\n            accumulated: data.accumulated,\n            hasEvents: data.events && data.events.length > 0,\n          });\n        },\n      };\n\n      // Simulate streaming chunks\n      const chunk1 = JSON.stringify({\n        type: 'assistant',\n        message: {\n          content: [\n            { type: 'text', text: 'Perfect! Let me start with the first question:\\n\\n' },\n          ],\n        },\n        sessionId: 'test-session',\n      });\n\n      const chunk2 = JSON.stringify({\n        type: 'assistant',\n        message: {\n          content: [\n            { type: 'text', text: \"**What's the purpose of this ecommerce app?**\\n\\n\" },\n          ],\n        },\n        sessionId: 'test-session',\n      });\n\n      const chunk3 = JSON.stringify({\n        type: 'result',\n        result:\n          \"Perfect! Let me start with the first question:\\n\\n**What's the purpose of this ecommerce app?**\\n\\n\",\n        sessionId: 'test-session',\n      });\n\n      // Mock spawnProcess to call onStdout with simulated chunks\n      vi.mocked(spawnModule.spawnProcess).mockImplementation(async (_path, opts) => {\n        if (opts?.onStdout) {\n          // Simulate streaming output\n          opts.onStdout(chunk1 + '\\n');\n          opts.onStdout(chunk2 + '\\n');\n          opts.onStdout(chunk3 + '\\n');\n        }\n\n        return {\n          stdout: chunk1 + '\\n' + chunk2 + '\\n' + chunk3 + '\\n',\n          stderr: '',\n          exitCode: 0,\n          duration: 100,\n        };\n      });\n\n      await executeClaudeCLI('/mock/claude', 'test prompt', options);\n\n      // Verify we got 3 onOutput calls\n      expect(outputCalls).toHaveLength(3);\n\n      // First chunk: should contain first text\n      expect(outputCalls[0].text).toBe(\n        'Perfect! Let me start with the first question:\\n\\n'\n      );\n      expect(outputCalls[0].accumulated).toBe(\n        'Perfect! Let me start with the first question:\\n\\n'\n      );\n\n      // Second chunk: should contain second text\n      expect(outputCalls[1].text).toBe(\n        \"**What's the purpose of this ecommerce app?**\\n\\n\"\n      );\n      expect(outputCalls[1].accumulated).toBe(\n        \"Perfect! Let me start with the first question:\\n\\n**What's the purpose of this ecommerce app?**\\n\\n\"\n      );\n\n      // Third chunk (result event): should NOT contain duplicate text\n      // This is the key assertion - result events should not add to text\n      expect(outputCalls[2].text).toBeUndefined();\n\n      // But accumulated should still be the full text (not doubled)\n      expect(outputCalls[2].accumulated).toBe(\n        \"Perfect! Let me start with the first question:\\n\\n**What's the purpose of this ecommerce app?**\\n\\n\"\n      );\n\n      // Verify the result event was parsed (has events)\n      expect(outputCalls[2].hasEvents).toBe(true);\n    });\n\n    it('should correctly accumulate text from multiple assistant messages', async () => {\n      const outputCalls: any[] = [];\n\n      const options: ClaudeExecutionOptions = {\n        onOutput: (data) => {\n          outputCalls.push({\n            text: data.text,\n            accumulated: data.accumulated,\n          });\n        },\n      };\n\n      // Simulate multiple assistant messages\n      const chunks = [\n        JSON.stringify({\n          type: 'assistant',\n          message: { content: [{ type: 'text', text: 'First ' }] },\n        }),\n        JSON.stringify({\n          type: 'assistant',\n          message: { content: [{ type: 'text', text: 'Second ' }] },\n        }),\n        JSON.stringify({\n          type: 'assistant',\n          message: { content: [{ type: 'text', text: 'Third' }] },\n        }),\n      ];\n\n      vi.mocked(spawnModule.spawnProcess).mockImplementation(async (_path, opts) => {\n        if (opts?.onStdout) {\n          for (const chunk of chunks) {\n            opts.onStdout(chunk + '\\n');\n          }\n        }\n\n        return {\n          stdout: chunks.join('\\n'),\n          stderr: '',\n          exitCode: 0,\n          duration: 100,\n        };\n      });\n\n      await executeClaudeCLI('/mock/claude', 'test', options);\n\n      expect(outputCalls).toHaveLength(3);\n\n      // Each chunk should have incremental text\n      expect(outputCalls[0].text).toBe('First ');\n      expect(outputCalls[0].accumulated).toBe('First ');\n\n      expect(outputCalls[1].text).toBe('Second ');\n      expect(outputCalls[1].accumulated).toBe('First Second ');\n\n      expect(outputCalls[2].text).toBe('Third');\n      expect(outputCalls[2].accumulated).toBe('First Second Third');\n    });\n\n    it('should handle result event without text duplication in mixed event stream', async () => {\n      const outputCalls: any[] = [];\n\n      const options: ClaudeExecutionOptions = {\n        onOutput: (data) => {\n          outputCalls.push({\n            text: data.text,\n            accumulated: data.accumulated,\n          });\n        },\n      };\n\n      // Realistic stream with tool use and text\n      const chunks = [\n        JSON.stringify({\n          type: 'assistant',\n          message: {\n            content: [\n              { type: 'text', text: 'Let me help you with that.\\n\\n' },\n              { type: 'tool_use', id: 'tool-1', name: 'Read', input: {} },\n            ],\n          },\n        }),\n        JSON.stringify({\n          type: 'assistant',\n          message: {\n            content: [{ type: 'text', text: 'I found the answer.' }],\n          },\n        }),\n        JSON.stringify({\n          type: 'result',\n          result: 'Let me help you with that.\\n\\nI found the answer.',\n        }),\n      ];\n\n      vi.mocked(spawnModule.spawnProcess).mockImplementation(async (_path, opts) => {\n        if (opts?.onStdout) {\n          for (const chunk of chunks) {\n            opts.onStdout(chunk + '\\n');\n          }\n        }\n\n        return {\n          stdout: chunks.join('\\n'),\n          stderr: '',\n          exitCode: 0,\n          duration: 100,\n        };\n      });\n\n      await executeClaudeCLI('/mock/claude', 'test', options);\n\n      expect(outputCalls).toHaveLength(3);\n\n      // First assistant message\n      expect(outputCalls[0].text).toBe('Let me help you with that.\\n\\n');\n\n      // Second assistant message\n      expect(outputCalls[1].text).toBe('I found the answer.');\n\n      // Result event should NOT duplicate text\n      expect(outputCalls[2].text).toBeUndefined();\n\n      // Final accumulated should match the full output (not doubled)\n      expect(outputCalls[2].accumulated).toBe(\n        'Let me help you with that.\\n\\nI found the answer.'\n      );\n    });\n  });\n\n  describe('Event Parsing', () => {\n    it('should parse and emit events correctly', async () => {\n      const events: any[] = [];\n\n      const options: ClaudeExecutionOptions = {\n        onOutput: (data) => {\n          if (data.events) {\n            events.push(...data.events);\n          }\n        },\n      };\n\n      const chunk = JSON.stringify({\n        type: 'assistant',\n        message: { content: 'test' },\n        sessionId: 'test',\n      });\n\n      vi.mocked(spawnModule.spawnProcess).mockImplementation(async (_path, opts) => {\n        if (opts?.onStdout) {\n          opts.onStdout(chunk + '\\n');\n        }\n\n        return {\n          stdout: chunk,\n          stderr: '',\n          exitCode: 0,\n          duration: 100,\n        };\n      });\n\n      await executeClaudeCLI('/mock/claude', 'test', options);\n\n      expect(events).toHaveLength(1);\n      expect(events[0].type).toBe('assistant');\n    });\n  });\n});\n",
      "structuredPatch": []
    }
  },
  {
    "parentUuid": "64cf5946-4417-4d7b-a413-a67e0979d7fe",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_011FTKUe2MafyPeohz3CsyNi",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "thinking",
          "thinking": "Great! I've created the regression test. Now let me mark that todo as completed and move on to running the tests to verify the fix works.",
          "signature": "ErUCCkYICBgCKkBvGPXLG5hmezTLdFqWFb/+lzMHZvXWav2IUs8mB5FHtmt8TIcenx1mvEj7DjLyhzUIK3PflklL0R82WIQRqv6jEgz3vzwEFp1we7ZdHX4aDIttEPiC4McM9Hkz8CIwJccCFyRvnieYX/3j6hYNjaUvGZKh7aSICzgOPDVfhS44jqhJ68nKY1ruINOkSMV9KpwBUuaQ586Twtg88nDQKCSEtfbpBLV7vqFPY9q30sXeqyyCjEz0Az8b2MxPBk38qUold6juYe4jYgSoelDt8DWUNPHN1Sf9aWUcmdbvWUz+/RaR4TTrw32C7XiVD+zBV8Ibh21O2d7oj6AyRlzYnthStFLyQOLyV+3kp7bfCrWgtbetr2MM6rMoWoMqr6FyzvEu9lmX9Qj3LWLyOe7lGAE="
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 11,
        "cache_creation_input_tokens": 2812,
        "cache_read_input_tokens": 52619,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 2812,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdPFGohwVmYCfT9gECC",
    "type": "assistant",
    "uuid": "0bba245b-cf61-4251-bcfe-f3b52997aa3f",
    "timestamp": "2025-10-20T02:03:02.822Z"
  },
  {
    "parentUuid": "0bba245b-cf61-4251-bcfe-f3b52997aa3f",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_011FTKUe2MafyPeohz3CsyNi",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_01LCFFyQeVV2QxJzveyFtieQ",
          "name": "TodoWrite",
          "input": {
            "todos": [
              {
                "content": "Remove result event text extraction from cli-wrapper.ts",
                "status": "completed",
                "activeForm": "Removing result event text extraction from cli-wrapper.ts"
              },
              {
                "content": "Create regression test for text duplication fix",
                "status": "completed",
                "activeForm": "Creating regression test for text duplication fix"
              },
              {
                "content": "Run tests to verify the fix",
                "status": "in_progress",
                "activeForm": "Running tests to verify the fix"
              }
            ]
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 11,
        "cache_creation_input_tokens": 2812,
        "cache_read_input_tokens": 52619,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 2812,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdPFGohwVmYCfT9gECC",
    "type": "assistant",
    "uuid": "a64791c4-f58b-461e-9c47-92e6450f2e97",
    "timestamp": "2025-10-20T02:03:04.832Z"
  },
  {
    "parentUuid": "a64791c4-f58b-461e-9c47-92e6450f2e97",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_01LCFFyQeVV2QxJzveyFtieQ",
          "type": "tool_result",
          "content": "Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"
        }
      ]
    },
    "uuid": "d96d6a7e-839c-4fcc-98fd-eebade9b18c1",
    "timestamp": "2025-10-20T02:03:04.947Z",
    "toolUseResult": {
      "oldTodos": [
        {
          "content": "Remove result event text extraction from cli-wrapper.ts",
          "status": "completed",
          "activeForm": "Removing result event text extraction from cli-wrapper.ts"
        },
        {
          "content": "Create regression test for text duplication fix",
          "status": "in_progress",
          "activeForm": "Creating regression test for text duplication fix"
        },
        {
          "content": "Run tests to verify the fix",
          "status": "pending",
          "activeForm": "Running tests to verify the fix"
        }
      ],
      "newTodos": [
        {
          "content": "Remove result event text extraction from cli-wrapper.ts",
          "status": "completed",
          "activeForm": "Removing result event text extraction from cli-wrapper.ts"
        },
        {
          "content": "Create regression test for text duplication fix",
          "status": "completed",
          "activeForm": "Creating regression test for text duplication fix"
        },
        {
          "content": "Run tests to verify the fix",
          "status": "in_progress",
          "activeForm": "Running tests to verify the fix"
        }
      ]
    }
  },
  {
    "parentUuid": "d96d6a7e-839c-4fcc-98fd-eebade9b18c1",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01EpCB5qXXiqzPHSjtsrsrbS",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "thinking",
          "thinking": "Now let me run the tests to verify the fix works. I should run the specific test file I just created.",
          "signature": "Eo0CCkYICBgCKkCReVxfsd1IF3fvrVRMl3Y9pY6cCh3ok3jJgbrpGLJ7IPshdNxsyLvEOU7261S78k0Aoktai0bWgT05/6yPVh/tEgynJ9wks3xbOSBKVdIaDCc9mBunCZGYCrJdYyIwmjd8lwFWakxHKhyeTFm5DQfquB7QoGsXRnsVwyCgkI8S8ip1Ou4cegNL+QLXN3h7KnWT6lYCqiFeFnizR1sHqOTapvVnS6NnqDoqutC7qslCVSw+9C5Ji7M3pFIRAUOofEdlPynUZM7HyOUGhlpRYUUSJORe1PwUZXWlCsDIaJqfF515LZCZKABcNFV55u+mGL7MWu8nuLHG0htmusXjcDF20lFtOIgYAQ=="
        },
        {
          "type": "text",
          "text": "Now let's run the tests to verify the fix:"
        },
        {
          "type": "tool_use",
          "id": "toolu_017QCDZq5LeZDxojo6T6kHB8",
          "name": "Bash",
          "input": {
            "command": "cd /Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk && pnpm test tests/unit/adapters/claude/cli-wrapper.test.ts",
            "description": "Run new cli-wrapper regression tests"
          }
        }
      ],
      "stop_reason": "tool_use",
      "stop_sequence": null,
      "usage": {
        "input_tokens": 11,
        "cache_creation_input_tokens": 246,
        "cache_read_input_tokens": 55431,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 246,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 169,
        "service_tier": "standard"
      }
    },
    "type": "assistant",
    "uuid": "619471fc-a24e-4b9d-b58e-0d52a0f507f4",
    "timestamp": "2025-10-20T02:03:09.333Z"
  },
  {
    "parentUuid": "619471fc-a24e-4b9d-b58e-0d52a0f507f4",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_017QCDZq5LeZDxojo6T6kHB8",
          "type": "tool_result",
          "content": "> @sourceborn/agent-cli-sdk@3.0.0 test /Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk\n> vitest run tests/unit/adapters/claude/cli-wrapper.test.ts\n\n\n RUN  v2.1.9 /Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk\n\n \u2713 tests/unit/adapters/claude/cli-wrapper.test.ts (4 tests) 2ms\n\n Test Files  1 passed (1)\n      Tests  4 passed (4)\n   Start at  20:03:10\n   Duration  218ms (transform 40ms, setup 5ms, collect 44ms, tests 2ms, environment 0ms, prepare 28ms)",
          "is_error": false
        }
      ]
    },
    "uuid": "96b39881-73cf-449a-96f4-7519edf8166e",
    "timestamp": "2025-10-20T02:03:10.278Z",
    "toolUseResult": {
      "stdout": "> @sourceborn/agent-cli-sdk@3.0.0 test /Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk\n> vitest run tests/unit/adapters/claude/cli-wrapper.test.ts\n\n\n RUN  v2.1.9 /Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk\n\n \u2713 tests/unit/adapters/claude/cli-wrapper.test.ts (4 tests) 2ms\n\n Test Files  1 passed (1)\n      Tests  4 passed (4)\n   Start at  20:03:10\n   Duration  218ms (transform 40ms, setup 5ms, collect 44ms, tests 2ms, environment 0ms, prepare 28ms)",
      "stderr": "",
      "interrupted": false,
      "isImage": false
    }
  },
  {
    "parentUuid": "96b39881-73cf-449a-96f4-7519edf8166e",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01PZpzgCJzgUo82xvPYqTTs8",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "thinking",
          "thinking": "Excellent! All the new tests are passing. Now let me run the full test suite to make sure I didn't break anything else.",
          "signature": "EqQCCkYICBgCKkASQb5mw9cMsaf5wGgaaiMaitf4ugrnnA8Y1RhfX/glaEBRATbFKRcPiUYcOpHQrCTo+g/SR/G8NRRinURDpEOyEgxr819hVQvUnwr2HL8aDJCL2HRJTXYIAPyNDiIwuEl7yVwPZwLxKk8fntQtCCao+iDOHwqocN5hzN4q4n7hSWW7GQtFGHGaGnLrJfpOKosBVGZevPOI3ml+EBqUPZqOI2777+yjGgkfPM2IiJZMSjYwPtov+a6U1ZQ0+cri2xbUI92HQ+ByDUMLNUt6kwik9UVSGG86RlhdCYppXycxjkm4TDP/9abmMMSMvOhkXv3eR2+bjJpLBVjGqRruHRFovKXyJ18yMx+7Td/zJjVuOMbrGODTrEFtIRsxlhgB"
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 10,
        "cache_creation_input_tokens": 393,
        "cache_read_input_tokens": 55677,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 393,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 5,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdQ6MoW8SwEmaiDkwZm",
    "type": "assistant",
    "uuid": "c0b1d1f0-239a-49eb-aefb-7e9138d2d6cb",
    "timestamp": "2025-10-20T02:03:14.380Z"
  },
  {
    "parentUuid": "c0b1d1f0-239a-49eb-aefb-7e9138d2d6cb",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01PZpzgCJzgUo82xvPYqTTs8",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "text",
          "text": "Perfect! The regression tests pass. Let's run the full test suite to ensure we didn't break anything:"
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 10,
        "cache_creation_input_tokens": 393,
        "cache_read_input_tokens": 55677,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 393,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 5,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdQ6MoW8SwEmaiDkwZm",
    "type": "assistant",
    "uuid": "24a18de7-71df-42b0-abc4-39a409c1db7b",
    "timestamp": "2025-10-20T02:03:14.747Z"
  },
  {
    "parentUuid": "24a18de7-71df-42b0-abc4-39a409c1db7b",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01PZpzgCJzgUo82xvPYqTTs8",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_018bGhQaky2WhQiXzMXi9VQT",
          "name": "Bash",
          "input": {
            "command": "pnpm test",
            "description": "Run full test suite",
            "timeout": 120000
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 10,
        "cache_creation_input_tokens": 393,
        "cache_read_input_tokens": 55677,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 393,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 5,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdQ6MoW8SwEmaiDkwZm",
    "type": "assistant",
    "uuid": "55eae591-f34e-416b-988c-6c0c87634952",
    "timestamp": "2025-10-20T02:03:15.568Z"
  },
  {
    "parentUuid": "55eae591-f34e-416b-988c-6c0c87634952",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_018bGhQaky2WhQiXzMXi9VQT",
          "type": "tool_result",
          "content": "> @sourceborn/agent-cli-sdk@3.0.0 test /Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk\n> vitest run\n\n\n RUN  v2.1.9 /Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk\n\n \u2713 tests/unit/adapters/claude/mcp-detector.test.ts (19 tests) 4ms\n \u2713 tests/integration/client-workflows.test.ts (11 tests) 3ms\n \u2713 tests/unit/adapters/claude/image-handler.test.ts (20 tests) 6ms\n \u2713 tests/unit/core/errors.test.ts (46 tests) 9ms\n \u2713 tests/unit/utils/validation.test.ts (15 tests) 3ms\n \u2713 tests/unit/utils/json-parser.test.ts (12 tests) 3ms\n \u2713 tests/unit/utils/spawn.test.ts (12 tests) 24ms\n \u2713 tests/unit/client/agent-client.test.ts (23 tests) 27ms\n \u2713 tests/unit/client/session.test.ts (32 tests) 29ms\n \u2713 tests/unit/adapters/claude/cli-wrapper.test.ts (4 tests) 3ms\n \u2713 tests/unit/adapters/claude/parser.test.ts (49 tests) 8ms\n \u2713 tests/integration/session-flows.test.ts (20 tests) 98ms\n\n Test Files  12 passed (12)\n      Tests  263 passed (263)\n   Start at  20:03:16\n   Duration  343ms (transform 373ms, setup 83ms, collect 682ms, tests 216ms, environment 1ms, prepare 684ms)",
          "is_error": false
        }
      ]
    },
    "uuid": "b77a9818-04b3-4bc0-84d6-96a0bf79946e",
    "timestamp": "2025-10-20T02:03:16.461Z",
    "toolUseResult": {
      "stdout": "> @sourceborn/agent-cli-sdk@3.0.0 test /Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk\n> vitest run\n\n\n RUN  v2.1.9 /Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk\n\n \u2713 tests/unit/adapters/claude/mcp-detector.test.ts (19 tests) 4ms\n \u2713 tests/integration/client-workflows.test.ts (11 tests) 3ms\n \u2713 tests/unit/adapters/claude/image-handler.test.ts (20 tests) 6ms\n \u2713 tests/unit/core/errors.test.ts (46 tests) 9ms\n \u2713 tests/unit/utils/validation.test.ts (15 tests) 3ms\n \u2713 tests/unit/utils/json-parser.test.ts (12 tests) 3ms\n \u2713 tests/unit/utils/spawn.test.ts (12 tests) 24ms\n \u2713 tests/unit/client/agent-client.test.ts (23 tests) 27ms\n \u2713 tests/unit/client/session.test.ts (32 tests) 29ms\n \u2713 tests/unit/adapters/claude/cli-wrapper.test.ts (4 tests) 3ms\n \u2713 tests/unit/adapters/claude/parser.test.ts (49 tests) 8ms\n \u2713 tests/integration/session-flows.test.ts (20 tests) 98ms\n\n Test Files  12 passed (12)\n      Tests  263 passed (263)\n   Start at  20:03:16\n   Duration  343ms (transform 373ms, setup 83ms, collect 682ms, tests 216ms, environment 1ms, prepare 684ms)",
      "stderr": "",
      "interrupted": false,
      "isImage": false
    }
  },
  {
    "parentUuid": "b77a9818-04b3-4bc0-84d6-96a0bf79946e",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01H8UJMBb4YWa5iXGmwij97e",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "thinking",
          "thinking": "\n\n\n\nExcellent! All 263 tests pass, including the 4 new regression tests I added. The fix is working correctly and hasn't broken any existing functionality.\n\nNow let me mark the final todo as completed and provide a summary to the user.",
          "signature": "EpUDCkYICBgCKkCNFNHQjoQ+fkR3B8VOv3ktRFpDleJsmZwcw41IBqPpXVtc+/4KNzHQa7uFn5TY+tOwjADRQlfhUj4UDLpGH34IEgxUX6AgtfzzpJCuZkAaDKdFZ8M1VX7wzLSE3iIwdNdzM+c3vH3qA0jxosvGAFV5pvIQsAqeWzDsEVKroIWuoEKICuFbZStcfEhplKwEKvwBymn7mnGWh6/ksfLdcAHGXrxMO/fZ3t2Z9HkhzlqL/mLtdNZnLUVvRexpVQjKpXjXDtP9hcXUlhcUvgkH1q0LpGIMWLrsblKbMf3jSMEUEP7hNhS1wM0AMeEKWgKFwImSfVw3xXAtNBCOcwcgV1pq9RrNXqQhLQ4vunhPO2Z3c9I36f02xcz6Lu5F660J6Vd4rMv4FZhUhfMDc2tbxjehaQTK1XBix7bXgw7WeZttgns5gWhu8UPpYE3MbiP5dAlZP8ryvLpnlHL/L9YY6M7Aa/rBVuLluQwDx3swFjyHMidwpY6rcXQuZvOX9eKlS9K7E+F1E4pkjJ2FuEvzGAE="
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 9,
        "cache_creation_input_tokens": 654,
        "cache_read_input_tokens": 56070,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 654,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 1,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdQYmo11LZBgWPJavkZ",
    "type": "assistant",
    "uuid": "68eda724-bef0-407e-998b-005c56d41b8d",
    "timestamp": "2025-10-20T02:03:20.155Z"
  },
  {
    "parentUuid": "68eda724-bef0-407e-998b-005c56d41b8d",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01H8UJMBb4YWa5iXGmwij97e",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_01S5esTeymLcvY4fh6Lhw3my",
          "name": "TodoWrite",
          "input": {
            "todos": [
              {
                "content": "Remove result event text extraction from cli-wrapper.ts",
                "status": "completed",
                "activeForm": "Removing result event text extraction from cli-wrapper.ts"
              },
              {
                "content": "Create regression test for text duplication fix",
                "status": "completed",
                "activeForm": "Creating regression test for text duplication fix"
              },
              {
                "content": "Run tests to verify the fix",
                "status": "completed",
                "activeForm": "Running tests to verify the fix"
              }
            ]
          }
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 9,
        "cache_creation_input_tokens": 654,
        "cache_read_input_tokens": 56070,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 654,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 218,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdQYmo11LZBgWPJavkZ",
    "type": "assistant",
    "uuid": "5f1f672d-ef18-4121-85f1-535c6f090a3f",
    "timestamp": "2025-10-20T02:03:22.600Z"
  },
  {
    "parentUuid": "5f1f672d-ef18-4121-85f1-535c6f090a3f",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "type": "user",
    "message": {
      "role": "user",
      "content": [
        {
          "tool_use_id": "toolu_01S5esTeymLcvY4fh6Lhw3my",
          "type": "tool_result",
          "content": "Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"
        }
      ]
    },
    "uuid": "d94f6797-ffe2-477b-81cd-79f094791f19",
    "timestamp": "2025-10-20T02:03:22.681Z",
    "toolUseResult": {
      "oldTodos": [
        {
          "content": "Remove result event text extraction from cli-wrapper.ts",
          "status": "completed",
          "activeForm": "Removing result event text extraction from cli-wrapper.ts"
        },
        {
          "content": "Create regression test for text duplication fix",
          "status": "completed",
          "activeForm": "Creating regression test for text duplication fix"
        },
        {
          "content": "Run tests to verify the fix",
          "status": "in_progress",
          "activeForm": "Running tests to verify the fix"
        }
      ],
      "newTodos": [
        {
          "content": "Remove result event text extraction from cli-wrapper.ts",
          "status": "completed",
          "activeForm": "Removing result event text extraction from cli-wrapper.ts"
        },
        {
          "content": "Create regression test for text duplication fix",
          "status": "completed",
          "activeForm": "Creating regression test for text duplication fix"
        },
        {
          "content": "Run tests to verify the fix",
          "status": "completed",
          "activeForm": "Running tests to verify the fix"
        }
      ]
    }
  },
  {
    "parentUuid": "d94f6797-ffe2-477b-81cd-79f094791f19",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01RpLq2bKuywoG22KFTyKJRS",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "thinking",
          "thinking": "Perfect! All tasks are completed. Let me provide a summary to the user about what was fixed.",
          "signature": "EocCCkYICBgCKkAi2iuxWy6ETaBQNJFsVmz+Vp+sZp+4zWIV8ZXA4vXrRvouilNrd8luExFVjDYwraESCagdS6WtE4I8Zg+vgG/REgyPuMDtlabP9d79P3oaDK+drn6mmHnXCvk2SCIw0xFSfUZe07HXuiBXZkVZg3tSeu2vMIs/xgsZ5F5Y6PXSQUp9JqdYGuL6YB18j8gfKm/toppSuNejQ/xc5uSiiHjeXhO8dZiGVQCkOE462olRxmZXKliH2AlrcEnPlKLQckG4mxxM8xPqS3Pvi62sciaOawvYPAixUXpBw+nN7Ffwo8kEscegtFxQdKr9FeUpkgLhePeLJGLqACqLxbM3BDsYAQ=="
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 9,
        "cache_creation_input_tokens": 266,
        "cache_read_input_tokens": 56724,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 266,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdR1aM4QcZxrQvcbJAv",
    "type": "assistant",
    "uuid": "181db611-1ffa-4db5-9949-ca66b2892101",
    "timestamp": "2025-10-20T02:03:25.871Z"
  },
  {
    "parentUuid": "181db611-1ffa-4db5-9949-ca66b2892101",
    "isSidechain": false,
    "userType": "external",
    "cwd": "/Users/jnarowski/Dev/sourceborn/src/agent-workflows-monorepo/packages/agent-cli-sdk",
    "sessionId": "40959b0c-1269-4656-8b3f-0a2149b4fb82",
    "version": "2.0.22",
    "gitBranch": "feat/agent-cli-sdk-v2",
    "message": {
      "model": "claude-sonnet-4-5-20250929",
      "id": "msg_01RpLq2bKuywoG22KFTyKJRS",
      "type": "message",
      "role": "assistant",
      "content": [
        {
          "type": "text",
          "text": "Excellent! The text duplication issue is now fixed. Here's what I did:\n\n## Summary\n\n**Root Cause:**\nThe `cli-wrapper.ts` was extracting text from both:\n1. `assistant` events (streaming messages) \n2. `result` events (final accumulated output)\n\nSince the `result` event contains the complete accumulated text from all `assistant` events, this caused the entire response to appear twice in the `onOutput` callback.\n\n## Changes Made\n\n### 1. Fixed `cli-wrapper.ts` (lines 137-140)\nRemoved the code that was extracting text from `result` events:\n```typescript\n// Extract text from result events  \u2190 REMOVED\nif (event.type === 'result' && event.result && typeof event.result === 'string') {\n  chunkText += event.result;  \u2190 This was causing duplication\n}\n```\n\n### 2. Added Regression Tests\nCreated comprehensive test coverage in `tests/unit/adapters/claude/cli-wrapper.test.ts`:\n- **Test 1**: Verifies no duplication when `result` event contains accumulated output\n- **Test 2**: Verifies correct text accumulation from multiple `assistant` messages\n- **Test 3**: Tests mixed event streams with tool use and text content\n\n## Test Results\n- \u2705 All 4 new regression tests pass\n- \u2705 All 263 existing tests still pass\n- \u2705 No breaking changes\n\nThe `dynamic-scoping-session.ts` example should now work correctly without duplicating text during Q&A sessions!"
        }
      ],
      "stop_reason": null,
      "stop_sequence": null,
      "usage": {
        "input_tokens": 9,
        "cache_creation_input_tokens": 266,
        "cache_read_input_tokens": 56724,
        "cache_creation": {
          "ephemeral_5m_input_tokens": 266,
          "ephemeral_1h_input_tokens": 0
        },
        "output_tokens": 2,
        "service_tier": "standard"
      }
    },
    "requestId": "req_011CUHdR1aM4QcZxrQvcbJAv",
    "type": "assistant",
    "uuid": "43fe097a-6408-4a0f-88ec-a6296500c34b",
    "timestamp": "2025-10-20T02:03:33.406Z"
  }
]